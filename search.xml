<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>人语（一）</title>
      <link href="/2018/04/16/%E4%BA%BA%E8%AF%AD%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/04/16/%E4%BA%BA%E8%AF%AD%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>抱歉，我无意于窃听你们的谈话，只是正好你们的话语进入了我的耳朵，而又恰好我记了下来。<br>以人语为名，犯罪都是记录别人的话，我希望记的是任何人，而非一个。</p><a id="more"></a><p>1.一个小朋友对他奶奶说：&gt;&gt;</p><p>“你是傻傻龙，我是可爱龙”<br>（听着就觉得今天会很美好）</p><p>2.一男子在地铁进站，早晨安检处，一男子提着包就进去了，安检员提醒需要过安检。&gt;&gt;</p><p>男子：“熟人”！<br>安检员：“你给我回来”。</p><p>3.一对情侣，早晨上班的路上。&gt;&gt;</p><p>女：“我天天这么幸苦，听到这话是真的很难受。现在年轻人找不到工作的一抓一大把，以前你可以跟别人一起合租，但现在不行了。每天都想着买什么菜做什么菜，你不会我也不会，没有谁生下来就会做菜。我上班那么累，回来还要做饭，你工作也不好好找，做饭你也不做，你让我怎么办！”<br>男生没有说话。<br>（我跟着走到地铁，一路听着很压抑）</p><p>4.我走在去吃饭的路上，听见一个女的正在打电话。&gt;&gt;</p><p>“那边不想离，这边不想放手，一口想吃两个胖子。”<br>(我多看了一眼，确实有点胖)</p><p>5.一个小女孩对他姑姑说。&gt;&gt;</p><p>“我现在是白马了，姑姑是公主！”<br>（我做你的白马吧）</p><p>6.一个爷爷对他朋友说&gt;&gt;</p><p>现在我也是爸爸了，买了东西想给小狗吃，小狗吃，就没坏，小狗不吃我也不吃。<br>（小狗：…）</p><p>7.地铁上，一个长辈和一个小伙子的谈话（地铁上遇见）&gt;&gt;</p><p>长辈：小华，你那个车子跑的不蛮好的么，怎么不干了？<br>小伙子：不想干了，累了（笑着说）<br>长辈：男人要生活哎，找什么工作不行，哪有轻松的活呢。<br>小伙子：都一样都一样。</p><p>8.公交站等车，一对爷爷奶奶的对话。&gt;&gt;</p><p>爷爷：阿嚏（对着奶奶）<br>奶奶：滚  有多远走多远<br>爷爷：阿嚏（又对着打了个喷嚏）<br>奶奶：滚  又放这个屁<br>然后两人保持了1.5米的距离<br>爷爷：笑<br>（听的不太清，应该是爷爷偷偷买了个东西）</p><p>9.放假去地铁站，听到有人哭，是一个行李箱。&gt;&gt;</p><p>“呜呜呜呜呜呜…”</p><hr><p>写于 2018.4.16 22:51</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>暴走YU人节</title>
      <link href="/2018/04/03/%E6%9A%B4%E8%B5%B0YU%E4%BA%BA%E8%8A%82/"/>
      <url>/2018/04/03/%E6%9A%B4%E8%B5%B0YU%E4%BA%BA%E8%8A%82/</url>
      <content type="html"><![CDATA[<p>陪伴我五年的暴走大事件。</p><a id="more"></a><p>我看暴走大事件的时候，是第二季。看了之后也把第一季的课给补了。</p><p>当时还是个小小的演播室，尼玛和蜜桃还是搭档。记得又次在床上笑着抖，于是分享给了室友。之后，室友叫我安尼玛，叫另一个室友洪陶为蜜桃，叫了四年，现在叫的少了。后来，舞台越来越大，却没能容下尼玛和蜜桃，只剩下王尼玛在主持。</p><p>不知怎的，那位不愿透露姓名的唐马儒先生走了，可能继续经营他的肯打鸡了吧，直到今天，还会有人在弹幕里呼唤唐马儒。</p><p>你说暴走大事件有什么好看的呢？可能确实没那么好看，至少如果你现在开始看的话，我想你也看不下去。所以，我能给出的解释就是成长的过程。从早期的播报一些有趣的新闻，当如今的反讽，我能看到大事件在变化，至少我觉得她是一个三观比较正的节目。正因为如此，总有一天会得罪人，如今的大事件不知是因为五年的疲乏还是因为舆论的压力，可能确实缺了点什么。</p><p>我还是会在每个周五抽个时间去看一下，多少有点情怀，也带有点习惯。</p><p>三月底的时候得知，暴走又个线下活动在上海举行，暴走YU人节。当时就订了票。要还是学生可能就没去了，正是因为一工作就感觉已老，想做的事再不做就没机会做了。于是，我将这次去看漫展当作即将步入中年油腻时期老男人的恶趣味。</p><p>本想着自己一个人去逛逛的，但这不同于去看风景，总得热闹一点。约了几个朋友都脱不开身，好在有个室友（我们叫他大哥）在苏州，遂一起去了。感谢大哥，否则我肯定少了很多拍照的机会。</p><p>我本身很少去看二次元的东西，对这些也并不感冒，当然不了解也自然不会去评论。我本身也没有多喜欢的明星，也不知追星事何种滋味，我去是想看暴走家族，想看丢失的情怀。值得高兴的是，去了之后发现了意外之喜，就像我总说的，人生总是充满了惊喜。</p><p>漫展在上海新国际博览中心W1、W2厅，里面有很多展区，手游的、软件的、还有些二次元组合。虽然那些二次元组合我没一个认识的，但看他们表演也颇有乐趣，看着台下那些懂这个人们的热情，我想这些肯定比我想象的更有意思，让我对二次元有了新的认识。这世界有太多的未知了，我们如同井底之蛙守着我们的那片天去揣测外面的世界，也不少有妄自评论，真的只有自己去体会了，去了解了，才能够理解某个群体的行为。也应当怀着敬畏之心，去慢慢认知这个世界，给出理性的判断。</p><p>我假装是一个二次元迷恋者，混迹于人群之中，好让自己看起来没那么异样，做着一个看漫展的人该做的事。也没忘记我的初中生，等着暴走家族下午的出现。先和好友一起闲逛，如同其他人一样，与展厅旁的女孩们合影。对，就是女孩，换做其他任何一个称呼感觉都显得油腻了，而事实上她们看着都比我小，尽管去查阅资料发现我仍比她们年轻上好几岁，可能我的心早老了，跟不上这帮孩子们的节奏了，想想这次过来或许能让自己年轻一点。</p><p>看漫展的流程就不赘述了，说点有趣的事。我被一个女孩吸引了。她穿着女巫装站在狼人杀展区的一侧，看着背影原本只想凑凑热闹过去拍个照。我漫不经心的走到前侧，看了一会，纠结着还要不要过去拍照，刚刚的那股不在意的勇敢顿时没了，你知道那种感觉么，对，就是害羞（从我这个脸皮厚的人说出来还真是滑稽呢）。我没有冲过去拍照，看了一会离开了，走的并不远，我开始思考我是怎么了，这不我啊，我那张吴彦祖的脸不是早不在了么！我把手机给了我基友，跟他说：“待会给我拍照，要蹲下来拍”。我在寻找机会，终于找到一丝缝隙，用着矫健的身躯滑到了她的身边，淡定的询问：“能和你合个影么？”，如同一个脑残的假绅士的得到了想要的回答（因为今天任何人都不会拒绝，我才有了这样的底气）。女巫的大裙子拉开了我们的距离，我心中暗想，如果不是有人在，我定将你裙子拿开。她似乎看出了我的焦虑，考了过来扶着我的手臂，我沦陷了（为了让这段文字有趣点，我把我的脸丢的更远）。在拍了无数次烂照片之后的我的室友，我感谢他抓住了这个美好的瞬间。</p><p>写完上面一段文字，我感到有些许的羞耻，看的人当作看个笑话，算是给安某人一个面子了。我先去跑个步，洗去我这羞耻之心，回来再谈后续。</p><p>最近的秃尾巴河可能被我的羞耻、肮脏之心填满了，异常的酸臭，洗了心灵又脏了肺，苦在没有别地可跑，忍受着煎熬。上回书说到合影，合影结束我双手合十虔诚的道了声谢，潇洒的走开，不带一丝留念，虽内心百感交集却也不能耽误大家拍照的时间。合不拢嘴的与室友说着我的花痴，此事告一段落，因为那个迷恋我的男人要来了，王尼玛。</p><p>暴走家族成员，王尼玛、张全蛋、木子、pino、五道杠大队长、赵铁柱、纸巾、富贵上台互动，我是没有被选中的孩子，由于是第二天去的也没有听到金馆长那魔性的笑声，这是比较遗憾的。这可能是我离情怀最近的距离，拿起手机拍了很多照片，签名会也没有抢到名额，只能在看台下神游，但好歹也算见到了啊。这里要实锤一下，王尼玛没有换人，还是那个声音，头套里不仅有丝袜，还有墨镜。希望暴走大事件能够长久的办下去，没有疲惫。</p><p>就这样到了五点左右，初衷已经完成，还有意外的惊喜。临走时，确实有点不舍，哦不，我是说对漫展的不舍。我准备去找那个女巫要微信，虽然不知道有什么用，我还是去了，但是，她不见了，我也准备离开了。回去的路上，甚是遗憾，但某种程度上说，我喜欢这遗憾。人总是喜欢未知的东西，我们对未知的预估总是美好的。未知分两种，一种是无法确定的未知，一种是可确定的未知。我说的是前者。无法确定的未知是指我们无法确定我们将得到什么，甚至无法得到；可确定的未知，是指我们无法确定我们将得到什么，但我们一定会得倒某事物。前者的未知较于后者是我们更加喜欢的，就这件事来说，我对女巫的认识仅限于一张合照，这种未知的感觉是极其美好的，再去了解，去接触，可能就不是自己想象的样子了。多数恋人总怀恋前期的美好，而后期认为对方变了正是这个道理。</p><p>按道理，我应当把这份美好一直留在心里，时不时拿起来回味下。可大道理说了一堆，自己也明白，可我这不听使唤的好奇心啊，找到了她的微博，她的抖音，我真是厉害的不行，哈哈。可找到了又能怎样呢，我这不是为了满足好奇心，扼杀了美好么。</p><p>深刻反思。</p><p>荆轲刺青王</p><hr><p>写于 2018.4.2 23:36</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL-ONLY_FULL_GROUP_BY模式问题</title>
      <link href="/2018/03/29/MySQL-ONLY_FULL_GROUP_BY%E6%A8%A1%E5%BC%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2018/03/29/MySQL-ONLY_FULL_GROUP_BY%E6%A8%A1%E5%BC%8F%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>数据库刷在mysql5.5版本上没有问题，但刷在5.7上之后出了这个问题，导致页面请求出错。</p><a id="more"></a><p>错误信息：</p><pre><code>Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#39;dept.label&#39; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</code></pre><p>问题原因：</p><p>MySQL 5.7.5及以上功能依赖检测功能。默认情况下启用ONLY_FULL_GROUP_BY SQL模式，MySQL将拒绝选择列表，HAVING条件或ORDER BY列表的查询引用在GROUP BY子句中既未命名的非集合列，也不在功能上依赖于它们。（5.7.5之前，MySQL没有检测到功能依赖关系，默认情况下不启用ONLY_FULL_GROUP_BY）。</p><p>解决方案：<br>（关闭ONLY_FULL_GROUP_BY模式）</p><pre><code class="sql">set @@global.sql_mode =&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION&#39;;FLUSH PRIVILEGES;（以前是ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION，可用select @@global.sql_mode查出来）</code></pre><p>我在执行过程中报了错，说没有NO_AUTO_CREATE_USER，于是把这个也给去了，之后页面就正常显示了。</p><pre><code class="sql">set @@global.sql_mode=&#39;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#39;;</code></pre><p>这里作为个人笔记，其他解决办法及介绍可移步：<br><a href="https://blog.csdn.net/MissWwg/article/details/77719085" target="_blank" rel="external">Error Code: 1055. Expression #2 of SELECT list is not in GROUP BY clause and contains nonaggregated</a></p><hr><p>2018.03.29 13:44</p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>这里有一座孤岛</title>
      <link href="/2018/03/25/%E8%BF%99%E9%87%8C%E6%9C%89%E4%B8%80%E5%BA%A7%E5%AD%A4%E5%B2%9B/"/>
      <url>/2018/03/25/%E8%BF%99%E9%87%8C%E6%9C%89%E4%B8%80%E5%BA%A7%E5%AD%A4%E5%B2%9B/</url>
      <content type="html"><![CDATA[<p>我像一座孤岛，四面环水，孤立无援。喜欢热闹，也喜欢安静，可能就是这样一个矛盾的人。</p><a id="more"></a><p>去年三月份来到南京实习，带着心中的目标，想着一切都在变好的道路上前行着，可是后来我把人弄丢了，也差点丢了自己。现在又三月了，一年的时间一切变化的很快，也不知是什么有了变化。 </p><p>开始朋友圈一条动态，“流浪在合肥街头”，我没有关注“流浪”两个字，倒是“合肥”这两个字眼让我感触颇深，于是，就把想到的写在这里。或许不是因为我算半个合肥人而感触远离家乡的悲愁，而是因为在合肥生活的大学四年。 </p><p>至少在大学之前，合肥对我来说也是个陌生的城市，在某种程度上与来南京的陌生并无不同。我来到这两个城市都有着一定的目的性，是为了维持某种关系，说起来有些媚俗，但似乎也是人之常情。如今，这些都不存在，我还在南京。 </p><p>南京相较于合肥那自然是好的，差就差在少了那四年的境遇。倒是有高中好友也在南京，除此好像确实没有任何熟悉的事物，你不能让他把所有的周末都放置在你这里，每个人很多关系需要去维护，人不就一致处在维持关系的状态中。就当是我一个人在这。我喜欢周末出去走走，这是我喜欢热闹的表现，我冲进人群，听到别人的谈话，我走到一些有趣的地方，看不一样的场景，这些听起来都是那么得有意境，我将其放到微博、朋友圈，难免让别人误会。而这恰巧体现出我的孤立无援，渴望获得别人的认可，实话说出来有显的如此低俗。甚至，当我正在进行这些事的时候，连我自己都骗了，当时这些事情完成，静下心来去回想，逛着的三两小时，我竟一句话没有说，如空气一般，飘着飘着，看似与所有人都接触，而没有人能真切感知，何等悲哀。 </p><p>现在住的离公司远了，每天一个多小时的车程，大家都说这人怕是傻了，这不找罪受呢。当你做某个决定时，你一定想好了一万个理由来与朋友说服。在此，我想赋予这个决定形而上的意义。摧残人的不是肉体，而是精神。相较于被孤独这个情感的摧残我更希望是来自“跋涉”这个物理上的摧残。梁文道在《我执》里说到“一旦又较稳当的晚上，才发现自己竟又恢复了独处的生活”，这于就是路程的遥远与加班能让我独处的时间短点，不失为一件乐事。连续几个星期晚上都加班，其中有一两个晚上没有加班，回来竟觉得百般不适，是对工作的痴迷？对加班的痴迷？我可能还没有那么高尚，只是回来太安静了。同事说我有闲情雅致，回来还看看书，我将自己摆在文艺好学的位置表示出对知识的渴望，实则我并不知道我能干嘛，只能借此打发时间，或许解决孤独之外还能获得意外之喜。来回的路程给了看书的更多的时间，在其他物质需求满足不了的情况下，或许能够满足精神需求，抑或第三层次需求。如此看来，我还没啥，该知道的我都知道。 </p><p>如果不幸，独处的时间降临，除了靠这些精神食粮来充实，我还会和朋友打打电话开视屏，这是我维系异地朋友关系的方式，也是我满足自身需求的一种表现。我想我也没找到其他更好的方式，毕业之后或者说工作之时，大家都为生活所迫，又是处在不同的城市，常见已是种奢侈。进来得朋友一决定，颇为钦佩。他离开合肥来到杭州，合肥的工作不喜欢是一个理由，还有个理由是她在杭州，他说他对很多事都后知后觉，现在想去争取一下。冲动么？冲动。对么？个人觉得无法评判。我钦佩的是他想做就去做的态度，我做不到。我劝他大家都是后知后觉的，去杭州自然不会那么顺利，但决定做了自然就无法更改了，那就别谈什么懊悔。关于对错，这事还没玩，你刚做决定怎么知道对错，只有等你为这个决定付出了行动得到了结果你才知道对错，可从另一个方面来看，贯穿于整件事，对错早已没有了意义。如果后来真的要评个对错，那一定得让它是对的，后来觉得是错的，那一定是你没做好，没有给这个决定赋予实际有意义的行动。 </p><p>跟他聊完，我又想抽自己几个嘴巴子。大道理一堆一堆的，说得跟自己是个明白人似的，可实际自己的生活都过不好。我们都处在某个伤愁的境遇，我也好，他也好，其他的朋友也罢，谁都有烦心的事。我似乎与其他人又有些不同，我只能跟另一个我诉说，如同他们跟我诉说一样。也是我自己在作祟，不愿提及这些，我还能在这里发发牢骚，想与他们聊点开心的事，聊些曾经的高中、大学生活，想想都会情不自禁的笑。 </p><p>是啊，多么有趣啊。大学毕业一年了，高中五年了，人也丢失了很多，留下来实属不易，那该是我们的财富。你会感叹时间的迅速，也感叹时间的恐怖，在不同的阶段，不同的时间，人都不一样，此刻写博客的我与写博客之前的我也不一样，你看，变化多快。好在，我们总是在适应这个世界，每个阶段的想法、做法都是为了去让自己活得更好。希望大家都好，至少没有我这样的孤独。 </p><p>牢骚发完，今晚的独处到这里就结束了，接下来想去做个梦，会有很多人在，是能够去接触的，能够被他人感知的，这样或许还能赶上你们还没有过去的今天。 </p><p>明天见。 </p><hr><p>写于 2018.3.25 00:06</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简约至上</title>
      <link href="/2018/03/18/%E7%AE%80%E7%BA%A6%E8%87%B3%E4%B8%8A/"/>
      <url>/2018/03/18/%E7%AE%80%E7%BA%A6%E8%87%B3%E4%B8%8A/</url>
      <content type="html"><![CDATA[<p>追求简单易用是人类的本性。</p><a id="more"></a><p>人们害怕复杂，遇到复杂的事情，如果不是一定要做的，自然没必要纠缠下去，如果你的产品使用起来很复杂，等于设置了很高的门槛，那用户凭什么用你的？ </p><p>用户分三种：专家型用户，随意型用户，主流用户。 </p><p>专家型用户：愿意探索你的产品或服务，并提出各种改进建议。（看来我是专家型用户，从微信读书软件或者邮件都给微信读书团队发过使用体验，还写的很认真，虽然只有邮件收到了回复） </p><p>随意型用户：可能使用过类似的产品，他们有兴趣使用更高级更复杂的产品，但一定不要使全新的。 </p><p>主流用户：不会因为技术而使用你的产品，二是为了完成某项任务。 </p><p>在使用一段时间后，不同类型的用户并不会转变为另一种，即使用了很多年。产品应该满足与主流用户，忽略专家型用户。 </p><h1 id="简约四策略一：删除"><a href="#简约四策略一：删除" class="headerlink" title="简约四策略一：删除"></a>简约四策略一：删除</h1><p>简化设计最明显的方式就是删除不必要的功能。砍掉残缺的功能，如果某功能实现的并不理想就应当删除它，大多数人觉得删除不完整的功能会导致已经付出的时间和努力白白浪费，但实际上这部分功能的成本是不可能收回来的，需要判断的是它能够返回几分作用以及保留它额外导致多少成本，避免陷入“沉没成本误区”。除功能外，对内容也需要做精简，如多此一举的内容提示，冗余的文字等。 </p><h1 id="简约四策略二：组织"><a href="#简约四策略二：组织" class="headerlink" title="简约四策略二：组织"></a>简约四策略二：组织</h1><p>组织往往是简化设计的最快捷的方式。对已有内容进行有效的组织分区，使其成为清晰的层次结构。将各项组织到7加减2个块中，理论上这是人的大脑瞬间能够记住的最大数目。 </p><h1 id="简约四策略三：隐藏"><a href="#简约四策略三：隐藏" class="headerlink" title="简约四策略三：隐藏"></a>简约四策略三：隐藏</h1><p>隐藏适用于不常用但不能少的功能，如个性化设置，高级用法，需要时候的提示等。用户希望每个环节能够像讲故事一样层层展开，顺着故事线自然会跟着一步步地去做，从而完成用户操作。因此，保证用户在前进的过程中能够遇到提示，但不要挡住用户的去路。 </p><h1 id="简约四策略四：转移"><a href="#简约四策略四：转移" class="headerlink" title="简约四策略四：转移"></a>简约四策略四：转移</h1><p>在设备间的转移，将根据设备进行功能分配，将合适的功能放到合适的设备上，投影设备遥控器就能很好的体现，遥控器上只有最基本的按钮，其他操作会放到显示屏上分区展示供用户选择。向用户转移，让用户与计算机各自去做自己最擅长的事（计算机擅长计算，人喜欢控制结果），用户指挥，计算机操作，就会给人简单的感觉。 </p><p>简单会提升用户体验，更用户留下足够的想象空间。 </p><p>书名：《简约至上：交互设计四策略》</p><hr><p>写于 2018.3.18 22:51</p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>上瘾</title>
      <link href="/2018/03/12/%E4%B8%8A%E7%98%BE/"/>
      <url>/2018/03/12/%E4%B8%8A%E7%98%BE/</url>
      <content type="html"><![CDATA[<p>好的产品一定建基与深刻的艺术品味与心理学原理。</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>好的产品一定建基与深刻的艺术品味与心理学原理。</p><p>书中给出上瘾模型（the Hook Model）四个阶段：触发—行动—多变的酬赏—投入。如序言所说，这四个阶段可以对应到心理学中亲密关系的四个阶段，第一步“触发”，可以对应亲密关系中的“相识、吸引”。第二步“行动”，可以对应亲密关系中的“接触、了解”。第三步“多变的酬赏”，可以对应亲密关系中的“惊喜、甜蜜”。第四步“投入”，可以对应亲密关系中的“热恋、维护”。</p><h2 id="1-触发"><a href="#1-触发" class="headerlink" title="1.触发"></a>1.触发</h2><p>触发可促使用户采取行动，分为外部触发和内部处罚。外部触发通过将信息渗透在用户生活的各个方面来引导他们采取下一步行动，如醒目的按钮，朋友的推荐等。内部触发通过用户记忆存储中的各种关联来提醒他们采取下一步行动，如负面情绪等。</p><h2 id="2-行动"><a href="#2-行动" class="headerlink" title="2.行动"></a>2.行动</h2><p>福格行为模型可以用公式来呈现，即B=MAT，B代表行为，M代表动机，A代表能力，T代表触发，想要人们完成特定的行为三者缺一不可。<br>动机：人们的动机不外乎三种，第一种，追求快乐，逃避痛苦；第二种，追求希望，逃避恐惧；第三种，追求认同，逃避排斥。<br>能力：时间、金钱、体力、脑力、社会偏差、非常规性等六个因素会对用户的能力产生影响。<br>触发：请参见第一条。</p><h2 id="3-多变的酬赏"><a href="#3-多变的酬赏" class="headerlink" title="3.多变的酬赏"></a>3.多变的酬赏</h2><p>多变的酬赏因为其多变性、神秘性吸引着用户。这里包含三种类型：社交酬赏，猎物酬赏，自我酬赏。社交酬赏是指人们产品中通过与他人的互动而获取的人际奖励。猎物酬赏是指人们从产品中获得的具体资源或信息。自我酬赏是指人们从产品中体验到的操纵感、成就感和终结感。</p><h2 id="4-投入"><a href="#4-投入" class="headerlink" title="4.投入"></a>4.投入</h2><p>投入阶段主要与用户对未来酬赏的期待有关。用户对产品投入的越多，则会对该产品形成便好。因为我们会往往高估自己的劳动成果，尽力和自己过去的行为保持一致，避免认知失调。你极力去获取的东西，倘若你对其排斥，你将会陷入认知失调，来怀疑自己之前的行为，为了解除这种失调，最简单的方式就是去接受它。用户投入可通过加载下一次触发的方式反复进入上瘾模型循环。</p><h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><p>我为什么前段时间因为抖音没睡好觉。</p><h2 id="1-触发-1"><a href="#1-触发-1" class="headerlink" title="1.触发"></a>1.触发</h2><p>朋友的朋友圈分享，面对面的推荐，自己无聊时间的打发。</p><h2 id="2-行动-1"><a href="#2-行动-1" class="headerlink" title="2.行动"></a>2.行动</h2><p>动机：追求认同、追求快乐<br>能力：有个手机还不能下个软件么（也有时间去看，不过确实耽误了很多时间）</p><h2 id="3-多变的酬赏-1"><a href="#3-多变的酬赏-1" class="headerlink" title="3.多变的酬赏"></a>3.多变的酬赏</h2><p>社交酬赏：我发了几条抖音，收到了些许的赞还有些正面评论，还能看到想看的朋友的抖音<br>猎物酬赏：抖音的查看方式是我在之前没有看过的，不像大多数短视频软件，采用宫格方式展示一部分资源供用户看封面选择查看，采取的上下滑动的方式，每次只看一条，你不知道下一条会是什么，这种神秘性吸引了我，我也更想看到更多的资源。<br>自我酬赏：抖音内的视频在早期走的是技术流，可能也因此其有质量的视频偏多，不像某手，我也去学了些里面的拍摄技巧，最终拍摄成品获得极大的满足感。</p><h2 id="4-投入-1"><a href="#4-投入-1" class="headerlink" title="4.投入"></a>4.投入</h2><p>抖音内容几乎全为UGC，增加了其多变性，另外用户每次发布UGC后，都会不断的再次打开app，查看自己是否获得新的反馈，从而再次进入上瘾模型，我也不例外，也贡献了几条。</p><p>虽然最近理智让我减少了查看抖音的时间，只是偶尔打开看一看，但早期的沦陷也让我反思。最近可能也是因为没有再进行投入，自然也没有新的反馈，能够获得的只是猎物酬赏，在观看了大部分资源之后，多变性也在减少，于是抖音对我的外部触发偏少了，更多的是自己无聊的时候打开刷两条。但在某种程度上，这依然是与部分朋友们的谈资。</p><p>书名：《上瘾：让用户养成使用习惯的四大产品逻辑》</p><hr><p>写于 2018.3.12 23:57</p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>王阳明知行合一</title>
      <link href="/2018/03/09/%E7%8E%8B%E9%98%B3%E6%98%8E%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/"/>
      <url>/2018/03/09/%E7%8E%8B%E9%98%B3%E6%98%8E%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>知是行之始，行是知之成。</p><a id="more"></a><p>1.圣学多为存天理，去人欲。每个人都有欲望，至少落地之后就有生的欲望，那为什么要去人欲呢？这里的人欲为“过”或“不及”，对于像正常的生的欲望，不属于人欲而是天理。在心学里也可以这么理解，良知指引你的就是天理，违背良知的就是人欲。 </p><p>2.心即理，理在心中，但需事上练。心学认为，理在我们心中，我们生下来就心中就有了理，我们不需要像外界获得理，但需要致良知，将埋没在我们心中的理挖掘出来。 </p><p>3.知行合一，知是行之始，行是知之成。在空间上知与行不可分割，在时间上知是行之始，行是知之成。知行合一就是一件事的开始与终结，不可有始无终，二者缺一不可。当你进行某件事时，定是为了满足某种需求，同样，有了做一件事的心，才会去做这件事。 </p><p>4.四句教：无善无恶心之体，有善有恶意之动，至善至恶是良知，为善去恶是格物。 </p><p>心学将良知必做太阳，我们为了应付这个复杂的世界，人欲如同乌云挡灾了太阳面前。我们经常会遇到一些事，脑海里有两个想法，做了可能会有损他人（良知、太阳），不做又损害了自己的利益（人欲、乌云），我们陷入纠结，是接受良知的指引还是满足自己的欲望？心学告诉我们要致良知，遇到乌云就用力拨开。我们可以看到心学上良知是至高无上的，乌云岂能与太阳抗衡！以前都会觉得我们由两个小人组成，一个是善良的，一个是恶毒的，二者打一架，谁赢了听谁的，这个想法的一出现明显将此二人处于平级，这显然是不合适的。 </p><p>心学在伦理关系上可谓是无懈可击，像是我们不用像外界学习就知道孝为先，但抛开伦理关系放于现实生活中就显得有点鸡肋了，像是我要去学编程，我心里知道编程怎么玩么？于是，有了这样一个解释，心这个东西太伟大，可以这么说，用心去学编程，那就自然发现了这个理，我们寻求的是心中用心的理。 </p><p>看到知行合一，首先想到的是言行一致，于是拿起了这本书。本想着可能如其他中国哲学类书似的，说着理论而难以感知，这本书说了王阳明知行合一的四个例子，写的太有趣了，好不严肃，但确实很搞笑啊，例子中举的小例子差点没笑死我（我又想起王阳明早期学理学对着竹子格物的时候- -）。 </p><hr><p>写于 2018.3.9</p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>To Kill A Mockingbird</title>
      <link href="/2018/03/07/%E6%9D%80%E6%AD%BB%E4%B8%80%E5%8F%AA%E7%9F%A5%E6%9B%B4%E9%B8%9F/"/>
      <url>/2018/03/07/%E6%9D%80%E6%AD%BB%E4%B8%80%E5%8F%AA%E7%9F%A5%E6%9B%B4%E9%B8%9F/</url>
      <content type="html"><![CDATA[<p>一本获得1960年普利策文学奖的书，一本55年来美国人说地位仅次于圣经的书。</p><a id="more"></a><p>书中以一个小女孩斯考特的视角描述上世纪30年代美国南部小镇发生的事，或许是因为作者哈珀•李也有一个律师爸爸，或许是因为她的律师爸爸也为黑人打过官司，或许就是描述作者自己小时候，才能写出如此好的著作。<br>我们的世界充满了偏见，哪怕是到现在还没有避免，这可能也是这部作品被称为经典的原因。</p><p>To Kill A Mockingbird旨在揭露美国社会矛盾和批判司法体系，书中黑人汤姆被诬陷强奸一名白人女性阿耶尔，虽然阿帝克斯使用了所有能开释一个自由人的法律手段去拯救汤姆，可还是没能说服陪审团相信汤姆，最终汤姆绝望的逃跑而被警察射杀，种族歧视与司法体系的无能造就了悲剧的发生。正如书中所说，阿耶尔本没有犯罪，只是违反了被致以崇高敬意的社会伦理——勾引一位年轻的黑人男性，可是她为了掩瞒自己的过失而想让汤姆——一个活生生的人消失，这是不可原谅的。知更鸟只唱歌给我们听，什么坏事也不做，汤姆就是一只被种族歧视与司法体系的无能杀死的知更鸟，然而事实上在当时的社会背景下，阿耶尔的父亲BOB也是一只知更鸟，最终他为自己的恶行付出生命，但真正杀死他的是无法摆脱的贫穷和无知。 </p><p>大多数人对书中人物分析的都很透彻了，于是我想找一个不怎么被拉出来的人物，斯考特的姑姑亚历山德拉。亚历山德拉也很好的体现出偏见这个概念，她刻意的体现出自己的家族与别人的不同，带着有色眼镜去看待他人，认为家族背景决定了其他家族一定是什么样的人。如果说偏见是属于情感成分，那在认知成分上表现的就是刻板印象，亚历山德拉将某一家族概括化，没有考虑家族成员之间实际的差异，最终导致了行为成分歧视。偏见是全人类共同的问题，带给我们的伤害是无穷的，心理学上有个概念叫“自证预言”，它指出我们会根据我们的刻板印象而决定我们将如何对待对方，而这种对待方式又会导致那个人的行为与我们最初的预期一致，使得这一预期成为现实，而事实上他可能跟我们想的完全相反，但由于你这样对他，他以牙还牙产生了现在的结局，偏见会影响我们看到的世界。另外，我觉得亚历山德拉也有米兰•昆德拉所说的媚俗，媚俗的人指定一个不能接受的范围，并排斥这个范围的一切，而亚历山德拉的能接受的范围就是她那社会上层的标准，在认同生命存在的前提下盲目的执行着，并且希望她们家族也奉行着她的标准，对斯考特的要求就能够体现。书中说到塞西尔复述他妈妈的话：衔苹果游戏不卫生，会的传染病。当斯考特就此事问了姑姑，亚历山德拉说持这种观点的一般都是社会上想往上爬的人。我想这些都能够体现出媚俗。我们也处在媚俗之中，不可避免，谈论媚俗、拒绝媚俗本身也是媚俗。 </p><p>下面想分享一些书中的我喜欢的句子，挑几个出来吧。</p><p>这送给正在阅读的各位，当然我知道你们肯定很喜欢阅读。</p><blockquote><p>阅读就像一个人的呼吸，即使不喜欢也不能不做。</p></blockquote><p>我还喜欢阿帝克斯的教导，以后也得做个这样的爸爸。 </p><blockquote><p>道理很简单，不能因为我们在此之前已经失败了一百年，就认为我们没有理由去争取胜利。但是在我能和别人过得去之前，我首先要和自己过得去。有一种东西不能遵循从众原则，那就是人的良心。 </p></blockquote><p>卡波尼说的也很有道理，有些话不必说出口，智者不言。 </p><blockquote><p>没有必要把你懂的所有东西都说出来。那很不淑女——再说，人们不喜欢他们身边有人比他们懂得更多。那会让他们很恼火。你说得再正确，也改变不了这些人。除非他们自己想学，否则一点办法也没有。你要么闭上嘴巴，要么就使用他们的语言。 </p></blockquote><p>“醉鬼”雷蒙德在帮助看不惯自己生活方式的人找到一个合适的理由。 </p><blockquote><p>这样的确不诚实，但对人们会有帮助。芬奇小姐，我其实不怎么喝酒，可是你知道吗，他们永远永远也不可能理解：我之所以这样生活，是因为这就是我想要的生活方式。 </p></blockquote><p>阿帝克斯与斯考特的对话告诉我们，我们无法改变他人，但我们能做好我们自己。 </p><blockquote><p>“那么，恨希特勒可以吗？” ,“不可以。”他说，“不应该恨任何人。” </p></blockquote><p>就写到这，推荐一波。  </p><p>看完书还看了下电影，黑白的，两个小时的电影无法将书中所描述的全都展现出来，但看看还是不错的，书的旨意已经表达清楚了，毕竟也是在1963年获得三项好莱坞奖的电影。 </p><hr><p>写于 2018.2.27  </p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>思考与存在</title>
      <link href="/2018/02/16/%E6%80%9D%E8%80%83%E4%B8%8E%E5%AD%98%E5%9C%A8/"/>
      <url>/2018/02/16/%E6%80%9D%E8%80%83%E4%B8%8E%E5%AD%98%E5%9C%A8/</url>
      <content type="html"><![CDATA[<p>我是谁？我从哪来？到哪去？我们对这几个问题似乎很清楚，因为对于特定环境下，这几个问题很好回答；我们又对这几个问题很模糊，我们很难找到答案，因为对于一个体来说，我们为何存在于这个世界，我们的存在对这个世界有什么影响，我们处于这个世界而去思考这个世界，显然有点滑稽了。</p><a id="more"></a><p>亚里斯多德说：“那个自古以来就发问的问题，那个现在仍然要问的问题，那个将来永远要发问的问题，那个是我们永远不得安宁的问题就是：存在是什么？而这也是在问：本体是什么？”。有的时候觉得哲学家们好奇怪，老是去思考这些奇了古怪的问题，有时候又觉得哲学家们好厉害，能够比我们更高一层次去思考问题。如亚里士多德所说，问存在就是在问本体是什么，发现了这个问题，但并没有得到合理的解释，有人说：“认识你自己”，这好像也没有来解释，因为我们如何认识我们自己并没有个明确的答案。直到迪卡尔宣称：“我思故我在“，我比较认可这个结论，思考与存在是一体的，先思考才有存在的意义。</p><p>工作之后知道描述数据的数据是元数据，心理学的分析方法论中所说分析的分析成为元分析，那姑且这里也称思考的思考为元思考，哲学家们干的可能就是元思考的活。这里可以看到我们在数据、分析、思考上面只封装了一层，那是否还能在第二层上面再封装一层呢？思考的思考的思考，元元思考？可能不能了，如同数据、分析一样，当我们对元数据、元分析进行描述分析时，之前的元数据、元分析只能够被称为数据和分析了。刚刚的方向在很多情况下都是如此，在第一层次上我们得出的某个结论，会被高一层次的结论推翻，因此对于这个结论来说只有是或否两个结果，在某一个层次上为是，在更高一层次上则为否。佛教大乘的中道宗提出的“二谛义”可能也是这个意思。“二谛义”认为有普通意义的道理，即“俗谛”；有高级意义的道理，即“真谛”。它进一步认为，不仅有这两种道理，而且都存在于不同的层次上。于是低一层次的真谛，在高一层次就只是俗谛。把书中的例子再举出来：</p><blockquote><p>我们面前的桌子，要表明它正在停止存在，并不需要毁掉它。事实上，它无时无刻不是正在停止其存在。其原因在于，你开始毁桌子，你所想毁的桌子已经停止存在了。此一刻的桌子不再是前一刻的桌子了。桌子只是看着好像前一刻的桌子。</p></blockquote><p>佛曰：不可说。因为我们只能够到达第二层次的真谛，按照佛家此宗，到第三层次否定了第二层次，一切都否定了，包括否定这个“这个否定一切”，自然无法到达第三层次，也就什么都不能说了。这个结论是我能够接受的，我觉得到了第三层次，其实也是真的说不了什么了，我们到达不了。</p><p>个体的思考有着一定的局限性，我们作为旁观者能够去思考我们之外的事物，我们会去评论无关于我们的事，有时能够给出较为理性的解释。但如果我们身处其中，我们的答案可能就不完善了。身处其中往大一点可以说到世界、宇宙，如前文所说，我们就是宇宙的一部分啊，而且我们并不等同于宇宙，还不能称为反思，人类虽是一个个有思想的个体，但放到宇宙的尺度上，等同于无思想，想象一下有一天你的手突然在思考本体是什么的时候，多么滑稽。再往小了说，我们思考我们内在，我们都认为我们思考是我们的大脑，大脑是“我”的一部分，让大脑去思考“我”是什么，也是很滑稽的，也是很恐怖的，因为“我”（个人认为“我”是一种意识形态，并非实体）并非我的大脑，我的大脑所想并不是“我”所想，它并不代表我，那么它打出这些字是为了何种企图，就道不出了，细思极恐（大脑微微一笑：就是要吓死你（大脑近而再笑：说出来就是看不起你（大脑再再笑：给大家开个玩笑…）））。</p><p>声明：以上只是自己在意淫，并不代表正确性。</p><p>伴随着这篇博客的结束，农历年也结束了。在此住大家新年…赚大钱，不说快乐了，快乐太俗了，有钱就快乐（/手动摊手）。</p><hr><p>完结于 2018.2.16 00:05 </p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DNS_PROBE_POSSIBLE问题</title>
      <link href="/2018/02/08/DNS_PROBE_POSSIBLE%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2018/02/08/DNS_PROBE_POSSIBLE%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Windows系统打开网页时显示DNS_PROBE_POSSIBLE错误代码解决办法。<br><a id="more"></a></p><ul><li><p>1.打开cmd</p></li><li><p>2.输入netsh winsock reset命令</p></li><li><p>3.重启电脑  shudown -r</p></li></ul><p>Tips:</p><p>shutdown 命令说明：</p><ul><li><code>-s</code> 关机</li><li><code>-r</code> 重启</li><li><code>-t</code> 时间，后面是数字是你要设置的秒数</li><li><code>-a</code> 取消命令，如果要取消定时命令可以  <code>shutdown -a</code></li></ul>]]></content>
      
      <categories>
          
          <category> 电脑问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序开发遇到的问题</title>
      <link href="/2018/02/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/02/04/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>这篇博客记录学习开发微信小程序时遇到的问题。此次学习开发的是一个功能小程序，提供电影信息模块及文章阅读模块。下面简单说下概况以及开发过程中遇到的问题。在以后开发新的项目时会持续更新，想做点有自己想法的东西。</p><a id="more"></a><h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><h2 id="小程序啊"><a href="#小程序啊" class="headerlink" title="小程序啊"></a>小程序啊</h2><p>截止写这篇博客，此学习项目算是结束了，小程序是个及其容易上手的新东西。如小程序开发者文档中所说：</p><blockquote><p>小程序提供了丰富的基础组件给开发者，开发者可以像搭积木一样，组合各种组件拼合成自己的小程序。</p></blockquote><p>确实如此，我们不需要像开发web页面一样，使用各种标签来实现我们自己的组件，我们只需要想搭积木似的，即可完成基本的页面。当然你得会一点CSS和JS。另外，我们更改页面数据，不再需要像jquery那样先获取dom再去修改，小程序借鉴了AngularJs等数据驱动的框架，页面通过数据驱动再真正实现了MV分离。本来想介绍下小程序一个页面包含哪些文件，每个文件的作用等等，后来发现还不如去看小程序的官方文档，就罢了。</p><p>但个人觉得理解小程序应当就把它当作一个原生的App，只是它的操作系统是微信。如同安卓一样，页面的组件需要配置在xml里面，只是在小程序里面组件的样式(wxss)与组件的定义(wxml)是分离的.同样，安卓程序里面每个页面称为activity，在小程序里面则被称为Page（这个可能更好理解），有页面则肯定需要页面的跳转，安卓使用趋势，小程序则使用路由。当然，小程序还有自己的生命周期，知道的生命周期才知道什么时候该做什么样的事。对比看来，是很好理解的，带着开发原生app的思想用开发web的方法去开发小程序。</p><p>小程序还在成长阶段，它的思想是很好的，如张小龙所说好的程序是用完即走的，那么微信小程序是个好的产品，微信不是。我还喜欢它的slogan,”再小的个体，也有自己的品牌”，这个真是无法抗拒。于是，以今天这个项目作为入门，鉴于思想，一起成长。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>下面说说这个学习项目的概况。电影信息主要展示从豆瓣获取的数据，包含正在热映、即将上映和豆瓣Top250模块，可查看电影的基本信息；文章阅读提供文章列表以及查看详情，由于小程序中没有DOM，因此不能够像web那样可以定义好样式，将标签等信息直接存入数据库，另外小程序虽现在支持web-view，但没有对个人开发者开放，因此也不能够直接跳转到我的博客地址。于是，目前界面渲染的数据，都不是从数据库中获取，是将数据写入某个js中，假装作为本地数据库，所以看到的都是假的，只是实现了页面功能，另外还加了个音乐播放。</p><h1 id="Q-amp-A-and-Tips"><a href="#Q-amp-A-and-Tips" class="headerlink" title="Q&amp;A and Tips"></a>Q&amp;A and Tips</h1><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q1:编写完app.json配置后(页面注册)编译出现脚本错误或者未正确调用 Page()<br>A1:新编写的页面中没有自动生成内容，需要添加Page({})，否则会报错，同样的问题还出现在json文件中，如果json文件为空，应当填入{}，在目前的开发工具中已经会提示哪里错了</p><p>Q2:控制台出现<code>Now you can provide attr &quot;wx:key&quot; for a &quot;wx:for&quot; to improve performance.</code>警告，警告不处理不影响程序运行，但看着就很奇怪<br>A2:在<code>wx:for</code>后面添加<code>wx:key=&quot;key&quot;</code>或<code>wx:for-index=&#39;idx&#39;</code>可消除警告</p><blockquote><p>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。–开发者文档</p></blockquote><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>tip1:标签中若有bool类型，都应该采用数据绑定，如`vertical="{{false}}"`若使用<code>vertical=&quot;false&quot;</code>，小程序仍会解析成true</p><p>tip2:使用`wx:if={{condition}`来控制组件显隐（<code>wx:elif wx:else</code>）</p><p>tips3:小程序中绑定事件使用bind或catch，如<code>catchtap=&#39;onItemTap&#39;</code>，其中bind为冒泡事件，catch为非冒泡事件</p><p>tips4:使用require引入js，需将当前js导出为模块`module.exports = {}`（这个如同AMD）</p><p>tip5:require引入js只能使用相对路径，这个不知后期会不会有更改</p><p>tip6:小程序总是会读取data对象下面的属性值来做数据绑定，这个动作执行是在onLoad事件执行之后发生的</p><p>tip7:像template的传入数据时，在数据前加…(扩展运算符…)可平铺对象，可直接使用对象的属性，而不用那对象进行点，如：`{{item}}`则使用item.title，`{{…item}}`则直接使用title</p><p>tip8:data-xxx 称为自定义属性,必须用data-开头，后面跟自定义名称,在js中获取时，如点击事件则使用<code>event.currentTarget.dataset.data-xxx</code>获取。当data后的自定义名称为驼峰式时，会被全部转换成小写，当采用连字符时将被转换成驼峰式，如：data-postId转换为postid, data-post-id转换为postId</p><p>tip9:小程序缓存的上限最大不能超过10兆</p><p>tip10:点击事件event对象下：target:指的是当前点击的组件，currentTarget指的是事件捕获的组件(处理冒泡事件是很有帮助)</p><p>tip11:使用上滑加载更多应当使用scroll-view，还要给scroll-view一个高度才能触底加载更多，小程序中没有dom，应当采用更新数据模型来渲染页面，将新获得的数据追加到数据模型中进行数据驱动。</p><p>tip12:小程序从版本130400之后下拉刷新和scroll-view不可以同时使用，导致onPullDownRefresh事件函数无法执行的原因是页面里包含一个scroll-view组件。而scroll-view组件和onPullDownRefresh在130400版本里是冲突的。当我们在页面里滑动scroll-view时，只是滑动这个组件，不再可以触发onPullDownRefresh。因此换一种方法，放弃使用scroll-view，MINA在Page里还提供了一个onReachBottom事件，使用这个事件来监听页面上滑到底。将scroll-view组件换成view组件，并去掉了scroll-view组件原有的属性以及绑定事件，在js里提供onReachBottom，方法体与之前绑定的事件相同。<br>但更改后出现一个问题，上滑刷新时没有之前使用scroll-view顺滑，因此个人认为页面没有强下拉刷新需求时，可考虑去除这个功能。</p><p>tip13:input事件bindblur只可监听失焦，bindchange可监听失焦和键盘确定（回车，bindconfirm可监听键盘确定（回车)</p><hr><p>编辑与2018.2.4 17:00 初稿</p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程问题 </tag>
            
            <tag> 学习 </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>出•遇</title>
      <link href="/2018/01/28/%E5%87%BA%E2%80%A2%E9%81%87/"/>
      <url>/2018/01/28/%E5%87%BA%E2%80%A2%E9%81%87/</url>
      <content type="html"><![CDATA[<p>《出•遇》</p><a id="more"></a><p>出，走出去<br>遇，遇见未知<br>这是今天的主题</p><p>冒雪前进<br>自诩为艺术献身<br>是为了遇见艺术<br>还是<br>我不说了<br>我就是这样的虚伪</p><p>雪很大<br>世界很美<br>大家都喜欢雪<br>却也拿着伞格挡<br>我就是这样的虚伪</p><p>我不懂艺术<br>该怎么评价<br>也不敢评价<br>生怕玷污了这幅画<br>我不说话了<br>我就是这样的虚伪</p><p>可能是把艺术看的太高了<br>孰不知<br>我们的生活就是艺术<br>如此触手可及<br>也就不那么虚伪了</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>区块链-BlockChain(完结)</title>
      <link href="/2018/01/27/%E5%8C%BA%E5%9D%97%E9%93%BE-BlockChain/"/>
      <url>/2018/01/27/%E5%8C%BA%E5%9D%97%E9%93%BE-BlockChain/</url>
      <content type="html"><![CDATA[<p>最近大家可能被区块链的推送推的烦了，不只是“区块链”，还有这些名词：“炒币”、“挖矿”、“矿工”、“区块链”、“ICO”等。也许由于之前的勒索病毒的影响太大，使得它将用于其支付的比特币推向了白热化，各大媒体都去谈论比特币是什么，“区块链”技术渐渐从极客圈向大众圈扩散，加上比特币汇率的变化（截至写这篇博客BTC/CNY:86655.16），更让其走进了投资圈。我写这篇博客或许也是在蹭热点，但请往下看。</p><a id="more"></a><h1 id="为什么写这篇博客"><a href="#为什么写这篇博客" class="headerlink" title="为什么写这篇博客"></a>为什么写这篇博客</h1><h2 id="两片有意思的文章"><a href="#两片有意思的文章" class="headerlink" title="两片有意思的文章"></a>两片有意思的文章</h2><p>我想往常一样浏览着文章，看到一个标题《区块链微信》（发布于woshipm.com,作者@A.J.软软熊），看着着实有意思，大概是微信像是一系列账本，再结合区块链技术得到一个不一样的分布式程序，作者还取了个名字BWeChat（BlockChainWeChat,区块链微信）。有趣归有趣，但看不太懂，因为很多专业名词之前都没听过，也不知道为啥区块链微信会有这些东西，这只能去看看区块链是什么才能够明白一点，于是我想着该去了解一些再来看看，理解了肯定更有意思。</p><p>我大概是个猫奴，虽然我没有猫（我一定会有个猫的）。“云养猫”是之前网上为了调侃没有猫却喜欢猫而且还撸不到现实中猫的人，比如说我，这里套用“云”，因为我们这类人喜欢看猫的图片、动画、视频，都是别人的猫。你可能以为我跑题了，不，并没有，我是为了引出我接下来要说的事（知识点，记下）。上文说到的“云养猫”大概属于低层次“云养猫”，来说说区块链养猫吧。也就是看到的第二篇文章《区块链养猫，我们时代的一个不和谐的符号》（发布于woshipm.com,作者@joeycidic）,文中说到这是有Axiom Zen工作室开发的虚拟宠物养成社区游戏，玩家在区块链上买虚拟的猫，互相或者和别的玩家的猫进行繁殖，每只猫有256种基因，基于一定的算法，可以遗传到下一代。基因的组合和传递是不透明的，这吸引的玩家乐此不疲的买猫和生仔。太有趣了！我也要买一个！于是看了下价格，最贵的猫10万美元，均价130美元，我可能不适合这个游戏。文中介绍到这是一个有现金投资和收益的游戏，在用户能持续消费（生小猫）和交易（购买猫）的前提下，区块链猫变成了一种能产生现金流回报的资产。这片文章没过多说区块链的原理，包含哪些东西，而是主要来介绍这个游戏，因此比上一篇文章容易取看懂，这里介绍的多一点（或许是因为是说猫的我没刹住车），其实还有很多内容，这里就不赘述了，文末会放链接。</p><h2 id="一本区块链的书"><a href="#一本区块链的书" class="headerlink" title="一本区块链的书"></a>一本区块链的书</h2><p>想去完整的了解一个东西，得找到合适的渠道。于是找到了《区块链：定义未来金融与经济新格局》（作者：火币网 张健），这是一本深入浅出，科学严谨的区块链专业著作，张健是火币技术副总裁、国内领先的区块链查询及数据服务平台“Qukuai.com”创始人。想从网上找到合适的书籍并不容易，看完这本，还是比较喜欢的，这本书涉及的领域非常宽泛，对于技术的深究还得去多学习，但去了解个大概，这本书是再合适不过了。这篇博客所涉及的区块链介绍及应用大多来自这本书，因此可以看出是对这本书的整理，文末会放上写这篇博客的思维导图。或许我也该把博客名字改成“一文看懂区块链”来博得大家的眼球，这太放肆了，只能算的上名词解释，不敢造次，因为自己还没明白。这篇博客的定位是一篇读书记录、一篇书籍的推荐文、一篇满足自己好奇心的文章。</p><h2 id="微信公众号的推送"><a href="#微信公众号的推送" class="headerlink" title="微信公众号的推送"></a>微信公众号的推送</h2><p>这个模块是有顺序的，先看到有趣的文章，再去了解，最后是接收到关于区块链的公众号推送。乍一看，很想是AI智能推荐，你在看什么，我就给你推送什么（这里只是顺带吐槽）。我确认我使用的是两个不同的软件，不同的账号，二者没有任何关联，另外公众号的推送属于全投放，大多数阅读类公众号为提高阅读量，并不会将消息推送给特定用户群体，而且也不知道我平时干了啥，于是得出结论，是最近区块链过热了（以上说的都是屁话）。刚刚经过一波毫无意义的分析，得出了一个早就显现的结论，我们为作者（安阳）鼓个掌增加其创作的动力，然后作者准备说正文了。微信公众号推送的关于区块链的文章太多了，开始我也看，后来我发现大多就那几个版本，就说什么区块链技术、数字货币的本质，还会配上“一文看懂区块链”，“你真的了解区块链”等等等等的标题（这个上节有提到过，毕竟很多标题党都这么来欺骗无知的少年，我就被套路过不下N次），再尴尬的是好几个公众号（小规模）推送的内容是一样的，以阮一峰系列为主，因此看一两个就够了，别浪费自己时间。当然也不全是，有的知名的公众号还是会出一些分析报告，像是目前国内哪些公司使用区块链以及其应用，这些还是可以的。是真的被推烦了，就怕自己手贱再去点开，于是，我决定自己也要写一篇！然后点我自己的。如果能找到那些公众号的作者我就把他们拉个群然后把我的文章链接发给他，一天发两次，最好还能@全体。（突然扯了好多，我是要介绍区块链的男人啊！罪过罪过）</p><h1 id="区块链和其相关的概念"><a href="#区块链和其相关的概念" class="headerlink" title="区块链和其相关的概念"></a>区块链和其相关的概念</h1><h2 id="区块链的定义"><a href="#区块链的定义" class="headerlink" title="区块链的定义"></a>区块链的定义</h2><p>关于区块链的定义网上有很多了，这里抛几个。</p><blockquote><p>狭义来讲，区块链是一种按照时间顺序将数据区块以顺序相连的方式组合成的一种链式数据结构， 并以密码学方式保证的不可篡改和不可伪造的分布式账本。<br>广义来讲，区块链技术是利用块链式数据结构来验证与存储数据、利用分布式节点共识算法来生成和更新数据、利用密码学的方式保证数据传输和访问的安全、利用由自动化脚本代码组成的智能合约来编程和操作数据的一种全新的分布式基础架构与计算范式。–百度百科</p><p>区块链（这里特指比特币区块链）的本质是一种去中心化的记账系统，而比特币正是这个系统上承载的“以数字形式存在”的货币。 –《区块链：定义未来金融与经济新格局》（以下简称《区块链》）</p></blockquote><p>区块链或者说比特币什么时候出现的呢？这里有一个背景，2008年9月，金融危机在美国爆发并席卷全世界。同年10月31日下午，在一个普通的密码学机构邮件列表中，几百个成员均收到了自称是“中本聪”的人发送的电子邮件。他在邮件里描述了一个全新的，不依赖任何机构、政府，完全网络化的货币体系。一个月后，中本聪放出了比特币系统最原始的版本。</p><h2 id="去中心化、竞争记账、POW"><a href="#去中心化、竞争记账、POW" class="headerlink" title="去中心化、竞争记账、POW"></a>去中心化、竞争记账、POW</h2><p>区块链诞生了，不管从哪里看到的定义，都有一个核心的概念—去中心化。在我们现在的生活中，为了保证所记录的数据是唯一的，比如说账本，因此就导致了记账是一种天然的中心化行为。这样的例子还有很多，我们在办理某个事情的时候，经常需要开一些证明，证明我是我（公安局里证明）、证明我有这么多钱（银行系统），证明婚姻关系（民政局）等等，我们有很多第三方组织或机构来证明我们以及我们所拥有的存在，而这些不过只是数据库里的数据罢了。我们可以看到这些中心化的记录方式有显而易见的弱点：一旦这个中心出现问题，如被篡改、被损坏，整个系统就会面临危机乃至崩溃，到那时我们还存在么？因此我们能不能构建一个不依赖任何中心或者第三方但可靠的系统呢？事实上，这比想象的要复杂的多（以记账为例），账本数据存储要去中心化（所有的参与方都平等地拥有保存账本的能力），记账行为去中心化（参与方平等的拥有记录账务数据的权利）。这就出现了一个悖论，不同节点缺乏信任的前提下数据的一致性难以保证。</p><p>这个看似不可能解决的问题，由区块链解决了。从字面意思，区块链就是由区块组成的链条，《区块链》有一个比喻，如果区块链是一个账本，那么区块就相当于账本中的一页。当前时代负责记账的自然是计算机，每个计算机就是一个节点，每个节点竞争记账（以每个节点的计算能力来竞争记账权的机制），这就是区块链的架构设计。计算能力（算力）只能决定赢得的概率，就像你买多张彩票可以增加获奖的概率，但你不一定会中奖。区块链通过“工作量证明（Proof Of Work,POW）”来实现竞争记账，你完成了该做的工作量（一般是一个人人都可验证的结果），那你就可以记账了。</p><p>在中本聪的设计里引入竞争的同时解决了货币发行的问题，每轮竞争胜出并完成记账的节点会获得系统给予的比特币奖励。比特币生产总量被限制在2100万枚，总量一定，这个像是黄金开采过程，于是被人们称为“挖矿”，干这活的就是“矿工”了。</p><h2 id="共识机制与价值载体"><a href="#共识机制与价值载体" class="headerlink" title="共识机制与价值载体"></a>共识机制与价值载体</h2><p>有那么多的节点，在去中心化的结构中如何保证你的记录被其他所有节点认可呢？这里要说到两个关键，共识机制与价值载体。传统的中心化结构中，系统的共识有中心决定，参与方服从即可。去中心化的结构中，可就没这么简单，比特币区块链通过工作量证明来实现共识机制，大家一起竞争，满足条件即可记账，反之不满足条件的记录是不被大家认可的，这里的条件是大家都认可的结果（目前是采用通过哈希计算的值以多少个0开头，这里只是简单的提一下，肯定没说的这么简单），这样大家就达成了一致（可以看出区块链制造的是信任）。区块链的发展潜力体现在这个系统上所能承载的各种价值形式，说的有点迷糊，其实就是区块链不仅可以记账，对于任何可以用数字定义的资产都可以在区块链上记录，如今我们是信息时代，我们存在的证明大多都是数字了，那么我们就可以以数字形式进行价值存储或转移任何东西。</p><h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><p>智能合约的理念可以追溯到1994年，几乎与互联网同时出现。智能合约就像是一段逻辑代码，类似我们经常写的if…else，当发生什么情况而执行该情况下的代码，这个对我们来说很好理解，好歹是个程序员啊。我们现在会用合同来制定双方该各自遵守的条件，纸质合同也好，电子合同也好，都是需要人来去执行的，如某一方违约，那么按合同上的条款来执行。而智能合约就是把合同以代码的形式搬到区块链上，不需要任何人来监督执行，出现问题会触发条款自动执行，只要先预编好执行代码就行，这个交易智能化的以后一定会产生巨大影响。目前的比特币的脚本语言并不是图灵完备（图灵不完备的语言常常是因为循环或递归受限，无法实现特定的数据结构，可写的程序有限&lt;可以看看网上的介绍&gt;）的，所以在扩展性上比特币区块链所支持的资产定义和交易模式还比较有限，因此，业内有些人开始尝试开发支持图灵完备脚本语言的区块链，其中以太坊（Ethereum，可以自己去查一下，数字货币市值排名第二）就是个典型的例子。</p><h1 id="区块链技术原理"><a href="#区块链技术原理" class="headerlink" title="区块链技术原理"></a>区块链技术原理</h1><h2 id="区块链中的密码学"><a href="#区块链中的密码学" class="headerlink" title="区块链中的密码学"></a>区块链中的密码学</h2><p>在比特币区块链的整个体系中大量使用了公开的加密算法，比如Merkle Tree哈希树算法、椭圆曲线算法、SHA-256哈希算法、对称加密算法以及一些编码算法，如Base58编码、Verlnt编码、DER编码等。</p><p>这里说几个。比特币使用了基于secp256k1椭圆曲线数学的公钥密码学算法，它包含公钥和私钥，交易发出方用私钥进行签名，并将签名与原始数据发送给整个比特币网络，网络中所有节点则用公钥对交易有效性进行验证。签名算法保证了交易是由拥有对应私钥的人所发出的，核心就在于证明数据是签名者发出的、不可抵赖的，不是待签名数据本身的保密性。再说一个SHA-256哈希算法，SHA是安全散列算法（Secure Hash Algorithm）的缩写，是一个密码散列函数家族，由美国国家安全局（NSA）设计，美国国家标准与技术研究院（NIST）发布的，包括SHA-1、SHA-224、SHA-256、SHA-384和SHA-512五种变体，主要用于数字签名标准，其中SHA-256是输出值为256位的哈希算法。</p><h2 id="区块链组成"><a href="#区块链组成" class="headerlink" title="区块链组成"></a>区块链组成</h2><p>区块链数据由地址、交易、区块、网络组成。比特币用地址来表示标识一笔交易的支出方与接收方。交易最终需要被记录到有区块确认并完成的统一的账本上，每一个区块的产生都会被打上时间戳，最终生成的就是交易证明了。可以这么理解，所有的交易记录都是一条数据，也就是交易凭证，你所含有的资产其实也就是一条记录，只是大家都认可。每个独立节点之间又通过比特币网络来建立联系，这样就组成了一个去中心化的、分布式的电子交易记录时间戳服务器系统。</p><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>地址其实是公钥的另一种表现形式，可以理解为公钥的摘要。生生过程如下：</p><ul><li>1.生成椭圆曲线私钥与公钥。</li><li>2.将公钥通过SHA-256哈希算法处理，得到32字节的哈希值。</li><li>3.对于得到的哈希值，通过RIPEMD-160算法来得到20字节的哈希值——Hash160。</li><li>4.把由版本号￼+Hash160组成的21字节数据进行双次SHA-256哈希运算，得到的哈希值的前4字节作为校验和，放置在21字节数据的末尾。</li><li>5.对组成的25字节数组进行Base58编码，就可得到地址。</li></ul><h3 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h3><p>关于交易。中本聪的白皮书里，比特币被定义为一个链式的数字签名串。每一位电子货币的所有者通过这样的方式将它转移给下一位所有者：对前一个交易和下一位所有者的公钥签署一个数字签名，并将这个签名附加在交易的末尾。收款人通过验证签名，就可以验证电子货币的所有者链条。交易的本质是一个包含交易发送方、接收方、资产转移等相关信息的数据结构，其数据结构如下：</p><ul><li>版本（version），这笔交易参照的规则，4字节</li><li>输入数量（IN-counter），交易输入（TxIn）列表的数量，1～9字节</li><li>输入列表，一个或多个交易输入，大小不定</li><li>输出数量（Out-counter），交易输出（TxOut）列表的数量，1～9字节</li><li>输入列表，一个或多个交易输出，大小不定</li><li>锁定时间（Lock time），4字节</li></ul><h3 id="UTXO"><a href="#UTXO" class="headerlink" title="UTXO"></a>UTXO</h3><p>UTXO（Unspent Transaction Outputs）结构。UTXO是未花费的交易输出，这是比特币交易生成及验证的一个核心概念。比特币规定每一笔新交易的输入必须是某笔交易未花费的输出。至此，比特币的交易输入有3种：标准输入、花费挖矿奖励、产生挖矿奖励（上文说到，对于记账成功的节点会获得比特币奖励）。</p><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>脚本是交易里另一个比较重要的技术。每一笔交易的每一项输出，严格意义上讲并不是指向一个地址，而是指向一个脚本。脚本类似于一套规则，它约束着接收方怎样才能花掉这个输出上锁定的资产。目前常用的比特币脚本主要分为两种，一种是普通的P2PKH类型（Pay-to-Public-Key-Hash），即支付给公钥的哈希值是地址，接收方只需要使用地址对应的私钥对该输出进行签名，即可花掉该输出。另一种是P2SH（Pay-to-Script-Hash），支付脚本的哈希值。拿多重签名来举例，它要求该输出要有N把私钥中的M把私钥（M≤N）同时签名才能花掉该资产，它类似于现实生活中需要多把钥匙才能同时打开的保险柜，只是更加灵活。<br>比如在比特币中，P2PKH的脚本规则如下：</p><pre><code>Pubkey script:OP_DUP OP_HASH160 &lt;PubkeyHash&gt; OP_CHECKSIGSignature script:&lt;sig&gt;&lt;pubkey&gt;</code></pre><p>P2SH脚本规则如下：</p><pre><code>Pubkey script:OP_HASH160 &lt;Hash160 (redeemScript) &gt; OP_EQUALSignature script:&lt;sig&gt;[sig][sig...] &lt;redeemScript&gt;</code></pre><p>这个脚本我也不懂，放出来给大家观赏，可以看出P2SH中多重签名的概念，脚本执行很类似于Java执行再JVM中，”VM”来解析指令。脚本的存在，近实现了区块链可编程。但是，比特币区块链的脚本机制相对简单，是非图灵完备的，目前以太坊实现了一个支持图灵完备脚本语言的区块链平台。</p><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>区块结构如下（Merkle Tree基本特点请百度）：</p><ul><li>魔术码：固定值0xD9B4BEF9，4字节</li><li>区块大小：用字节表示该段之后的区块大小，1～9字节</li><li>区块头：包含6个字段，80字节（由4字节的版本、32字节的上一个区块的哈希值、32字节的Merkle Root Hash、4字节的时间戳、4字节的档期难度值、4字节的随机数组成）</li><li>交易数量：交易列表长度，1～9字节</li><li>交易列表：记录到区块的交易信息列表中，大小不定</li></ul><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>比特币网络的相关功能如下：</p><ul><li>1.新交易广播（使用洪水算法Flooding,是时候把大学的课本搬出来了）到全网的节点，每个节点会收到交易消息。</li><li>2.每个（挖矿）节点将新交易收集到节点的内存，并组装成区块。</li><li>3.每个（挖矿）节点都尝试在自己的区块中找到一个具有足够难度的工作量证明。</li><li>4.（挖矿）节点找到一个工作量证明，把有效的区块数据向全网进行广播。</li><li>5.当且仅当包含在该区块中的交易都是有效的，并验证其完成了工作量证明，其他节点才认同该区块的有效性。</li><li>6.其他（挖矿）节点表示接受该区块，并在该区块的末尾制造新的区块以延长整个区块的链条。</li></ul><h2 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h2><p>毕竟是个去中心化的系统，得保证整个P2P网络数据是一样的，还得保证对大家都是公平的，那就得有一套规约，也就是大家都遵守的协议，这里叫共识算法。两大核心：工作量证明与最长链机制。</p><h3 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h3><p>工作量证明（POW）可简单地理解为一份证明，用来确认你做过一定量的工作。说说比特币网了中的POW，如果想生成一个新的区块并写入区块链，则必须解出比特币网络出的工作量证明的迷题。这道题的3个关键要素是工作量证明函数、区块及难度值。其中难度值是用来调控的，就是在不管你有多大的挖矿能力，新区块的产生速率都保持在10分钟一个。计算公式如下：</p><pre><code>新难度值=旧难度值*（过去2016个区块话费时长/20160分钟）</code></pre><p>另外POW需要有一个目标值，极计算公式如下：</p><pre><code>目标值 = 最大目标值/难度值</code></pre><p>其中最大目标值为一个恒定值：0x00000000FFFFFFFFFFFF FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF，目标值的大小与难度值成反比，比特币工作量证明的达成条件就是矿工计算出来的<strong><em>区块哈希值必须小于目标值</em></strong>。</p><p>解题步骤大致如下：</p><ul><li>1.生成coinbase交易，并与其他所有准备打包进区块的交易组成交易列表，通过Merkle Tree算法生成Merkle Root Hash。</li><li>2.把Merkle Root Hash及其他相关字段组装成区块头，将区块头的80字节数据作为工作量证明的输入。</li><li>3.不停地变更区块头中的随机数（即nonce的数值），并对每次变更后的区块头做双重SHA-256运算（即SHA256 （SHA 256（Block_Header））），将结果值哈希反转并与当前网络的目标值对应的十进制字符串做对比，如果小于目标值，则解题成功，工作量证明完成。</li></ul><h3 id="最长链机制"><a href="#最长链机制" class="headerlink" title="最长链机制"></a>最长链机制</h3><p>比特币网络要求所有节点都遵循一个协议（共识），所有保存到本地的区块链必须是被本地节点验证通过的最长链。由于区块链的每个区块必须引用它的前一个区块，所以最长链是最难推翻的。</p><h3 id="算力攻击"><a href="#算力攻击" class="headerlink" title="算力攻击"></a>算力攻击</h3><p>当攻击者拥有的算力超过全网算力的51%时，可以用这些算力来重新计算已经确认过的区块，实现攻击，业内形象的称为51%算力攻击。中本聪在白皮书里做了个数学推算来证明比特币区块链体系的安全性，此计算证明比特币体系在设计上已经大大降低了双重支付（双花）的可能，另外对于51%算力攻击也被证明需要花费较高的攻击成本，而且也由于社区的理性选择，让攻击的成功率很低。（证明流程什么的就不赘述了，也说不好，请移步度娘谷哥）</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>至此，也介绍了比特币区块链的大部分概念，也就说个大概，对每个点说的并不是很全。还有像区块链的应用、侧链技术及其应用、货币、信用什么的就不说了，也说不好，这本书涉及的东西太多，也是刚了解可能思绪还比较乱能力也较差，肚子里有很多话想表达，可真的说也很难一一说全（可能找到了初恋的感觉），还是建议大家去读读这本书然后有自己的认识。现在就觉得，当遇到不懂的就去找本书看，也不用被各种的推送看的一头雾水，你只有去看看更完善的东西，才有自己的理解，一篇文章是看不出啥的。共勉。</p><h1 id="我从区块链中得到了什么"><a href="#我从区块链中得到了什么" class="headerlink" title="我从区块链中得到了什么"></a>我从区块链中得到了什么</h1><p>这部分就写下，我看这本书写下的想法吧。</p><blockquote><p>区块链是一个对人性悲观却非常真诚的协议。</p></blockquote><p>作为一个程序员，我不得不感叹区块链的技术，但我更喜欢的是区块链背后的哲学。区块链背后的思想是很伟大的，接受人性，善也好恶也罢，是对人性的悲观检测，考虑到你可能出现的所有情况，每个人活的都像自己，并不会因为你像自己而对他人造成损失。虽说是去中心化，但也有一套规约，像共识机制，与中心化不同的是我们的行为是对现有制度的屈服（不是来自于个人意志），区块链想做到的是你的决定都是来自你自己理性的判断，你是“自私”的，你会去考虑投入与损失，知道自己该做什么而使自己的利益最大化，是对自由的向往。</p><p>For freedom!!!</p><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>本文脑图地址：<a href="http://naotu.baidu.com/file/453a9b4bbfa8a7485e97188129cb04a2?token=8e15a160ba9e943e" target="_blank" rel="external">《区块链》</a></p><p>相关文章：<br><a href="http://www.woshipm.com/blockchain/887991.html" target="_blank" rel="external">区块链微信：对不起，你言而无信！</a><br><a href="http://www.woshipm.com/blockchain/870294.html" target="_blank" rel="external">区块链养猫，我们时代的一个不和谐的符号</a></p><p>书籍（电子版可在微信读书app搜索）：<br>《区块链：定义未来金融与经济新格局》（作者：火币网 张健）</p><hr><p>2018.01.27 00:36 -  完</p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>地铁</title>
      <link href="/2018/01/27/%E5%9C%B0%E9%93%81/"/>
      <url>/2018/01/27/%E5%9C%B0%E9%93%81/</url>
      <content type="html"><![CDATA[<p>《地铁》</p><a id="more"></a><p>走在去地铁的路上<br>时间充裕<br>总有人时间是赶的<br>他们在奔跑着<br>加速的走着<br>不是怎的<br>我也跑了起来<br>可能<br>我怕 挡了别人的去路<br>也怕 别人挡了我的路 </p><p>地铁上<br>形形色色<br>发呆  沉思  阅读  小憩<br>交谈偏少<br>安静的无奈的等待<br>很慢<br>很快<br>可能与我一般<br>还有很长的路要走<br>我看到周遭的焦虑<br>长时间于地铁上<br>若心态不予调节<br>那定不如我这般惬意 </p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>醒来</title>
      <link href="/2018/01/27/%E9%86%92%E6%9D%A5/"/>
      <url>/2018/01/27/%E9%86%92%E6%9D%A5/</url>
      <content type="html"><![CDATA[<p>《醒来》<br><a id="more"></a></p><p>我在这醒来<br>看着周围漆黑一片<br>可能是深渊<br>或者是<br>我的境遇</p><p>我用尽力气<br>睁大眼睛<br>可光<br>藏掩的厉害<br>唤不起她</p><p>我感到绝望<br>但我不能停下</p><p>我试着行走<br>摸索<br>终于触碰到了温暖<br>是这片黑暗给予的温存<br>我尝试抱起它<br>无果</p><p>我想<br>我带不走它<br>带走的<br>是它给的信念</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017书单</title>
      <link href="/2017/12/30/2017%E4%B9%A6%E5%8D%95/"/>
      <url>/2017/12/30/2017%E4%B9%A6%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>2017即将结束，总得做点什么，今天去看看电影版的《解忧杂货铺》（东野圭吾著），给东叔一份尊敬，也给自己一个总结，这是我看的第二本书。</p><a id="more"></a><h1 id="一个偶然"><a href="#一个偶然" class="headerlink" title="一个偶然"></a>一个偶然</h1><p>那时住油坊桥，周末常有小贩摆摊于地铁口，卖些盗版书或小商品。周六下班早，于是在此逗留片刻想淘本有趣的书装一下文化，无奈并不止其内容，也未曾看过&gt;书评，自然不知道哪本该是有趣的。现在想想一本陌生的书对于小白来书，有趣的名字，好看的封面该是他选择的理由，于是，我选择了《皮囊》（蔡崇达著），&gt;因为名字。</p><p>时常在想，我们用来思考的主体是大脑，那我是我的大脑么？我们会去说我想，但不会说大脑想，用我来证明是我在想。再者，我们可能会去说我的大脑在思考，&gt;这种说法该是认为大脑是我的一部分，进而认为大脑不是本我，但是当你在有这个想法的时候，正是大脑在操控着，现在说说到底是谁在想？好了，不在想了，在&gt;想脑袋会炸的，大脑说：其实是我不让你想，想明白咱们就脱离了。或许，就做个皮囊吧，成全大脑的阴谋。</p><p>以上是我看到皮囊两个字的意淫，也不是搞哲学的，就不难为自己。我“强迫”自己看完皮囊，倒不是这本书不好看，是我得改变我晕书的毛病，现在好似做到了。《皮囊》里有个句子很喜欢送给大家：</p><blockquote><p>能真实地抵达这个世界的，能确切地抵达梦想的，不是不顾一切投入想象的狂热，而是务实、谦卑的，甚至你自己都看不起的可怜和隐忍。</p></blockquote><p>看完解忧杂货店电影回来继续写这篇博客。大多数情况下，电影很难去还原原著，这是由于我们看书时根据书中的描述而想象出该有的情景，那么电影可以说是别人的理解放到荧幕展现给你，因此稍有与自己想象不同的情景都是难以接受的，后而去抨击电影摧毁了原著。当然，每个人都有自己对原著的理解这无可厚非，就今天的电影而言，对我来说虽有出处，但好在影片中主要的故事情节都有描述，有泪点也有笑点，觉得将这本书想要表达的内容都表达了，该有的都解释到了，这已经很不错了，我也不太喜欢去谈论演员的演技，情节在能够引起观众的共鸣，这些倒不是很重要。所以，还是推荐给大家，可以一看。</p><p>《解忧杂货铺》这是我看的第二本书，如果说《皮囊》是改变习惯，那这本是真的吸引到我了，让我有了更像看下去的信念，于是又读了东野圭吾的好几本书，后来觉得读书是颇有乐趣的一件事。到现在也看了不少，就把书单写下。</p><h1 id="2017书单"><a href="#2017书单" class="headerlink" title="2017书单"></a>2017书单</h1><h2 id="1-《皮囊》–蔡崇达"><a href="#1-《皮囊》–蔡崇达" class="headerlink" title="1.《皮囊》–蔡崇达"></a>1.《皮囊》–蔡崇达</h2><p>我的第一本书，被名字所吸引，一部有着小说阅读质感的散文集。</p><h2 id="2-《解忧杂货店》–东野圭吾"><a href="#2-《解忧杂货店》–东野圭吾" class="headerlink" title="2.《解忧杂货店》–东野圭吾"></a>2.《解忧杂货店》–东野圭吾</h2><p>前来咨询的人，每个人心中都有了答案，重要的是自己想积极认真的生活。</p><h2 id="3-《追风筝的人》–卡勒德•胡赛尼"><a href="#3-《追风筝的人》–卡勒德•胡赛尼" class="headerlink" title="3.《追风筝的人》–卡勒德•胡赛尼"></a>3.《追风筝的人》–卡勒德•胡赛尼</h2><p>“为你，千千万万遍”。</p><h2 id="4-《嫌疑人X的献身》-–东野圭吾"><a href="#4-《嫌疑人X的献身》-–东野圭吾" class="headerlink" title="4.《嫌疑人X的献身》 –东野圭吾"></a>4.《嫌疑人X的献身》 –东野圭吾</h2><p>推理小说，前有柯南后有东野圭吾，哈哈。</p><h2 id="5-《岛上书店》-–加布瑞埃拉泽文"><a href="#5-《岛上书店》-–加布瑞埃拉泽文" class="headerlink" title="5.《岛上书店》 –加布瑞埃拉泽文"></a>5.《岛上书店》 –加布瑞埃拉泽文</h2><p>我们读书而后知道自己并不孤独。</p><h2 id="6-《我们仨》-–杨绛"><a href="#6-《我们仨》-–杨绛" class="headerlink" title="6.《我们仨》 –杨绛"></a>6.《我们仨》 –杨绛</h2><p>爱是生活的点滴。生离固然痛苦，可死别才是不见啊。</p><h2 id="7-《无声告白》-–伍绮诗"><a href="#7-《无声告白》-–伍绮诗" class="headerlink" title="7.《无声告白》 –伍绮诗"></a>7.《无声告白》 –伍绮诗</h2><p>我们终此一生，就是摆脱他人的期待，找到真正的自己。</p><h2 id="8-《乖，摸摸头》-–大冰"><a href="#8-《乖，摸摸头》-–大冰" class="headerlink" title="8.《乖，摸摸头》 –大冰"></a>8.《乖，摸摸头》 –大冰</h2><p>发生在大冰身边的真实故事，我们喜欢看故事，然后想到自己。</p><h2 id="9-《阿弥陀佛么么哒》-–大冰"><a href="#9-《阿弥陀佛么么哒》-–大冰" class="headerlink" title="9.《阿弥陀佛么么哒》 –大冰"></a>9.《阿弥陀佛么么哒》 –大冰</h2><p>同上，看完之后及其向往自由。。。</p><h2 id="10-《白夜行》-–东野圭吾"><a href="#10-《白夜行》-–东野圭吾" class="headerlink" title="10.《白夜行》 –东野圭吾"></a>10.《白夜行》 –东野圭吾</h2><p>推理。不必提醒你还只是个孩子。</p><h2 id="11-《人人都是产品经理》-–苏杰"><a href="#11-《人人都是产品经理》-–苏杰" class="headerlink" title="11.《人人都是产品经理》 –苏杰"></a>11.《人人都是产品经理》 –苏杰</h2><p>算是影响很大的书，对于没有学习软件工程的我，帮助我去理解公司的一些东西，告诉我该怎么做。博客名就是模仿苏杰的。。。</p><h2 id="12-《这么慢，那么美》-–罗敷"><a href="#12-《这么慢，那么美》-–罗敷" class="headerlink" title="12.《这么慢，那么美》 –罗敷"></a>12.《这么慢，那么美》 –罗敷</h2><p>一本介绍北欧的书，一定要去一次！</p><h2 id="13-《逻辑思维：迷茫时代的明白人》-–罗振宇"><a href="#13-《逻辑思维：迷茫时代的明白人》-–罗振宇" class="headerlink" title="13.《逻辑思维：迷茫时代的明白人》 –罗振宇"></a>13.《逻辑思维：迷茫时代的明白人》 –罗振宇</h2><p>上次说的卖焦虑的那个家伙，哈哈，但确实有很多观点，有经济也有历史，还算有趣。</p><h2 id="14-《逻辑思维：中国为什么有前途》–罗振宇"><a href="#14-《逻辑思维：中国为什么有前途》–罗振宇" class="headerlink" title="14.《逻辑思维：中国为什么有前途》–罗振宇"></a>14.《逻辑思维：中国为什么有前途》–罗振宇</h2><p>分析历史，证明未来。</p><h2 id="15-《一本书看懂经济学》-–庆裕"><a href="#15-《一本书看懂经济学》-–庆裕" class="headerlink" title="15.《一本书看懂经济学》 –庆裕"></a>15.《一本书看懂经济学》 –庆裕</h2><p>科普类读物。有很多与生活贴切的例子，与社会心理学有交叉，就觉得这些都一样。博弈论、囚徒困境不就是心理战么- -，还有《三体》中的猜疑链，社会学也一样。</p><h2 id="16-《人生十讲》-–季羡林"><a href="#16-《人生十讲》-–季羡林" class="headerlink" title="16.《人生十讲》 –季羡林"></a>16.《人生十讲》 –季羡林</h2><p>人吃饭时为了活着，但活着绝不是为了吃饭。</p><h2 id="17-《飞鸟集》-–泰戈尔"><a href="#17-《飞鸟集》-–泰戈尔" class="headerlink" title="17.《飞鸟集》 –泰戈尔"></a>17.《飞鸟集》 –泰戈尔</h2><p>诗集类，花花草草木木，清新风，双语读的，道行太浅，体会不深。</p><h2 id="18-《神探伽利略》-–东野圭吾"><a href="#18-《神探伽利略》-–东野圭吾" class="headerlink" title="18.《神探伽利略》 –东野圭吾"></a>18.《神探伽利略》 –东野圭吾</h2><p>5个推理小故事，东叔比较爱物理。</p><h2 id="19-《当我们在谈论爱情时我们在谈论什么》-–雷蒙德•卡佛"><a href="#19-《当我们在谈论爱情时我们在谈论什么》-–雷蒙德•卡佛" class="headerlink" title="19.《当我们在谈论爱情时我们在谈论什么》 –雷蒙德•卡佛"></a>19.《当我们在谈论爱情时我们在谈论什么》 –雷蒙德•卡佛</h2><p>描述的并不是优美的爱情故事，而是将不好的全部展示出来，结局留白的写作手法吸引了很多人的喜爱。最重要的观点，你并不知道自己在谈论什么。</p><h2 id="20-《活出生命的意义》-–维克多•弗兰克尔"><a href="#20-《活出生命的意义》-–维克多•弗兰克尔" class="headerlink" title="20.《活出生命的意义》 –维克多•弗兰克尔"></a>20.《活出生命的意义》 –维克多•弗兰克尔</h2><p>心理学书籍，作者从集中营出来后写的，被压迫的过去需要调节，提出的“意义疗法”很适用。</p><h2 id="21-《愿你迷路到我身旁》-–蕊希"><a href="#21-《愿你迷路到我身旁》-–蕊希" class="headerlink" title="21.《愿你迷路到我身旁》 –蕊希"></a>21.《愿你迷路到我身旁》 –蕊希</h2><p>微信读书送的，情情爱爱什么的，也硬着头皮看完了，大家还是别看了。</p><h2 id="22-《我这一生都比别人跑得慢》-–东土大唐"><a href="#22-《我这一生都比别人跑得慢》-–东土大唐" class="headerlink" title="22.《我这一生都比别人跑得慢》 –东土大唐"></a>22.《我这一生都比别人跑得慢》 –东土大唐</h2><p>左手编程，右手文学。榜样啊，84篇，来自于生活，很有趣。</p><h2 id="23-《周鸿祎自述：我的互联网方法论》-–周鸿祎"><a href="#23-《周鸿祎自述：我的互联网方法论》-–周鸿祎" class="headerlink" title="23.《周鸿祎自述：我的互联网方法论》 –周鸿祎"></a>23.《周鸿祎自述：我的互联网方法论》 –周鸿祎</h2><p>科技大佬都在出书，周老板这本该叫我的360成功之路，当然某些观点还是适用的。</p><h2 id="24-《湖畔》-–东野圭吾"><a href="#24-《湖畔》-–东野圭吾" class="headerlink" title="24.《湖畔》 –东野圭吾"></a>24.《湖畔》 –东野圭吾</h2><p>推理之下是对现实的拷问，父母为了孩子逾越道德的界线。</p><h2 id="25-《哥伦比亚的倒影》-–木心"><a href="#25-《哥伦比亚的倒影》-–木心" class="headerlink" title="25.《哥伦比亚的倒影》 –木心"></a>25.《哥伦比亚的倒影》 –木心</h2><p>读木心深知自己不足，语言简约意味深长。</p><h2 id="26-《道德经》-–老子"><a href="#26-《道德经》-–老子" class="headerlink" title="26.《道德经》 –老子"></a>26.《道德经》 –老子</h2><p>第三遍，也手抄了一些，真的是博大精深，得慢慢体会。道无为而无所不为。</p><h2 id="27-《马云：未来以来》-–阿里巴巴集团"><a href="#27-《马云：未来以来》-–阿里巴巴集团" class="headerlink" title="27.《马云：未来以来》 –阿里巴巴集团"></a>27.《马云：未来以来》 –阿里巴巴集团</h2><p>是马爸爸的演讲，主要就是几个观点，企业要考虑为社会做什么，企业要考虑未来的事等等。</p><h2 id="28-《从0到1-开启商业与未来的秘密》-–蒂尔•马斯特斯"><a href="#28-《从0到1-开启商业与未来的秘密》-–蒂尔•马斯特斯" class="headerlink" title="28.《从0到1:开启商业与未来的秘密》 –蒂尔•马斯特斯"></a>28.《从0到1:开启商业与未来的秘密》 –蒂尔•马斯特斯</h2><p>科技大佬热议之书来自paypel黑帮之首。阐述了自己的创业历程与心得，找到自己的利基市场。</p><h2 id="29-《三体》（全集）-–刘慈欣"><a href="#29-《三体》（全集）-–刘慈欣" class="headerlink" title="29.《三体》（全集） –刘慈欣"></a>29.《三体》（全集） –刘慈欣</h2><p>包含地球往事、黑暗森林和死神永生三册。推荐了很多次，提出宇宙社会学的概念，将一切放到宇宙的尺度去衡量，阐述文明的历程，实为震撼。</p><h2 id="30-《咖啡原来是这样的啊》-–童铃"><a href="#30-《咖啡原来是这样的啊》-–童铃" class="headerlink" title="30.《咖啡原来是这样的啊》 –童铃"></a>30.《咖啡原来是这样的啊》 –童铃</h2><p>咖啡科普，介绍不同地区的咖啡与文化，有些许装X的韵味，但学习并不是一件坏事，丰富自己的知识体系。</p><h2 id="31-《社会心理学》-–Elliot-Aronson"><a href="#31-《社会心理学》-–Elliot-Aronson" class="headerlink" title="31.《社会心理学》 –Elliot Aronson"></a>31.《社会心理学》 –Elliot Aronson</h2><p>解释社会行为，当我们对我们所处的社会有更理性的认识。</p><h2 id="32-《浮生六记》-–沈复"><a href="#32-《浮生六记》-–沈复" class="headerlink" title="32.《浮生六记》 –沈复"></a>32.《浮生六记》 –沈复</h2><p>自传散文体小说，写给芸的绝美情书，目前仅剩四记，描述了闲情逸致、悲欢离合、人情事态等等，读者能够感受作者的情绪，久久不能平静。</p><p>……还有些没看完的，遗漏的就不一一列举了，能记得的都是觉得不错的</p><p><strong>以下是听书，听书大多听个大概，不太占时间，这里举一些有趣的：</strong></p><h2 id="33-《宇宙的结构》"><a href="#33-《宇宙的结构》" class="headerlink" title="33.《宇宙的结构》"></a>33.《宇宙的结构》</h2><p>听书。我们希望能够有效的解释我们所处的世界，基础物理学解释不了的有量子力学，在解释不了的有弦理论。</p><h2 id="34-《万物起源》"><a href="#34-《万物起源》" class="headerlink" title="34.《万物起源》"></a>34.《万物起源》</h2><p>听书。宇宙来自虚无、生命源于偶遇、文明离不开想象力，意外结论的背后是科学的支撑。</p><h2 id="35-《文明的冲突与世界秩序的重建》"><a href="#35-《文明的冲突与世界秩序的重建》" class="headerlink" title="35.《文明的冲突与世界秩序的重建》"></a>35.《文明的冲突与世界秩序的重建》</h2><p>听书。用“文明”的角度解读世界格局与未来。</p><h2 id="36-《米开朗基罗传》"><a href="#36-《米开朗基罗传》" class="headerlink" title="36.《米开朗基罗传》"></a>36.《米开朗基罗传》</h2><p>艺术家不是拥有天赋就可以练成，还需要付出艰苦的努力甚至生命。</p><h2 id="37-《梵高传》"><a href="#37-《梵高传》" class="headerlink" title="37.《梵高传》"></a>37.《梵高传》</h2><p>用生命描绘自己的艺术和心灵。</p><h2 id="38-《拜占庭帝国》"><a href="#38-《拜占庭帝国》" class="headerlink" title="38.《拜占庭帝国》"></a>38.《拜占庭帝国》</h2><p>拜占庭孕育了欧洲文艺复兴的伟大文明，但最终还是走向了灭亡。</p><h2 id="39-《罗马帝国衰亡史》"><a href="#39-《罗马帝国衰亡史》" class="headerlink" title="39.《罗马帝国衰亡史》"></a>39.《罗马帝国衰亡史》</h2><p>一步步阐述罗马帝国如何走向衰落，具体可看之前的博客。</p><h2 id="40-《乌合之众》"><a href="#40-《乌合之众》" class="headerlink" title="40.《乌合之众》"></a>40.《乌合之众》</h2><p>大众心理学研究，之前有提过。</p><h2 id="41-《怪诞行为学》"><a href="#41-《怪诞行为学》" class="headerlink" title="41.《怪诞行为学》"></a>41.《怪诞行为学》</h2><p>这对学习心理学、行为经济学、研究用户都很有帮助。</p><h2 id="42-《活法》"><a href="#42-《活法》" class="headerlink" title="42.《活法》"></a>42.《活法》</h2><p>稻盛和夫独特的人生哲学，最令人印象深刻的三个观点：一、从简单的原则出发考虑问题；二、设定超出现有能力的高目标；三、努力到连老天爷都出手相助（工作现场有神明）。</p><h2 id="43-《干法》"><a href="#43-《干法》" class="headerlink" title="43.《干法》"></a>43.《干法》</h2><p>稻盛和夫：工作是一种修行，是洗涤灵魂的过程。</p><p>……</p><h1 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h1><p>想看的东西太多，苦于时间不够，恨不得能一口吃了。</p><p>读书就像吃饭，吃完了虽然排了出去，但是正在帮助你成长。只有不断的去学习，丰富自己的知识体系，才能存活于未来。</p><p>最近可能是到了年终，就想写点东西啊。</p><hr><p>2017.12.29 23.53 完</p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>尼尔森十大可用性原则</title>
      <link href="/2017/12/28/%E5%B0%BC%E5%B0%94%E6%A3%AE%E5%8D%81%E5%A4%A7%E5%8F%AF%E7%94%A8%E6%80%A7%E5%8E%9F%E5%88%99/"/>
      <url>/2017/12/28/%E5%B0%BC%E5%B0%94%E6%A3%AE%E5%8D%81%E5%A4%A7%E5%8F%AF%E7%94%A8%E6%80%A7%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p>尼尔森的十大可用性原则是于1995年1月1日发表，来自交互设计的一位web易用性大师——Jakob Nielsen人机交互学博士（Technical University of Denmark in Copenhagen）。<br><a id="more"></a></p><h1 id="一、Visibility-of-system-status-系统可见性原则（状态可见）"><a href="#一、Visibility-of-system-status-系统可见性原则（状态可见）" class="headerlink" title="一、Visibility of system status 系统可见性原则（状态可见）"></a>一、Visibility of system status 系统可见性原则（状态可见）</h1><p>系统应该让用户知道发生了什么，在适当的时间内做出适当的反馈。用户在网页上的任何操作，不论是单击、滚动还是按下键盘，页面应即时给出反馈。“即时”是指，页面响应时间小于用户能忍受的等待时间。</p><p>IDEA：我们在表单中对用户填写的信息进行实时校验；提供数据加载提示、数据加载进度；点击按钮按钮状态改变等等</p><h1 id="二、Match-between-system-and-the-real-world-匹配系统与真实世界（环境贴切）"><a href="#二、Match-between-system-and-the-real-world-匹配系统与真实世界（环境贴切）" class="headerlink" title="二、Match between system and the real world 匹配系统与真实世界（环境贴切）"></a>二、Match between system and the real world 匹配系统与真实世界（环境贴切）</h1><p>系统应该用用户的语言，用词，短语和用户熟悉的概念，而不是系统术语。遵循现实世界的惯例，让信息符合自然思考逻辑。大多数流通的翻译是针对网页的：网页的一切表现和表述，应该尽可能贴近用户所在的环境（年龄、学历、文化、时代背景），而不要使用第二世界的语言。</p><p>IDEA：对于按钮图标我们使用用户一眼就能看出其作用的图标，也就是尽可能的模拟真实世界，对用户反馈的信息使用用户熟悉的表述和名字，如错误提醒等。早前看深泽值人的提出的“无意识设计”，这对可供性设计有很好的阐述。可供性是物体或环境与生物体之间的一种关系，通过刺激的收集，提供给生物体表现出动作的机会。作为一种关系，可供性是动作的可能性，既不是环境也不是生物体单独的性质。当人们与环境发生无意识关联时，是处于最自然的状态的，这会降低用户的学习成本，如看到“垃圾桶”图标自然就知道这是删除类操作等。另外的就是根据用户群体，产生与用户的共鸣，多些情感化的东西，使其更贴近用户的生活，人机关系总是感性大于理性。</p><h1 id="三、User-control-and-freedom用户的控制性和自由度（撤销重作原则）"><a href="#三、User-control-and-freedom用户的控制性和自由度（撤销重作原则）" class="headerlink" title="三、User control and freedom用户的控制性和自由度（撤销重作原则）"></a>三、User control and freedom用户的控制性和自由度（撤销重作原则）</h1><p>用户经常错误地选择系统功能而且需要明确标识离开这个的“出口”，而不需要通过一个扩展的对话框。要支持撤销和重做的功能。大多数流通的翻译是针对网页的：为了避免用户的误用和误击，网页应提供撤销和重做功能。</p><p>IDEA：之前写的笔记系统，添加了回收站功能，用户可去回收站去复原删除的数据，当时的设计思路是对表结构的更改，增加一个标识列区分正常、删除、永久删除三个状态，这确实也是一种方法。后来发现并不是所有系统都具有回收站功能，或者基于已有表结构是难以走这条路的，并且真实的删除操作需要用户去自己去操作才可以，这就不合适了。看过一些不错的网站他们会在用户删除时会有一个小的悬浮框，用户可在短时间内选择撤销，为选择则在框消失后真实删除，我没有去查证他们怎么去实现的，自己想了一个法子。对于网页来说，我们可以去在用户删除的时候做一个悬浮框在其消失时去删除这并不难，但考虑用户如果在提示框消失之前点击了刷新或其他操作导致页面中心加载，那在前端的这个操作可能就失效了，或许可以去监听页面刷新的操作，在操作之前提前执行真实删除就能够达到目的。对于可以修改表结构，用户也希望不用自己收到去清空，我们可以添加标识列，在后台执行定时操作，删除在某一时间范围内的数据，这些只是目前的想法不保证正确性，回头去写个DEMO来测试。</p><h1 id="四、Consistency-and-standards一致性和标准化（一致性原则）"><a href="#四、Consistency-and-standards一致性和标准化（一致性原则）" class="headerlink" title="四、Consistency and standards一致性和标准化（一致性原则）"></a>四、Consistency and standards一致性和标准化（一致性原则）</h1><p>用户不必怀疑是否不同的语言，不同的情景，或者不同的操作产生的结果实际上是同一件事情。遵循平台的惯例。也就是，同一用语、功能、操作保持一致。</p><p>IDEA：这个是极其常见的了，节目风格的一致性，引导用户操作的一致性。</p><h1 id="五、Error-prevention-防错原则"><a href="#五、Error-prevention-防错原则" class="headerlink" title="五、Error prevention 防错原则"></a>五、Error prevention 防错原则</h1><p>比出现错误信息提示更好的是更用心的设计防止这类问题发生。在用户选择动作发生之前，就要防止用户容易混淆或者错误的选择。对于网页来说：通过网页的设计、重组或特别安排，防止用户出错。</p><p>IDEA：经常会说把用户当小白，将用户可能犯的错都考虑到，通过我们的设计使其避免，比如，删除时给出确认提示框，提示框按钮位置的编排，按钮样式的突出，多重防止误操作。</p><h1 id="六、Recognition-rather-than-recall-识别比记忆好（易取原则）"><a href="#六、Recognition-rather-than-recall-识别比记忆好（易取原则）" class="headerlink" title="六、Recognition rather than recall 识别比记忆好（易取原则）"></a>六、Recognition rather than recall 识别比记忆好（易取原则）</h1><p>尽量减少用户对操作目标的记忆负荷，动作和选项都应该是可见的。用户不必记住一个页面到另一个页面的信息。系统的使用说明应该是可见的或者是容易获取的。尽可能减少用户回忆负担，把需要记忆的内容摆上台面。</p><p>IDEA：还是说删除提示，删除提示应当给出必要的提示信息，告诉用户他刚刚做了什么操作，现在需要他确认什么，用户不必去回想刚刚点了啥操作。</p><h1 id="七、Flexibility-and-efficiency-of-use使用的灵活高效（灵活高效原则）"><a href="#七、Flexibility-and-efficiency-of-use使用的灵活高效（灵活高效原则）" class="headerlink" title="七、Flexibility and efficiency of use使用的灵活高效（灵活高效原则）"></a>七、Flexibility and efficiency of use使用的灵活高效（灵活高效原则）</h1><p>中级用户的数量远高于初级和高级用户数。为大多数用户设计，不要低估，也不可轻视，保持灵活高效。</p><p>IDEA：对于一些博客网站，提供Markdown编辑器，一般用户只需记住语法就可以写作，我觉得这是属于中级用户的，但也提供XHTML语言以及富文本编辑器，这样就满足了不同层次用户的需求，为大多数用户设计，兼容少部分特殊用户，如果只有Markdown，那用户会流失很多。</p><h1 id="八、Aesthetic-and-minimalist-design-审美和简约的设计（易扫原则）"><a href="#八、Aesthetic-and-minimalist-design-审美和简约的设计（易扫原则）" class="headerlink" title="八、Aesthetic and minimalist design 审美和简约的设计（易扫原则）"></a>八、Aesthetic and minimalist design 审美和简约的设计（易扫原则）</h1><p>对话中不应该包含无关紧要的信息。在段落中每增加一个单位的重要信息，就意味着要减少相应的弱化一些其他信息。互联网用户浏览网页的动作不是读，不是看，而是扫。易扫，意味着突出重点，弱化和剔除无关信息。</p><p>IDEA：看过一个广告行业的研究：人类的平均注意力时长从2000年的12秒下将到现在为8妙。这是个快节奏的时代，适应这些变化自然要做些改变，突出有用的内容，用户可快速捕获到重点信息，另外对于用户不关心的，我们能够帮用户完成的就不劳烦他大驾了，给个间断的提示就行。</p><h1 id="九、Help-users-recognize-diagnose-and-recover-from-errors-帮助用户识别，诊断，并从错误中恢复（容错原则）"><a href="#九、Help-users-recognize-diagnose-and-recover-from-errors-帮助用户识别，诊断，并从错误中恢复（容错原则）" class="headerlink" title="九、Help users recognize, diagnose, and recover from errors 帮助用户识别，诊断，并从错误中恢复（容错原则）"></a>九、Help users recognize, diagnose, and recover from errors 帮助用户识别，诊断，并从错误中恢复（容错原则）</h1><p>错误信息应该用语言表达（不要用代码），较准确地反应问题所在，并且提出一个建设性的解决方案。大多数流通的翻译是针对网页的：帮助用户从错误中恢复，将损失降到最低。如果无法自动挽回，则提供详尽的说明文字和指导方向，而非代码，比如404。</p><p>IDEA：当页面发生错误时，不提供报错信息，采用友好的故障界面，并提供用户能够明白的说明，告诉用户现在可以做什么，如回到首页，返回上一步等。我们的系统对404页面确实做了调整。</p><h1 id="十、Help-and-documentation-帮助文档（人性化帮助原则）"><a href="#十、Help-and-documentation-帮助文档（人性化帮助原则）" class="headerlink" title="十、Help and documentation  帮助文档（人性化帮助原则）"></a>十、Help and documentation  帮助文档（人性化帮助原则）</h1><p>如果系统不使用文档是最好的，但是有必要提供帮助和文档。任何信息应容易去搜索，专注于用户的任务，列出具体的步骤来进行。帮助性提示最好的方式是：1、无需提示；2、一次性提示；3、常驻提示；4；帮助文档。</p><p>IDEA：上文说到一个好的系统应当是无意识设计，是具备可供性的，但有时确实有必要提供一些提示帮助用户去理解。我们的系统中有一个工具模块，目前还是一个页面里面的嵌入功能，这个模块用户的学习成本较高，想达到想要的效果确实有难度，用户在使用时定会不知所措，未来缓解这部分的尴尬，目前采取常驻提示作为临时处理方案，用户可查看当前工具可以做什么，可以去进行哪些操作、如何操作。对于系统层面，部门对未使用过我们系统的人提供帮助文档。其他方面如表单填写是使用placeholder或其他的提示信息对用户容易产生困惑的敏感信息进行提醒。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>牢记这些可用性原则，在实现功能是在尽可能的情况下去遵循这些原则，任务时间充裕的情况下根据系统实际情况调整并执行，对旧模块进行微调。同样，在代码层面规范代码，参考阿里巴巴规约，优化逻辑，提高响应。</p><p><hr></p><p>2017.12.28 23:46完</p>]]></content>
      
      <categories>
          
          <category> 产品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>公司这个团体</title>
      <link href="/2017/12/26/%E5%85%AC%E5%8F%B8%E8%BF%99%E4%B8%AA%E5%9B%A2%E4%BD%93/"/>
      <url>/2017/12/26/%E5%85%AC%E5%8F%B8%E8%BF%99%E4%B8%AA%E5%9B%A2%E4%BD%93/</url>
      <content type="html"><![CDATA[<p>企业招人与用人方面该是怎么样的？作为公司团体中的一员确实很想了解清楚。这个高度有点高了，我们常说我们部门的人是服务员，服务于公司其他各个部门，那么，我算的上是一个底层服务员。作为底层服务员去大谈公司团体的科学方法论可能确实有点滑稽，但也是想记下现在的想法、推论，在以后学习更多的东西来回首去证明之，抑或是推翻之。<br><a id="more"></a></p><h1 id="招人的门槛"><a href="#招人的门槛" class="headerlink" title="招人的门槛"></a>招人的门槛</h1><p>大多数公司招人喜欢985、211等名校毕业的，这有它的道理。对于公司来说，应届生没有经验，实践能力也不能很快就看出来，那么你来自一个好学校就是对你之前20多年的一份满意的答卷，至少从这可以看出你算是优秀的，这对以后的你来说也是一个很好的根基。学校分三六九等，不同学校的教学质量，学生素质自然有所差别。这句话颇很正确，也有以偏概全之意，学生作为学校群体中的一员，易被去个体化而迷失在人群中，但个体的人格特征也有不可被同化的一部分，这也是值得欣赏的一部分。</p><p>公司的可持续发展离不开人才的引进与培养。来自差学校的是否属于人才？来自好学校的是否属于人才？这些都不敢说，总有些独特的人做着独特的事，因为群体效应形成刻板印象而一棍子打死，这并不智慧。被招进来的人在公司留下的时间由什么来决定？我们从社会心理学中团体认同感及认知失调这两个方面可以去分析。</p><p>在公司停留的时间取决于进入公司的难易程度以及后期公司文化是否给予个体团体认同。大多数情况下，来自于名牌大学学生比来自于其他学校的学生更容易进入一家公司（方法论中的变量只是来自不同的学校，假定在个人能力、公司的规模等其他因素保持一致，否则可能不成立），这种情况出现的比较多，也借此来说明这个问题。有人在的地方就会有抱怨，人们似乎总是认为生活让其饱受摧残。在公司也一样，总有人抱怨公司的种种不满，有不满而离去的，也有不满而继续待下的，前者多为容易进入公司的那批人，后者则是较难的那批。容易进入公司的，对自我有着特别的认同感，也相对自信，认为下一份也该是轻易获得，而对于现在的公司的不满易被放大；较难进入公司的，也会遇到对公司的不满，此类对于公司的不满习惯放小，大多在接受范围之内。工作对于个体来说是得到的东西，不管好与不好，若是你艰难得到的自然会加倍珍惜，是人性也是害怕认知失调。人们也习惯用让自己更容易接受的解释来缓解自己的认知失调，你那么拼命的拿到，如今又不喜欢，对于我们是很难接受的，我们回去寻找有利的信息为我们的决定做支撑，“可能在这一块公司有着不当的地方，但其他地方还不错啊”，这样的想法促使人们去接受而让自身变的轻松。</p><p>对于愿意留下的部分，若留下更长的时间是由于公司文化、价值观与其自身价值观得以契合，自身价值在整个团体中得以体现而留存。面试中，多会考虑被面试者是否认同公司的文化，因此会去问被面试者的价值观，这可能也是出于这方面的考虑，另外，对于已有工作经验的人，会去考虑其离职原因、曾在职时长，可见对于未来员工留存于公司的时间公司是比较在意的。但就校招而言，对于进入公司的难易程度似乎考虑欠缺。</p><p>马云爸爸说清华大学的应该以欣赏的阳光去看待杭州师范大学的学生，杭师大的学生也应当以欣赏的眼光看待自身。对此，我更愿意看成这两所大学是前文提到的两种大学的代表，因此我深信不疑。再来说公司招人，应当给予第二类学校一定的机会，不管对于两类大学的任何一类，其进入公司的难易程度应当保持一致，在几轮面试中进行筛选，不丢失好学校的差生，也不丢失差学校的优生，也能更加明确的pass掉不需要的员工，从而使得来自好学校的学生对公司的认同，来自差学校的学生对公司更加用户，方能就留，为公司创造更多的利益。运用好心理战或许对这些很有帮助。</p><h1 id="团体效应"><a href="#团体效应" class="headerlink" title="团体效应"></a>团体效应</h1><p>团体或群体是社会学、社会心理学一个重要的研究方向，个体组成团体，一个个小团体组成现在我们见到的社会，社会上几乎所有的活动都是团体活动，《乌合之众》这本书对大众心理学有很好的描述，可以帮助我们了解很多社会活动，从某种程度上说，“人以群分”不算是一个完全的贬义词，描述的正是事实。</p><p>团体在公司也很有体现，据社会心理学的解释，团体是两个或两个以上彼此互动、彼此依赖的人，他们的学校和目标使得他们相互影响。那么，公司毫无疑问是团体，我们是为了共同目的而聚集在一起的人。既然是团体，有哪些可以用的上的心理学知识？</p><p>他人在场。他人在场时是否会影响你的行为？他人在场一般分为两种情况，一是其他人跟自己做同一件事，二是其他人只是观察你做事而自己并不做。他人在场是否会促进我们的工作效率呢，这想必很多人都会关心。会，也不会。这得分两种情况：简单任务与复杂任务。想象一下，让你做一件简单的事，对你而言做这件事就像是第二本能，熟悉的不能再熟悉，相必你能够快而好的完成这件事，有效率也有质量（你急与想表现自己），倘若这件事较为复杂或者是让你学习新知识，你该开始担心的，你担心领导会不会给你较坏的评价，这会让你在这项任务上表现更差。人们总是对其他人如何评价自己非常关系。</p><p>对于管理者来说，当要求你的员工完成一些相当简单的任务时，给他增加点评价焦虑不是一件坏事，这能够提供工作效率，但如果其个人努力得不到评估，就不能让其和别人做同一件事，这会引起他的懈怠；对于复杂任务，你则需要降低其评价焦虑，可将其编排在团体内，个人的表现不会得到评价，这里也叫责任分担，效绩可能会更好。</p><p>人们乐于去表现自己，而不愿意得到坏的评价。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果公司的价值观、现状、人事都与预期的差不太多，并没有与自身的愿景背道而驰，就该去学习，也愿意待的时间更长一点，现在需要的还是积累，现在常谈的是佛系90后，这种调侃也是人们想借助此来消除当前所处的焦虑，担心的并非是脱发、恐老，而是是否能如佛学思想般静心，若能静心，自然没什么好担心。</p><p>圣诞快乐。</p><p><hr></p><p>2017.12.25 23:55完</p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 愚见 </tag>
            
            <tag> 心理学 </tag>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL存储过程</title>
      <link href="/2017/12/23/MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
      <url>/2017/12/23/MySQL%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>有这样一个需求，从A表中查询出结果，作为B表插入的查询条件，之后循环查询并插入。从网上看了些解决方案，这里写了一个存储过程的DEMO。<br><a id="more"></a></p><pre><code class="sql">DROP PROCEDURE IF EXISTS SELECT_4_INSERT;-- 若存在此存储过程先删除DELIMITER $$ -- 定义结束符 避免与存储过程中“;”冲突 语句到&quot;$$&quot;才算结束CREATE PROCEDURE SELECT_4_INSERT() -- 创建存储过程BEGIN-- 定义结束标识 用于判断是否结束循环 也可以用FALSE，MYSQL认为非0为TRUEDECLARE DONE INT DEFAULT 0;  -- 用于存储结果集的记录 这里的记录只有一列 多列需要定义多个 VARCHAR需指定长度DECLARE STYPE VARCHAR(128);  -- 定义游标 使用游标进行遍历DECLARE STYPE_CURSOR CURSOR FOR SELECT DATA_TYPE FROM BASE_STYPE_INFO WHERE ID &gt; 1000000;-- 定义 结束标识DONE何时改变DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = 1; -- 打开游标OPEN STYPE_CURSOR;-- 循环开始REPEAT-- 可FETCH多列 需对应上FETCH STYPE_CURSOR INTO STYPE;-- 结果集没读完则继续IF NOT DONE THEN    -- 假设这里需要做一下类型转换 使用CAST将字符转成数值    INSERT INTO BASE_OTHER_TABLE(ID, TYPE_NAME, CREATE_TIME)         SELECT ID+1000000 ID, &#39;TEST&#39; TYPE_NAME, 1563445355 CREATE_TIME FROM BASE_ANOTHER_TABLE            WHERE TYPE = CAST(STYPE AS SIGNED);END IF;UNTIL DONE END REPEAT;-- 关闭游标CLOSE STYPE_CURSOR;-- 循环结束END $$DELIMITER;-- 结束符恢复-- 调用存储过程CALL SELECT_4_INSERT();-- 若为临时存储过程 调用完删除DROP PROCEDURE SELECT_4_INSERT;</code></pre><p>还有一种情况，将A表中的查询结果全部塞到B表中，只做一些字段匹配调整，可直接使用INSERT…SELECT…</p><p>A表中字段：ID FIRST_NAME LAST_NAME GENDER<br>B表中字段：ID NAME FLAG HOBBIES</p><pre><code class="sql">INSERT INTO BASE_B_INFO(ID, NAM, FLAG, HOBBIES)SELECT ID+1000000 ID, CONCAT(FIRST_NAME, LAST_NAME) NAME , 0 FLAG ,&#39;无&#39; HOBBIES FROM BASE_A_INFO</code></pre><p><hr></p><p>2017.12.23 00:13</p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 存储过程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>后焦虑思考</title>
      <link href="/2017/12/17/%E5%90%8E%E7%84%A6%E8%99%91%E6%80%9D%E8%80%83/"/>
      <url>/2017/12/17/%E5%90%8E%E7%84%A6%E8%99%91%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>焦虑是不是这个时代的产物？<br>这周又体会到了焦虑，是什么导致了焦虑？你的焦虑来自于自身还是外界？<br>我生活在这个时代，很难去考证上个时代的人们是否同我一样有各种焦虑，也可能每个时代的焦虑都不一样，我想说的是我处在的焦虑，那就这个时代吧。<br><a id="more"></a></p><h1 id="焦虑"><a href="#焦虑" class="headerlink" title="焦虑"></a>焦虑</h1><p>个人认为，来自于自身的焦虑是自己能够去感知自己的不足而产生的焦虑，这种焦虑可能是正性的，能够意识到自己不足从而促进个人的提升，既然是可能，意味着也不排除破罐子破摔的情况存在。而来自外界的焦虑是别人向你灌输你存在不足从而促进你去接受这个思想而产生的焦虑，其中有一种情况很常见，大多是环境的影响或是商家的手段：“别人都在做而你没有或者你做的与别人不一样”。</p><br><p>举个例子，几个月前开始使用的一款app，得到。罗振宇老师创办的，提供的是知识服务，通俗点说是卖知识的。于我这个刚步入社会，眼界小的可怜的喽啰来说，说发现新大陆一点也不过分，早期可谓是如饥似渴，打开软件，启动图上显示的“和你一起终身学习、一起建设一所终生大学”，瞬间感觉自己有了文化，正在知识的海洋里翻滚。从小到大没有看过什么书，这里的一切都是新鲜的，可以看到很多的观点，也因此看完了罗振宇老师的书，我把时间安排的死死的。正如得到app的核心思想嘛，“利用碎片化时间终生学习”。公交车上、洗澡、上厕所、排队我都在听，每天充实的要死。几个月后，我也能跟你说说什么新奇的观点，可是我更焦虑了。这么多知识我怎么才能看的完？看完忘了怎么办？本想消除我无知的焦虑，却加剧了我的无知，带来了时间上的焦虑和生活上的疲惫。这时就有人发言了：“罗胖子啊，你这哪是卖知识，你这是在卖焦虑啊”。</p><br><p>这个例子我说的两种焦虑都包含，我不仅感受了焦虑也感受了疲惫。这个时候就该反思了，是罗胖子的说法对还是这个路人甲的发言对？我回顾了下，我是前期听罗胖子的，中期听路人甲的，后期决定中庸。都对，都不对。否则岂不是又陷入焦虑？来分析下，罗胖子要我们学习，学习是好事啊，我们就应该终身学习是吧，这是一个有经验的人对其他人的忠告；罗胖子也是个商人，无形之中给我们灌输的是“小笨蛋们，想变聪明嘛，用得到app才行啊！”，这与我们来说肯定觉得是不对的，但对于一个商人来说无可厚非；再看看路人甲，他说出来罗胖子作为商人的行为，很正确，问题在于如何去选择是他自己的事。</p><br><p>以上仅代表个人观点。“得到”现在还在我的手机里，我还在用，不同的是不再觉得看了“得到”就有文化（不被商家左右），就不傻了，而是把他当作一个渠道、一个娱乐方式，没有去刻意的使用，强迫自己今天必须要听多少。每个人情况都有所不同，你工作累了想放松你大可回来花半个小时听听舒缓的歌，强迫自己去接受知识带着负面情绪还怎么赚钱？还是要随心嘛。目前的时代确实是碎片化的，当“碎片化”被提及是，带来了电子书的回春，碎片化知识服务产业的兴起，电子书也不是单纯的看书了多了讲书，电台也开始有知识服务了，还有知乎一小时系列等等。有人说这个好，有人说那个好，不可能照单全收，否责又陷入焦虑了。知识是学不完的，不是说你没有使用某个app你就错过了一些知识，也不是你用了某个app就高人一等，每个人都有自己的选择，这类软件1-2个足以。最最主要的是你要选择你喜欢的软件，选择软件里提供的你感兴趣的内容，不要被别人左右。学你感兴趣的才是学习，你不知道想知道的才是知识。</p><br><p>我目前手机里有“微信读书”和“得到”，“微信读书”用的多，可以看到很多有趣的书，“得到”呢只偶尔无聊时使用它的“每天听本书”栏目，只是偶尔，有时间还是喜欢看而不是听。听的都是别人的见解，看的才能有自己的想法。</p><h1 id="公司团建前后"><a href="#公司团建前后" class="headerlink" title="公司团建前后"></a>公司团建前后</h1><h2 id="团建前"><a href="#团建前" class="headerlink" title="团建前"></a>团建前</h2><p>时间：2017.12.16 星期六 方山汽摩基地 冷但有阳光</p><br><p>这是来公司的第一次集体出去活动，自然不能缺席，也十分期待周六的活动。这是个令人高兴的事，但是如果周六时间用来团建，那本周的工作则需要在周六之前完成。从周会上来看，本周的工作完成肯定不会需要太长的时间，然而我已经不会再那么天真了（/手动摊手），早早就有了心里准备，活来了，焦虑也来了。是无知的焦虑，我一直觉得既然工作了就不应该有什么不会的，不会就去学呗，别人会自己也能吧，这次的活能够去了解其他部门的东西，还是觉得很有趣，后来严重受挫。老板和同事都在指点帮助我理解，我还是出错还是在纠结，时间花掉却没能输出成果或者说没能输出满意的结果。连续加了四晚的班，我想还有一部分时间是在焦虑，来自自身的焦虑。想把这件事完成的焦虑，还有其他事的焦虑，自己是否能胜任这个工作的焦虑，后而自身不足的焦虑。也希望我能够像理解“得到”式焦虑那样消除这些焦虑。</p><h2 id="团建中"><a href="#团建中" class="headerlink" title="团建中"></a>团建中</h2><p>去了有30多人吧，第一感觉：这是谁…我们部门的么。好在与我预想的一样，第一个活动是趣味游戏，于参加过上次联谊的我来说（/手动尴尬一把），这简直就是一个”神器“，能够最短时间放下大家的”偶像“包袱，打成一片。而且，做完还很暖和…</p><br><p>真人CS，没见过世面的人第一次玩，听说是激光枪，开始各种脑补炫酷的场景，到了现场第一感受，这怕是要拼一波演技咯。穿上装备，fire in the hole！还好，不全靠演技，被击中和击中都是有感应的，后来也有点套路。跑的很开心，大家都在笑，还有个别同事可能在地上打了个滚…有一点要吐槽的是场地太小了，那么多小房子，怎么不能进去捡装备呢！</p><br><p>中午来自助烧烤，以前大学团建户外烧烤是租的小炉子，看到眼前的大炉子心里竟然还有点爽，然后我就被浓烟熏的感动哭了。后来坐在炉子的角落，全程只翻了几次肉，后来炒了下鱿鱼，然后还吃着同事递过来的粮食，感谢勤劳的同事不杀之恩。后来，实在是这张吴彦祖的脸我还想要，离开了炉子到外面走了走。</p><br><p>强烈推荐跑跑卡丁车！三圈意犹未尽啊！虽说是老司机，但第一次开这种车，心里还是有点虚，第一圈摸清车的机制、路况，第二圈提速试着急转，第三圈就是放飞自我，虽说不计秋名山车神，也没有炫酷的漂移，但就很帅，总结一个字就是，稳！后来准备混着在上一次，还是下次吧，哈哈。</p><h2 id="团建后"><a href="#团建后" class="headerlink" title="团建后"></a>团建后</h2><p>坐着大巴回公司，路上感受着阳光的沐浴，天气是真的好。想着还有活还没做，就去了公司，写了一个小功能。人最害怕热闹过后的寂静，多愁善感的我一边感伤一边写着代码，然后点开闪烁的消息提醒，被怼了一通，内心是拒绝的，但确实是自己干的活，控制住情绪，准备与怼我者商讨解决方案，似乎他心中确实也有不满，顺着他来，等周一去解决吧。</p><br><p>周末算是一周工作的结束，可以去做自己想做的事，本该开心。但是，如果工作没有完成就不太开心了，这工作的事情没那么好忘，有人说周末应该吧工作忘了好好放松一把，但舒适总要付出代价，想想啊，这些没做完的事周一还是要去解决，还担心自己不一定能够解决，然后处在焦虑下过这个周末，赔了夫人又折兵。若本周的事本周全部能够完成，那该多好啊，开始也确实过过这样的日子。按理说，今日事当今日毕，可计划永赶不上变化，去解决一点再解决一点，希望能够越来越熟悉，早日得心应手。那时，或许还能谈谈追求。</p><h2 id="团结后之后"><a href="#团结后之后" class="headerlink" title="团结后之后"></a>团结后之后</h2><p>这时已经在家了，该是22点许，浑身酸痛，身体在说话：看你着运动缺乏的！坚持一件事很难，大学时跑步坚持了一个月有余，后因天气寒冷而放弃，而跑步这件事坚持三年确能毁于一月，我这坚持一月的怕是谈不上坚持了。读书是从小到大算的上坚持的第一件事，也后悔为何到现在才明白，耽误了这么久，那或许跑步我也能吧，不试试岂不是咸鱼？</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>啥展望，明天准备去接受摧残！！</p><h1 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h1><p>最后分享一下这周看的书，整理了一个脑图，关于咖啡的，有兴趣可以看看。</p><p></p><p>点击下面的链接即可。<br>脑图：<a href="http://naotu.baidu.com/file/26cc5fe4d5fe4d8135c7ade6b757ee12?token=2defa3ff44ce869c" target="_blank" rel="external">《咖啡原来是这样的》</a></p><p>有什么想法可以在下方评论。Night.</p><p><hr></p><p>2017.12.17 22:59</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 愚见 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习实战（五）Logistic回归</title>
      <link href="/2017/12/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%94%EF%BC%89Logistic%E5%9B%9E%E5%BD%92/"/>
      <url>/2017/12/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%94%EF%BC%89Logistic%E5%9B%9E%E5%BD%92/</url>
      <content type="html"><![CDATA[<p>Logistic回归是一种简单的分类算法，提到“回归”，很多人可能觉得与分类没什么关系，Logistic回归通过对数据分类边界的拟合来实现分类。而“回归”也就意味着最佳拟合。要进行最佳拟合，则需要寻找到最佳的拟合参数，一些最优化方法就可以用于最佳回归系数的确定。<br><a id="more"></a></p><h1 id="Logistic回归"><a href="#Logistic回归" class="headerlink" title="Logistic回归"></a>Logistic回归</h1><p><strong>对书中代码做的修改：</strong></p><ul><li>1.修改plotBestFit（wei）参数名称plotBestFit（weights）</li><li>2.移除plotBestFit（）中weights=wei.getA()</li><li>3.分析数据画决策边界调用plotBestFit（weights）时传入weights.getA()，其中weight是gredAscent(dataArr,labelMat)方法的返回值</li></ul><h2 id="LogistiC-回归梯度上升优化算法"><a href="#LogistiC-回归梯度上升优化算法" class="headerlink" title="LogistiC 回归梯度上升优化算法"></a>LogistiC 回归梯度上升优化算法</h2><h3 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h3><pre><code class="python">from numpy import *def loadDataSet():    dataMat = []    labelMat = []    fr = open(&#39;F:\\study\\testSet.txt&#39;)    for line in fr.readlines():        #去除空格并拆分        lineArr = line.strip().split()        dataMat.append([1.0, float(lineArr[0]), float(lineArr[1])])        labelMat.append(int(lineArr[2]))    return dataMat,labelMat</code></pre><h3 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h3><pre><code class="python">&quot;&quot;&quot;sigmoid函数&quot;&quot;&quot;def sigmoid(inX):    return (1.0/(1+exp(-inX)))</code></pre><h3 id="LogistiC-梯度上升算法"><a href="#LogistiC-梯度上升算法" class="headerlink" title="LogistiC 梯度上升算法"></a>LogistiC 梯度上升算法</h3><pre><code class="python">def gredAscent(dataMatIn, classLabels):    #[[x,x,x],...]    dataMatrix = mat(dataMatIn)    #将列表转换为矩阵再倒置    labelMat = mat(classLabels).transpose()    #获取行列    m,n = shape(dataMatrix)    #向目标移动的步长    alpha = 0.001    #迭代次数    maxCycles = 500    #回归系数 n=3行1列的单位数组    weights = ones((n,1))    for k in range(maxCycles):        #h&gt;0.5 在右边 dataMatrix*weights矩阵相乘100行一列        #每次计算所有样本点        h = sigmoid(dataMatrix*weights)        error = (labelMat-h);        #w = w + α▽w f(w)        #dataMatrix.transpose() 3行100列  error 100行1列  相乘后3，1        weights = weights + alpha * dataMatrix.transpose()*error    return weights</code></pre><ul><li>1.解析文本，文本中有100个样本点，前两列代表点的数值型特征X1,X2，最后一列为分类标签</li><li>2.设置回归系数初始值为1（为单位矩阵，每个样本点对应一个回归系数，设置回归系数行数等于样本点的列数，实现倒置），步长为0.001，训练次数500</li><li>3.计算z=wTx,带入sigmod获取结果，将结果与分类标签计算误差值</li><li>4.根据误差值方向调整回归系数（梯度迭代公式，梯度简化为数据样本与错误量相乘[见上篇博客公式推导]）</li></ul><pre><code class="python">&quot;&quot;&quot;查看效果&quot;&quot;&quot;dataArr,labelMat = loadDataSet()weights = gredAscent(dataArr,labelMat)</code></pre><pre><code class="python">&quot;&quot;&quot;分析数据：画出决策边界&quot;&quot;&quot;import matplotlib.pyplot as pltdef plotBestFit(weights):    dataMat,labelMat = loadDataSet()    dataArr = array(dataMat)    # n = 100    n = shape(dataArr)[0]    xcord1 = []; ycord1 = []    xcord2 = []; ycord2 = []    for i in range(n):        if int(labelMat[i]) == 1:            xcord1.append(dataArr[i, 1]); ycord1.append(dataArr[i,2])        else:            xcord2.append(dataArr[i, 1]); ycord2.append(dataArr[i,2])    # 创建画布    fig = plt.figure()    ax = fig.add_subplot(111)    # 画标签为1的点    ax.scatter(xcord1, ycord1, s=30, c=&#39;red&#39;, marker=&#39;p&#39;)    # 画标签为0的点    ax.scatter(xcord2, ycord2, s=30, c=&#39;green&#39;)    #创建决策边界线    x = arange(-3.0, 3.0, 0.1)    &quot;&quot;&quot;    设置sigmod函数值为0,0是两个分类的分界处，可解出x，y的关系式    &quot;&quot;&quot;    # 0 = w0*x0 + w1*x + w2*y  =&gt;  y = -(w0 + w1*x)/w2    y = (-weights[0]-weights[1]*x)/weights[2] #最佳拟合线    ax.plot(x,y)    plt.xlabel(&#39;X1&#39;);plt.ylabel(&#39;X2&#39;);    plt.show()</code></pre><pre><code class="python">&quot;&quot;&quot;查看效果&quot;&quot;&quot;from numpy import *# 传入返回的回归系数(书中有误，因此修改了plotBestFit的传参，也为了后面随机梯度可共用#另外需要定义weights将gredAscent的值赋给weights)%matplotlib inline# getA()将自身矩阵转化为ndarray类型的变量，等价于asarray(self)plotBestFit(weights.getA())</code></pre><p><img src="/img/logistic/1.png" alt="分析数据"></p><h2 id="随机梯度上升算法"><a href="#随机梯度上升算法" class="headerlink" title="随机梯度上升算法"></a>随机梯度上升算法</h2><pre><code class="python">&quot;&quot;&quot;一次仅用一个样本点来更新回归系数&quot;&quot;&quot;def stocGradAscent0(dataMatrix, classLabels):    m,n=shape(dataMatrix)    alpha = 0.01    weights = ones(n)    for i in range(m):        #每次计算一个样本点        h = sigmoid(sum(dataMatrix[i]*weights))        error = classLabels[i] - h        weights = weights + alpha*error*dataMatrix[i]    return weights</code></pre><pre><code class="python">&quot;&quot;&quot;查看效果&quot;&quot;&quot;dataArr,labelMat = loadDataSet()weights = stocGradAscent0(array(dataArr),labelMat)plotBestFit(weights)</code></pre><p><img src="/img/logistic/2.png" alt="分析数据"></p><h2 id="改进的随机梯度上升算法"><a href="#改进的随机梯度上升算法" class="headerlink" title="改进的随机梯度上升算法"></a>改进的随机梯度上升算法</h2><pre><code class="python">&quot;&quot;&quot;改进的随机梯度上升算法alpha在每次迭代的时候都会调整，随着迭代次数不断减小，但永远不会到0每次从样本中随机取出一个样本更新回归系数，之后将改值从列表中删除，进行下次迭代&quot;&quot;&quot;def stocGradAscent1(dataMatrix, classLabels, numIter=150):    m,n = shape(dataMatrix)    weights = ones(n)    for j in range(numIter):        # 每个样本的编号[0,..,99]        dataIndex = range(m)        for i in range(m):            &quot;&quot;&quot;            步长alpha每次迭代时需要调整，每次减少1/(i+j)            档j&lt;&lt;max(i),alpha就不是严格下降的。            避免参数严格下降也常见于模拟退火算法（SAA)等其他优化算法中            &quot;&quot;&quot;            alpha = 4/(1.0+j+i)+0.01            # numpy.random.uniform(low,high,size)在给定区间[0,100)内随机取样，注意是左闭右开            # size输出样本数目，int或元组，缺省时输出一个值            randIndex = int(random.uniform(0,len(dataIndex)))            # 求和 即计算z = w0x0+w1*x1+w2*x2  随机选取样本计算h            h = sigmoid(sum(dataMatrix[randIndex]*weights))            error = classLabels[randIndex] - h            weights = weights + alpha * error * dataMatrix[randIndex]            # 样本被使用后去除 在此次迭代内dataIndex长度每次减1            del(dataIndex[randIndex])    return weights</code></pre><pre><code class="python">&quot;&quot;&quot;查看效果&quot;&quot;&quot;dataArr,labelMat = loadDataSet()weights = stocGradAscent1(array(dataArr),labelMat)plotBestFit(weights)</code></pre><p><img src="/img/logistic/3.png" alt="分析数据"></p><h2 id="从疝气病症预测病马的死亡率"><a href="#从疝气病症预测病马的死亡率" class="headerlink" title="从疝气病症预测病马的死亡率"></a>从疝气病症预测病马的死亡率</h2><h3 id="处理数据中的缺失值"><a href="#处理数据中的缺失值" class="headerlink" title="处理数据中的缺失值"></a>处理数据中的缺失值</h3><p><strong>可选的做法</strong></p><blockquote><p>使用可用特征的均值来填补缺失值；<br>使用特殊值来填补缺失值，如-1;<br>忽略有缺失值的样本；<br>使用相似样本的均值添补缺失值；<br>使用另外的机器学习算法预测缺失值。</p></blockquote><p>numpy不允许包含缺失值，选择实数0来替换所有缺失值，恰好能适用于Logistic回归<br>我们需要的是一个在更新是不会影响系数的值，根据回归系数的更新公式<br>w = w + a <em> e </em> dataMatrix[randIndex],若dataMatrix的某特征对应值为0,则系数不做更新w=w，另外sigmoid(0)=0.5，对结果的预测不具有任何的倾向性</p><h3 id="Logistic回归分类函数"><a href="#Logistic回归分类函数" class="headerlink" title="Logistic回归分类函数"></a>Logistic回归分类函数</h3><pre><code class="python">def classifyVector(inX, weights):    prob = sigmoid(sum(inX*weights))    if prob &gt; 0.5: return 1.0    else: return 0.0def colicTest():    frTrain = open(&#39;F:\study\horseColicTraining.txt&#39;)    frTest = open(&#39;F:\study\horseColicTest.txt&#39;)    trainingSet = []; trainingLabels = []    for line in frTrain.readlines():        currLine = line.strip().split(&#39;\t&#39;)        lineArr = []        for i in range(21):            lineArr.append(float(currLine[i]))        trainingSet.append(lineArr)        trainingLabels.append(float(currLine[21]))    trainWeights = stocGradAscent1(array(trainingSet), trainingLabels, 500)    errorCount = 0; numTestVec = 0.0    for line in frTest.readlines():        numTestVec += 1.0        currLine = line.strip().split(&#39;\t&#39;)        lineArr = []        for i in range(21):            lineArr.append(float(currLine[i]))        if int(classifyVector(array(lineArr), trainWeights)) != int(currLine[21]):            errorCount += 1    errorRate = (float(errorCount)/numTestVec)    print &quot;the error rate of this test is: %f&quot; % errorRate    return errorRatedef multiTest():    numTests = 10; errorSum=0.0    for k in range(numTests):        errorSum += colicTest()    print &quot;after %d iterations the average error rate is: %f&quot; % (numTests, errorSum/float(numTests))</code></pre><pre><code class="python">&quot;&quot;&quot;运行时报D:\Anaconda2\lib\site-packages\ipykernel\__main__.py:5: RuntimeWarning: overflow encountered in exp警告说明计算的数据结果溢出了，忽略也无妨，查过说可以调整sigmoid函数，使用longfloat()来解决溢出，但没有解决，还在寻找解决办法。。&quot;&quot;&quot;multiTest()</code></pre><pre><code>D:\Anaconda2\lib\site-packages\ipykernel\__main__.py:5: RuntimeWarning: overflow encountered in expthe error rate of this test is: 0.298507the error rate of this test is: 0.402985the error rate of this test is: 0.268657the error rate of this test is: 0.298507the error rate of this test is: 0.283582the error rate of this test is: 0.402985the error rate of this test is: 0.388060the error rate of this test is: 0.328358the error rate of this test is: 0.388060the error rate of this test is: 0.417910after 10 iterations the average error rate is: 0.347761</code></pre><h2 id="总结（来自书中）"><a href="#总结（来自书中）" class="headerlink" title="总结（来自书中）"></a>总结（来自书中）</h2><blockquote><p>Logistic回归的目的是寻找一个非线性函数sigmoid的最佳拟合参数，求解过程可以由最优化<br>算法来完成。在最优化算法中，最常用的就是梯度上升算法，而梯度上升算法又可以简化为随机<br>梯度上升算法。<br>随机梯度上升算法与梯度上升算法的效果相当，但占用更少的计算资源。此外，随机梯度上<br>升是一个在线算法，它可以在新数据到来时就完成参数更新，而不需要重新读取整个数据集来进<br>行批处理运算。<br>机器学习的一个重要问题就是如何处理缺失数据。这个问题没有标准答案，取决于实际应用<br>中的需求。现有一些解决方案，每种方案都各有优缺点。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Logistic回归部分公式推导</title>
      <link href="/2017/11/27/Logistic%E5%9B%9E%E5%BD%92%E9%83%A8%E5%88%86%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/"/>
      <url>/2017/11/27/Logistic%E5%9B%9E%E5%BD%92%E9%83%A8%E5%88%86%E5%85%AC%E5%BC%8F%E6%8E%A8%E5%AF%BC/</url>
      <content type="html"><![CDATA[<p>代码的转换跳跃太大，还得自己去推到一边才知道下句代码为什么这样写。<br>数学：你还是不是栽在我手里！<br><a id="more"></a></p><h1 id="直接上图片"><a href="#直接上图片" class="headerlink" title="直接上图片"></a>直接上图片</h1><p><img src="/img/logistic/logistic.jpg" alt="回归公式推倒"></p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一周记事</title>
      <link href="/2017/11/10/%E4%B8%80%E5%91%A8%E8%AE%B0%E4%BA%8B/"/>
      <url>/2017/11/10/%E4%B8%80%E5%91%A8%E8%AE%B0%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>不知该用哪句话开头，就把纠结该写什么开头这个事实写在前面，消除自己的尴尬，着实机智。<br><a id="more"></a></p><h1 id="来自工作"><a href="#来自工作" class="headerlink" title="来自工作"></a>来自工作</h1><p>这周有点忙碌，感觉自己对很多事都把控不了，工作这样，生活也是这样。工作上有好几个活，我是那种希望把这件事做完再去做下一件事的人，但明显对于现在的工作事不合适的。对接不同的人，你都要去处理，这周哪些工作要结束，都必须记着，在这周的开始信誓旦旦的觉得能完成，做着做着就发现自己有很多情况没有考虑到，会遇到难点，会遇到不熟悉的点，导致开发计划很难在一定的时间完成。之前陈老板说过我们不要任务下来就写代码，应该先去思考怎么去实现，想好方案再去编码。确实这样，这可能是我们这些菜鸟程序猿的通病，以为编码才是干活，导致后期做了很多无用功，写到一半才发现这个方式不合适，一个方案是硬着头皮写下去，写出来的东西永远达不到想要的效果，还有就是重新编码，浪费了一大部分时间。欲善其事，先利其器，大概就是这个道理。还有一个问题，我们在实现一个功能的时候，自认为写的很厉害，用了很好的技术，有些比较亮的点，可是完全没啥用，代码是给你自己看的，老板关系的是你的功能实没实现，是不是在期限内完成的，用户关心的是你有没有我要的功能，好不好用，体验怎么样，管你代码怎么实现的。这个毛病得改。</p><br><p>陈老板我不知道他的年纪，大概知道他在公司待了7年，感觉他什么都知道，还记得刚来的时候看着他敲命令，那手速瞠目结舌，简直就是偶像，也是我觉得程序员后来该有的样子。接了一个活，需要自己评估开发时长，真的是有点懵的，我大概知道需要根据自身情况来估测一个时间，但心里没底。人天生有具有对比性，如果有一个人已经开发过差不多的功能，我会去询问，好估测一个左右的时间，这样自己所说的时间不会太长，也不会太短。项目组几个人都出差去了，没人问，说实话，他们能力比我强，真的问到了可能与我也相差甚大。于是，我问了陈老板，我见过他估过工时。陈老板给了些建议，还是因人而已吧，虽说开发并不稳定，估计时间与实际时间可能毫无关系，但还是觉得估计时间至少是个度，不能偏离太多，可能这就是我一个菜鸡年轻的想法吧。想多问问陈老板一些东西，我想知道他工作这几年是怎么度过的，该去做哪些事，工作伊始是否也有过我现在的迷茫、胆怯、无助，7年之后也能否像他这样，这些我都想知道。</p><br><p>总有时间紧迫的时候，那如果去实现一个功能，大多只是为了去实现这个功能吧。说自己没有一点想法是不可能的，但没时间给你那么多时间去实现你的想法，这种情况我们得听从，我们经验太少，接触面窄，可能我们认为想法根本不适用，对于这样的情况，我觉得如果真的有想法可以提，被老板反驳才知道自己缺什么，等我们更深入，接触的更多才会产生更多的想法，更多有意义的想法。</p><br><p>算是万幸，这周好歹也将其中的一件工作结束了，虽然还得去完善。</p><br><br><h1>来自工作之外</h1><br><p>后来养成读书的习惯，也不知道算不算习惯，但现在很喜欢，读书深知自己不足，每周都会去读一点，去看朋友推荐的书，也看自己偶然看到的书。公司楼下也有读书的地方，虽然没太多时间待在那，但有总是觉得不错的。之前几天中午没睡觉下去看的《罗辑思维》，能够看到很多不错的想法，以后有空还是会多去去的。最近看的很多人推荐的《三体》，一共三部，看了很长时间，快两部了。我觉得作者在写这本书的时候定事凌驾于上帝之上的，在感叹作者脑洞之大的同时，也感受着作者笔下的宇宙观，一种大局感，当三体危机真的来临之时，人类的道德底线是否会打破？这些都值得深思。科幻小说难就难在虚幻的同时，须做到给人们做到正确的科普引导，这些作者都做到了，看的很震撼。</p><br><p>今天，还有一件“伟大”的事，400多页双栏的《社会心理学》主要部分也已经看完了。从6月到现在11月，每天中午看一点，周末也看一点，终于看完了。这本书陪我度过了一段艰难的时光，很多生活中经常发生的事在书中被描述出来，让我们能够去理解我们的行为，正确的描述能够使人变得理性。当时看这本书并不是为了去深入学习心理学，只是希望能够调整自己的情绪，对于我来说只能算是科普读物了，现在看来效果还算不错。虽说，现在也偶尔悲伤发作，大多是触情触景，所听所视导致病情发作，但也说明我确确实实是个人，回头想想以前也是美好的。书中社会认知、自我认识、从众、团体、人际吸引、态度、偏见这些我还能记起来的章节感受颇深，终于明白原来这么回事的感觉真好。</p><br><p>生活所迫，自然不可远足，希望能够在书里打开心的世界，算是一种慰藉，虽然现在众多书籍内容都向往自由，自己也心之神往，但现在也只能想想。等到有资格去谈论追求之时，必愿行万里路。</p><blockquote><p>梦想、希望、家乡、远方总是被诗人提起，只是因为它们和姑娘押韵。     </p></blockquote><p>今晚大家很多都在等着12点啦清空购物车吧，还记得去年还会去抢卷淘好货，或许是因为今年这个时候太忙，或许是因为今年没有人带。现在来选选，买点自己需要的东西，算是应了马爸爸为我们创建的节日。</p><br><p>这周工作日结束，虽然工作日除了工作，看会书没什么消遣。但为了健康阳光的生活周末还是要出去逛逛的！！谁说程序猿就必须宅着邋遢发福（再过一段时间我把“发福”这个词去掉）！！最多就脱个发，那也是急的。明天白天去加班，晚上去看电影放松下心情，生活还是充满无限可能的（／手动微笑）。</p><br><hr><br><p>2017.11.10 21.57</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>九月九日重阳</title>
      <link href="/2017/11/05/%E4%B9%9D%E6%9C%88%E4%B9%9D%E6%97%A5%E9%87%8D%E9%98%B3/"/>
      <url>/2017/11/05/%E4%B9%9D%E6%9C%88%E4%B9%9D%E6%97%A5%E9%87%8D%E9%98%B3/</url>
      <content type="html"><![CDATA[<p>又是一年重阳，又是一年生日。今年有些不同，好像也没什么不同。<br><a id="more"></a></p><blockquote><p>发生于2017.10.28 星期六</p></blockquote><p>今年生日赶巧，是在星期六，早早做好了打算，想出去玩一下。一个人在南京，一个人在旅行，虽说都是一个人，但心里总想着这两种情况是不一样的，或许只是认为出去走走就是有事可做，更有意义。我想过把之前走过的地方再走一遍，也想着能够多去一些新的地方，一些之前约定想去的地方。我想去厦门，当然这次没去成，两天的时间太短暂了，好友早前约定我去上海找他，好像时间也太赶，自然也不尽兴。</p><br><p>生日的前一天，还是决定回一趟合肥，家的地方确实是不一样的，朋友在那边还是多些，我也没地方可去，我想热闹点，今年生日与以前不太一样。</p><br><p>毕业以后，朋友偶尔小聚，高中朋友或者大学朋友，大多是我组织的。工作了身不由己，大家都一样，能聚起来实属不易，工作重要。如果朋友有事来不了，这些我都理解，没事的肯定都愿意来聚一聚。这次回去和阿亮一起，本来可以早点回去的，等他花了些时间，他非要和我一起。我告诉他，我喜欢一个人坐车，这样更有感觉，好像在寻求某种意境。我在逞强。能够一起回去我心里其实很开心，多少有个伴，嘴上diss他一遍又一遍，心里却开心不已。</p><br><p>到合肥已是深夜，不便打扰太多的人，与他一同去找了我一个室友，晚上一起玩了一番到凌晨，那天确实是个不错的体验。第二天起来需要制定今天的安排，去哪里吃饭，会来多少人，这些都要考虑到。餐厅是让翘楚找的，叫红顶孔雀，最后知道是哑铃推荐的，十分感谢。中午，去餐厅所在的商场吃个饭，顺便去晚上要去的地方踩点。特地问了服务员，这边的菜分量怎么样，她信誓旦旦的告诉觉得管够，真是太单纯相信了她的鬼话。那天就当真的就吃个环境呢，假装一下文艺。这个餐厅适合两三个人一起去，或者和女朋友一起去。</p><br><p>你所期盼的这一天终于来了，终于有了借口将好友聚在一起。这一天过的又那么快，相聚的时间是短暂的，结束了自然要继续个自奔波。我们再去考虑生日的意义是什么，生日是为庆祝多少年前的同一天我们来到这个世上，有时感受着生活对自己的摧残、践踏，这个真的还要庆祝么？不，可能生日对于现在的我们已经变了，大多数的我们愿意将生日看的重一点，也算是庆祝，庆祝生活还给我们留下的一丁点的美好，那就是还能相聚的我们，这一丁点就够了，这是生日于我现在的意义。</p><br><p>想到大学的生日过的也算滋润，有室友的陪伴，还有她。第一年，去了一个DIY厨房，我做了可乐鸡翅，还有蜡烛；第二年我收到一个相册；第三年还是DIY，这次室友也在，我只摆了几个盘子。平淡的滋润。如今，不能再经历这些平淡，这些滋润，这些好像让我沉醉了许久，睡到现在，于是我改名醒来。</p><br><p>另外在这我许个愿。</p><br><hr><br><p>记于 2017.11.05 03.22</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CytoscapeJS实现ER图</title>
      <link href="/2017/10/20/CytoscapeJS%E5%AE%9E%E7%8E%B0ER%E5%9B%BE/"/>
      <url>/2017/10/20/CytoscapeJS%E5%AE%9E%E7%8E%B0ER%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>Cytoscape.js是一个很好的实现关系图的js组件。最近用的比较多，这里记录下如何用CytoscapeJS实现类ER图。</p><p>这是官方文档： <a href="http://js.cytoscape.org/" target="_blank" rel="external">Cytoscape.js</a>   </p><p>这是GitHub地址：<a href="https://github.com/cytoscape/cytoscape.js" target="_blank" rel="external">GitHub-Cytoscape.js</a><br><a id="more"></a></p><p></p><p>一开始用的是力导向图，后来发现这样很难表现出表内字段关系，于是就想着用来实现ER图。</p><p></p><p></p><p>下面是写的一个小Demo，数据是自己造的，写在了文件里，具体数据还需做写修改，这里只提供一个思路。</p><p></p><h1 id="主要包含三个文件"><a href="#主要包含三个文件" class="headerlink" title="主要包含三个文件"></a>主要包含三个文件</h1><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><p>此文件里给一个div作为Cytoscape的容器,并引入需要的文件</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot; /&gt;&lt;meta charset=utf-8 /&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;cy&quot;&gt;&lt;/div&gt;&lt;script src=&quot;js/cytoscape.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/code.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="style-css"><a href="#style-css" class="headerlink" title="style.css"></a>style.css</h2><p>此文件给作为Cytoscape容器的div定一些样式，该容器需要指定宽和高</p><pre><code class="css">body {   font: 14px helvetica neue, helvetica, arial, sans-serif;}#cy {  height: 100%;  width: 100%;  position: absolute;  left: 0;  top: 0;}</code></pre><h2 id="code-js"><a href="#code-js" class="headerlink" title="code.js"></a>code.js</h2><p>此文件造了些数据，并对数据进行处理（计算位置），最终画入到cytoscape中，具体请到翻到博客底部下载源码</p><pre><code class="javascript">(function (tableNum,fRow,fCol) {  var _ = function(){    return {      getRandomNum : function(n,m){        return Math.floor(Math.random()*(m-n+1)+n);      },      createNodesData : function(tNum){        var model = {          tableNodes:[],          fieldNodes:{}        };        for(var i = 0; i &lt; tNum; i++){          var node = { id:&#39;t&#39;+i, name:&#39;表&#39;+i };          var param = { data: node };          model.tableNodes.push(param);        }        for(var i = 0; i &lt; tNum; i++){          model.fieldNodes[&#39;t&#39;+i]=[];          for(var j = 0; j &lt; _.getRandomNum(1,80); j++){            var node = { id:&#39;t&#39;+i+&#39;-f&#39;+j, name:&#39;t&#39;+i+&#39;字段&#39;+j };            var param = { data: node };            model.fieldNodes[&#39;t&#39;+i].push(param);          }        }        return model;      },      createEdgesData : function(model){        var edgesER = [];        for(var i = 0; i &lt; model.tableNodes.length; i++){          var edge = { source:model.fieldNodes[model.tableNodes[i].data.id][model.fieldNodes[model.tableNodes[i].data.id].length-1].data.id,                       target:model.fieldNodes[model.tableNodes[0].data.id][0].data.id }          var param = { data:edge, classes:&#39;fieldRelation&#39; };          edgesER.push(param);        }        return edgesER;      },      figureNodesPosition : function(model,fRow,fCol){        var nodesER = [];        nodesER.push({data: { id: &#39;main&#39;, name: &#39;ER图&#39; }});        var fieldXOffset = 0,fieldYOffset = 40,fieldRow = fRow,fieldCol = fCol;        var maxX = 0,maxY = 0,entityXOffset=200;        var outLoopNum = 0,cols=0;        for(var i = 0; i &lt; model.tableNodes.length; i++){          cols += parseInt(model.fieldNodes[model.tableNodes[i].data.id].length/fieldRow)+1;          model.tableNodes[i].data.parent = &#39;main&#39;;          nodesER.push(model.tableNodes[i]);          var tempJ = 0 ;          var innerLoopNum = 0;          for(var j = 0; j&lt;model.fieldNodes[model.tableNodes[i].data.id].length; j++){            if(parseInt((j/fieldRow)-innerLoopNum)==1){//字段切换到下一列                fieldXOffset = 180*(++innerLoopNum);                tempJ = 0;            }            model.fieldNodes[model.tableNodes[i].data.id][j].data.parent = model.tableNodes[i].data.id;            model.fieldNodes[model.tableNodes[i].data.id][j].classes = &#39;cyField&#39;;            model.fieldNodes[model.tableNodes[i].data.id][j].position = { x: maxX+fieldXOffset, y: maxY+fieldYOffset*tempJ };            tempJ++;            nodesER.push(model.fieldNodes[model.tableNodes[i].data.id][j]);          }          fieldXOffset=0;//每个实体字段渲染完成后fieldXOffset清零          if(innerLoopNum==0){//若只够画一列，仍需偏移              maxX=maxX+entityXOffset;          }else{//否则记录上一个实体最后一个字段的X              maxX = model.fieldNodes[model.tableNodes[i].data.id][model.fieldNodes[model.tableNodes[i].data.id].length-1].position.x+entityXOffset;//偏移量200          }          if(cols&gt;fieldCol){//实体切换到下一行              fieldXOffset = 0;              maxX = 0;              maxY=fieldYOffset*fieldRow*(++outLoopNum)+120*outLoopNum;              cols = 0;          }        }        return { nodes: nodesER, edges: _.createEdgesData(model)};      },      paintCytoER : function(datas){        var cy = cytoscape({          container: document.getElementById(&#39;cy&#39;),          minZoom : 0.5,          maxZoom : 1.5,          userZoomingEnabled: true,          userPanningEnabled:true,          wheelSensitivity : 0.1,          style: cytoscape.stylesheet()            .selector(&#39;node&#39;)              .css({                &#39;shape&#39;: &#39;roundrectangle&#39;,                &#39;content&#39;: &#39;data(name)&#39;,                &#39;text-valign&#39;: &#39;center&#39;,                &#39;color&#39;: &#39;white&#39;,                &#39;text-outline-width&#39;: 3,                &#39;text-outline-color&#39;: &#39;#888&#39;,                &#39;font-size&#39; : &#39;8px&#39;,                &#39;width&#39;: 100,                &#39;height&#39;: 30,                &#39;background-color&#39;: &#39;#93CDDD&#39;,                &#39;text-outline-color&#39;: &#39;#93CDDD&#39;,              })            .selector(&#39;.fieldRelation&#39;)//关系线              .css({                  &#39;content&#39;: &#39;data(name)&#39;,                  &#39;width&#39;: 1,                  &quot;color&quot; : &quot;#FFFF00&quot;,                  &#39;font-family&#39;: &quot;Microsoft YaHei&quot;,                  &#39;font-size&#39; : &#39;10px&#39;,                  &#39;line-color&#39;: &#39;red&#39;,                  &#39;target-arrow-color&#39;: &#39;red&#39;,                  &#39;source-arrow-color&#39;: &#39;red&#39;,                  &#39;curve-style&#39; : &#39;bezier&#39;,//路线                  &#39;line-style&#39; : &#39;dashed&#39;,//线的样式                  &#39;target-arrow-shape&#39;: &#39;triangle-backcurve&#39;,                  &#39;target-arrow-fill&#39; : &#39;filled&#39;,                  &#39;text-background-opacity&#39; : 0,              })            .selector(&#39;$node &gt; node&#39;)//小节点外面的框              .css({                &#39;shape&#39;: &#39;roundrectangle&#39;,                &#39;text-valign&#39;: &#39;top&#39;,                // &#39;height&#39;: &#39;auto&#39;,                // &#39;width&#39;: &#39;auto&#39;,                &#39;background-color&#39;: &#39;#ccc&#39;,                &#39;background-opacity&#39;: 0.333,                &#39;color&#39;: &#39;#888&#39;,                &#39;text-outline-width&#39;:0,                &#39;font-size&#39;: 15              })            .selector(&#39;:selected&#39;)//选中              .css({                &#39;background-color&#39;: &#39;#00BFFF&#39;,                &#39;line-color&#39;: &#39;#00BFFF&#39;,                &#39;target-arrow-color&#39;: &#39;#00BFFF&#39;,                &#39;source-arrow-color&#39;: &#39;#00BFFF&#39;,                &#39;text-outline-color&#39;: &#39;#00BFFF&#39;              })            .selector(&#39;#main&#39;)              .css({                &#39;background-opacity&#39;: 0,                &#39;border-width&#39;: 1,                &#39;border-color&#39;: &#39;#aaa&#39;,                &#39;border-opacity&#39;: 0.5,                &#39;font-size&#39;: 30,                &#39;padding-top&#39;: 40,                &#39;padding-left&#39;: 40,                &#39;padding-bottom&#39;: 40,                &#39;padding-right&#39;: 40,              }),          elements: {            nodes: datas.nodes,            edges: []          },          layout: {            name: &#39;preset&#39;          }        }).off(&#39;click&#39;).on(&#39;click&#39;,&#39;.cyField&#39;,function(e){//左键展开                //关闭存在的关系  目前只有表0的字段0有关系                if(e.target.id()==&#39;t0-f0&#39;){                  cy.remove(&#39;.fieldRelation&#39;);                  cy.add(datas.edges);                }            }).off(&#39;cxttap&#39;).on(&#39;cxttap&#39;,&#39;node&#39;,function(e){//右键关闭                if(e.target.id()==&#39;t0-f0&#39;){                  cy.remove(&#39;.fieldRelation&#39;);                }            });        return cy;      }    };  }();  _.paintCytoER(    _.figureNodesPosition(      _.createNodesData(tableNum),fRow,fCol    )  );})(10,10,8);//表数，每个实体的字段行数，每行的字段列数</code></pre><h1 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h1><p>提供两种压缩包下载：</p><p>tar.gz下载：<a href="/download/cytoscapeER.tar.gz">cytoscapeER.tar.gz</a></p><p>zip下载：<a href="/download/cytoscapeER.zip">cytoscapeER.zip</a></p><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="/img/er/er1.png" alt="ER图"><br><img src="/img/er/er2.png" alt="ER图"></p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> Javascript </tag>
            
            <tag> Cytoscape </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>镇江游记</title>
      <link href="/2017/10/16/%E9%95%87%E6%B1%9F%E6%B8%B8%E8%AE%B0/"/>
      <url>/2017/10/16/%E9%95%87%E6%B1%9F%E6%B8%B8%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>脱更了。说说十一假期的事。回了家。去了镇江。<br><a id="more"></a></p><p></p><p>需要回家。</p><p></p><p></p><p>原定于10月1号下午做大巴回家，想着30号晚上去和好友玩一下，也是因为一票难求。计划有变，被朋友抛弃，他提前回了家，留我一人凌乱。回去，买不到票，不回去，要一个人等到明天。在公司拿着外网机抢票，需要排队，余票不足，我还抱有一丝侥幸，试试顺风车吧，一直没有人接单，公司也呆不下去，于是干脆回到住的地方等。当东西收拾好的时候，拿起手机打开12306，觉得何其幸运，不知哪位仁兄改变了行程，让我购买到一张，仅此一张。虽然时间比较赶，还是要试试，叫了滴滴，飞奔出去，出门车刚到，行云流水，爽！当然是赶到了，想着自己如此幸运，看到南站很多人在买彩票，可不能浪费了这幸运，买了两张刮刮乐，嗯，一张没中，定是运气已被耗尽，自己却浑然不知。</p><p></p><p></p><p>工作了，一年没有几个这样的长假，可是出去的好时机啊，现在的书大多是对自由的向往，可能深受其影响，也趋之若鹜。无奈家中琐事繁多，家人需要陪伴，自由以后再说吧。妈妈、亲姐、表姐、堂妹回来了，父亲工作忙没回的来，甚是遗憾，还缺一些人没有回来，好像也没多少了。到了五号大家都走了，我也跟着一起，先去了合肥与好友一聚，第二天赶回了南京。还有两天时间，自然不能浪费，走走吧，选的镇江，想着有古街、金山、北固亭，应该还不错，果然，不失所望。</p><p></p><p></p><p>南京到镇江动车只有20分钟的车程。订了一个青年旅社（小山楼，安利一下），旅社位于西津渡里面，这是一大特色，古街里的旅馆自然也是很有味道的。西津渡依山临江，在蒜山，因此三国时被叫做”蒜山渡“，不去还以为山上全是大蒜呢。后来到宋代以后才被叫西津渡，现在已经很难看出来它之前是作为渡口存在了，江水可是从脚下流过的，江岸北移，如今西津渡距长江江岸已有300多米远，虽说还有些遗址被人们用玻璃封存在地下，但相信我，如果上面没有牌子跟你说这是渡口遗址，你定是不知道的。但西津渡古街确实是镇江文物古迹保存最多，最集中，最完好的地区，街的尽头是镇江博物馆，也可以去一去，有很多精美的艺术品。白天在古街中，算是跟着人流瞎撞，毕竟也不熟悉，想着都看一遍。这里倒是有两个有趣的事，也总结了一些经验，不能盲目的跟着人流，因为他们去的下一个景点可能是厕所，到了景区，景区地图是一定要看的，你肯定想不到，我走了两条不同的上山路，到的同一个地方时双腿抖动的频率。</p><p></p><p></p><p>下午四点，去旅馆办理入住，是六人间（其实，晚上只有两个人在），休息了一时，去了金山，毕竟有着水漫金山的古典，在网上买了票准备进景区。热心的保安，提醒我：现在还进去啊，我说：对啊，他笑了：那你得半个小时之内赶出来。不可不可，金山那么大，首先我得保证我绕一圈还能绕出来，其次我得对得起已不是学生买的全价的票。退票，回西津渡。很快夜色降临，古街上灯火通明，街上的人也陆陆续续减少，有离开的，有跑到屋子里找食的。我误打误撞走进了一家店，找点吃的就行，吃完已到7点。晚上的古街跟白天的太不一样了，宁静，空气清新，我继续走着，舍不得离开，这感觉太好了。没忍住，拿起了手机拍起了沧桑的脸，这里就不放出来了，可能还是得去学点PS。好在，旅馆在古街里，累了可以歇歇脚。走进旅馆，桌子前围了5个人，旁边还有一个（后来知道是个韩国的小哥），可能和我一样暂时还不好意思加入他们，我做在一旁的椅子上，听他们谈话，手不听使唤的撸起了旁边的小猫（两只小猫，一只叫八一，一只叫建军，是那天出生的）。其中一人（后来得知，是情侣的前台，在为自己要营业的情侣做些准备）拿着她的“秘籍”，讲述青旅的稳赚钱论，我听的津津有味，差不多摸清了底细，加入了他们。前台，来当义工的学生，来找义工玩顺便游玩的学生（后来是我室友），还有两个妹子，还有那个韩国小哥。吃着东西，聊着天，那我觉得这个青旅还满有意思，也是我想要的样子。后来很多人都去洗漱了，虽和韩国那小哥沟通有点困难，还是聊了下去，也蛮有意思。后来快11点，我又出去了一趟，那会人更少。</p><p></p><p></p><p>听说床铺都被预定了，也不知为何后来我们的房间只有两人入住，次日，我们两人就算凑了对一起去了金山，北固亭。想着自己得去买全价的票，倒是挺怀恋几个月前还是学生身份的自己，好像很多事都被优待，一毕业就把累积的灾难都砸你身上。现在可能不再累积了，有灾难直接丢你脸上，解决了，再给你一个，不会让你闲着。</p><p></p><p></p><p>去镇江不去金山是个很不合常理的事，你得去看看白娘子吧，不懂爱的法海肯定也不能落下（你去了别这么说，法海是很受金山寺尊重的，不可妄语）。没去金山之前看了网上一个段子，一网友到了金山，欲救白娘子，后因人太多放弃。可能此时已假期末，有人但并不太多，也到了最顶端看了看风景。同行的伙伴告诉我绕塔要顺时针绕，回来我特地查了查确有此事，绕塔需右绕，低头收摄眼根，消除杂念，忏悔，祈求。好在他跟我说了，不然岂不丢失了虔诚，善哉善哉。</p><p></p><blockquote><p>千古江山，英雄无觅孙仲谋处。舞榭歌台，风流总被雨打风吹去。斜阳草树，寻常巷陌，人道寄奴曾住。想当年，金戈铁马，气吞万里如虎。<br>元嘉草草，封狼居胥，赢得仓皇北顾。四十三年，望中犹记，烽火扬州路。可堪回首，佛狸祠下，一片神鸦社鼓。凭谁问：廉颇老矣，尚能饭否？</p></blockquote><p></p><p>很熟悉，辛弃疾的京口北固亭怀古，镇江以前叫京口。进去就知道，还有很多诗词是描绘北固亭的，自己其实并不太清楚，不多赘述，免得有打肿脸充胖子的嫌疑。这个词也是有通行伙伴的提醒才记起，逛北固亭之余还给我普及了下历史知识。登上北固亭，正面是山顶俯瞰的视角，背面是江（景色太美）。爬了很久的山，到此得到清风，算是给予我们的奖励，我们在上面待的时间很长，确实不愿意走，如果有张床就更好了。拍了很多照片，不情愿的下了山。江对岸听说是金山，可惜此次匆忙，去不了，仍旧是有机会的。</p><p></p><p></p><p>本来是想写的详细点的，写着写着发现有意思的事太多，时间有限，后面就草草了事，也算是记了个大概，之后看起这篇博客，想着依旧能够记起在镇江着两天发生的事，差不多也就够了。</p><p></p><p><hr></p><p></p><p>记于 2017.10.16 21.22（完）</p><p></p><p></p><p>放几张在北固亭的照片，不会拍照将就着看吧</p><br><img src="/img/zhenjiang/1.jpg" alt="1"><br><img src="/img/zhenjiang/2.jpg" alt="2"><br><img src="/img/zhenjiang/3.jpg" alt="3"><br><img src="/img/zhenjiang/4.jpg" alt="4"><p></p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>罗马帝国衰亡史（3）</title>
      <link href="/2017/10/11/%E7%BD%97%E9%A9%AC%E5%B8%9D%E5%9B%BD%E8%A1%B0%E4%BA%A1%E5%8F%B2%EF%BC%883%EF%BC%89/"/>
      <url>/2017/10/11/%E7%BD%97%E9%A9%AC%E5%B8%9D%E5%9B%BD%E8%A1%B0%E4%BA%A1%E5%8F%B2%EF%BC%883%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>从体制，信仰，战略三个方面，简述西罗马帝国最终灭亡的原因和过程。<br><a id="more"></a></p><h1>四帝共治</h1><p>罗马起源于分散的部落城邦，早起大家各自为政，出于大规模的生产和共同防卫的需要，国家诞生。但虽是统一的共同体，但成员始终保持警惕。因此早期的重要职位都是有两个以上的人来担任，防止出现独裁。后拉，戴克里先40岁成为皇帝，并且是由地方军用户的，他完整的见证了混乱的全过程，所以一上台就要改革，主要的一点是将罗马帝国划分成四个大的管理区，交给包括自己在内的四个人去统治。</p><br><p>由于之前500年的共和国历史，罗马的皇帝并不像中国古代的天子一样，所以戴克里先直接把自己设定成最高君主，让人们管自己叫“主和神”，实现权力的合法性。人见他得趴在地上亲吻他的长袍。戴克里先讲版图划分为东西两部分后，他和一位朋友担任这两部份的主皇帝，再讲东西两部分细分选出两个副皇帝，这就是“四帝共治”。</p><br><p>按照戴克里先的想法，东西部皇帝都是有任期的，任期结束，主皇帝退位，副皇帝继位，然后再选新的副皇帝。理想是好的，但执行这些制度的还是人，人的欲望是无限的。他退位第二年内战又开始了。君士坦丁获得了胜利杀死了其他三个皇帝，将整个帝国再次统一，但四帝共治留下的分裂似乎难以愈合，几十年后，君士坦丁的继任者再次把皇位传给两个儿子，分别掌管东西两部，罗马帝国正式分裂成为西罗马帝国和东罗马帝国。</p><br><h1>信仰危机</h1><br><br><p>这节是基督教对于罗马帝国的影响。在基督教兴起之前，整个罗马帝国是信奉多神的，每个殖民地供奉的神都是不一样的，比如丰收神…，所以罗马帝国的神话系统特别庞大，罗马政府对宗教是宽容的，但是以政治忠诚为前提的。基督徒的越来越多，让罗马感受不到忠诚。基督教徒认为只有一个神，平等观念也导致皇帝与普通民众一样。盛世时代对现世生活的享乐，变成了对乱世下对来世的向往，越来越多的罗马公民在乱世中向往死后升入天堂，不愿意参军，财富没有回流进社会，大多用于祭拜活动，严重影响了社会经济体系的发展。</p><br><p>尽管和原有信仰产生很大冲突，但随着越来越多的人加入，帝国最终还是迫于压力拖鞋。公元313年，君士坦丁颁布《米兰敕令》，宣布基督教合法化。但后来基督教又出现了内部理论分歧，尽管皇帝都出来调停，但其内部派别纷争还是带来了社会动荡，国家很多精力都被消耗在解决这些争议上。</p><br><h1>西罗马帝国的灭亡</h1><br><br><p>公元330年，君士坦丁在帝国东部建立了整个罗马帝国的新首都，取名叫做“新罗马”。之所以迁都，是出于对当时处在危亡中整个罗马帝国形势的考量：外部，罗马帝国正遭受着北方蛮族的大举入侵，无论在规模还是势头上都非常强大；内部，则是为了从源头上解决政权的合法性问题。</p><br><p>戴克里先把自己封为最高君主，把权力神化，让权力的源头直接指向神，他之后的继任者包括君士坦丁也是这么做的，但罗马有太长的共和传统，是绝对君主专制的牵绊。比如，元老院曾经是罗马共和国时代的权力机构，形式上，皇帝想要做任何重大决定还是要和元老院商量的。如果想要摆脱这种传统的束缚，唯一的办法只有换一个地方，重新建一套班子，所以君士坦丁决定迁都。</p><br><p>迁都的目标，就选在希腊地区的一个小海港——拜占庭。这里既远离了蛮族进攻的主要风口，又远离了元老院的视线，更远离了罗马城几百年沿袭下来的军事官僚喋喋不休的争吵。手握大权、专横跋扈的近卫军被取消，元老院也完全变成了一个单纯的咨询机构，没有了实权，君士坦丁发布命令、管理国家的自由度大大提高。他引入了当时东方波斯帝国的很多君主专制礼仪，这时候罗马帝国的皇帝才真正称得上有绝对权力的皇帝。</p><br><p>随着君士坦丁向东迁都，整个罗马帝国的战略重心自然就发生了转移。在这种转移之下，东、西部的差异越来越大：君士坦丁堡的发展越来越快，而之前的罗马城却越来越衰落。一方面是由于整个罗马帝国的首都切换到了东部，所有资源都向东倾斜；另一方面，君士坦丁堡所处的位置本来就是一个天然的交通枢纽，它扼守着黑海和地中海的咽喉要道，又控制着丝绸之路东西方的商道，不仅易守难攻，并且贸易发达，所以之前在西部的大量贵族和精英阶层都开始向东移民，罗马城成了毫无发展希望的废城，最终西罗马帝国灭亡。</p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 罗马帝国衰亡史 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>罗马帝国衰亡史（2）</title>
      <link href="/2017/09/26/%E7%BD%97%E9%A9%AC%E5%B8%9D%E5%9B%BD%E8%A1%B0%E4%BA%A1%E5%8F%B2%EF%BC%882%EF%BC%89/"/>
      <url>/2017/09/26/%E7%BD%97%E9%A9%AC%E5%B8%9D%E5%9B%BD%E8%A1%B0%E4%BA%A1%E5%8F%B2%EF%BC%882%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>这篇博客主要对“三世纪危机”的过程和原因做一个读书笔记，从政治、经济、蛮族政策三个方面进行分析，《罗马帝国衰亡史》中这一卷完整描述了罗马帝国全面衰落的状况。<br><a id="more"></a></p><h1 id="无政府状态"><a href="#无政府状态" class="headerlink" title="无政府状态"></a>无政府状态</h1><p></p><p>这是三世纪危机最典型的一个特征，不断有人从地方起兵杀进罗马城，49年中，一共换了26位皇帝，大多是被地方夺权者所杀。这其中的原因由于随着罗马共和国向帝国转变，元首相对于元老院的力量对比大大上身，大家都想做元首，慢慢的元老院行省都变味元首行省，因为元首行省可以有军团，也就是有兵权。但罗马的制度并不能保证每任皇帝都是强势的人，中央对地方的控制力越来越低,最后造成地方的军事割据。再加上塞维鲁王朝实现的政策，使得军队失去了忠诚这个信仰，全是靠收买的。罗马城变成了野心家谋取私利的战场，帝国枕骨陷入混乱。</p><p></p><h1 id="货币贬值政策"><a href="#货币贬值政策" class="headerlink" title="货币贬值政策"></a>货币贬值政策</h1><p></p><p>之前说到，塞维鲁再改革期间，为了收买和讨好士兵，把军饷提高到之前的6-8倍。钱当然是从国库里抽，从各个行省搜刮，但问题是行省每年上缴的税收是维持在一个水平的，怎么能像军饷一样突然暴增？因此，只能靠不断挑起对外战争，用战利品充当军饷，但打仗还是需要钱，这就进入了死循环。卡拉卡拉普发公民权也导致了税收的降低，因为罗马人是不需要缴税的。三世纪危机期间，各个行省考武力夺权的皇帝仅仅是把皇位当作提款机，需要钱就把货币再次贬值，只做表面的数字游戏。武装夺权的过程本身又进一步扩充了军备，增加所在地区士兵的同时也减少了实际生产的人。在产出没有增加的情况下，提高货币的面额，让通货膨胀进一步恶化。很多地方也恢复到实物换实物的原始状态，整个罗马帝国陷入了全面的金融危机。</p><p></p><h1 id="蛮族政策"><a href="#蛮族政策" class="headerlink" title="蛮族政策"></a>蛮族政策</h1><p></p><p>罗马帝国最终被蛮族毁灭只是表面现象，根本原因在于长期的蛮族政策。是罗马人自己敞开了让蛮族涌入的大门。正如之前所说的，五贤帝时代是不允许蛮族进入罗马的，到末期一些蛮族也只被允许在帝国边境外定居，但不能入境。但是，罗马实行军事改革以后，为了扩大兵源，允许大量蛮族以雇佣兵的身份加入部队。这些人加入军队只是为了钱，无忠诚可言，也与罗马人的文化不同。但既然成为了罗马人，自然产生了政治诉求，也调起了反叛的大旗。</p><p></p><p><hr><br>整理于2017.9.26 20:12 南京回合肥的高铁上 </p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 罗马帝国衰亡史 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>胡子</title>
      <link href="/2017/09/25/%E8%83%A1%E5%AD%90/"/>
      <url>/2017/09/25/%E8%83%A1%E5%AD%90/</url>
      <content type="html"><![CDATA[<p>胡子是男性的第二特征，这倒也证明我确实是个男人。我还发现有些女生也会长胡子，不过她们都说是那是汗毛，比较重而已。我这么说可能会被打死。<br><a id="more"></a></p><p>俗话说，嘴上无毛，办事不牢。回头想了下，应该是高中就感觉到了有胡子，这么说来我靠谱的比较早。那会的胡子是软的，特别是下巴那片，毛绒绒的，很是奇怪。奇怪归奇怪，但整个高中生涯是没有动嘴边一根汗毛的，这可能跟我妈的教导有关。</p><br><p>可能是电视上看男人刮胡子的样子有些帅，难免有模仿的冲动。当我每次有这个冲动的时候，我妈都会告诉我：“胡子越刮越长，越刮越多，越刮长的越快，你看看那谁谁刮胡子脸上都长胡子了”。她觉得腮胡是刮出来的，我虽不认同但也放下了手中的刀。</p><br><p>并不是所有人都跟我一样能够抑制住这样的冲动，但他们也确信我妈说的那些道理，把注意力放在了“刮”这个字上。对，不刮就行。有人采取了拔，将胡子连根拔起，从根源扼制住；有人采用了剪，用剪刀的，用指甲钳的。但有一个共同点，你时常听到他们的惨叫，颇为悲惨，我忍住不笑并任由胡子漫长。</p><br><p>高考结束，我买了个剃须刀。确实看一些明星留着胡子颇显男子气概，但我还是能够认清自己。这是个看颜值的时代，不，一直以来都是，长的帅的留起胡子就man，长的丑的只能叫邋遢。之前还遇到一件事，我去我经常去的理发店剪头发，我认为理发师技术很不错，不然也不会定点。后来来了个小伙子，大约比我小个两三岁，他拿着他的手机，大概是跟理发师看个明星，就要剪这样的。我看着理发师很认真的给他剪，由于之前在理发店给朋友帮过忙，大概也知道他想要的是什么样的，也确信理发师尽了力。理发完成后，小伙子表现的极其不爽，认为剪的跟照片不一样。我内心是想笑的，但还是没有去拆穿他，理发师也没有。我仍然觉得本来的他会更好点。跑题了，说说刮完胡子的变化。</p><br><p>拿起了人生的第一个剃须刀，小心翼翼地用点触法消灭我的胡子，确认清除完毕照了下镜子。哇，这是个什么玩意！以为能年轻20岁，实则发现只是嘴上少了两条黑线。好在，学着明星帅气的摸着下巴，也能感受到一丝光滑。</p><br><p>这个剃须刀我一直用到现在，它倒是依然坚挺着。不过，从过去到现在，我临幸它的次数越来越频繁，一周一次，三天一次，两天一次，如今每天都离不开它，早上起来要是发现它不在，心中也倍感失落。或许它也在开心，毕竟我每天都要临幸它，也不知道它年纪大了，还经不经得起我的蹂躏，更不知道它还能支撑多久。</p><br><p>绒毛变成胡茬，我也是个20好几的人。每次别人问到年龄我都会告诉别人是95年的而不是直接说23。年龄这个东西有实虚一说，按照我家那边我应该是23了，有些地方是是按照实岁的，那样就能小一岁，还能多出来一年时间，我抱着这样的侥幸。</p><br><p>我看着胡子在生长，一天又一天，长出来就要被收割，至少在当天是一点不剩的。也好似现在的我们，每天都在重复，工作也好，生活也好。这样看来好像都没有任何意义，但我还是想说是有一点不同的，我们并不知道昨天的胡子长了多少，抑或是带着怎样的情感的长了出来，但我们是能够记住我们所重复的，我们所经历的情绪、事物或人，这就是意义。</p><br><p>2017.9.25 23:17</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>罗马帝国衰亡史（1）</title>
      <link href="/2017/09/24/%E7%BD%97%E9%A9%AC%E5%B8%9D%E5%9B%BD%E8%A1%B0%E4%BA%A1%E5%8F%B2%EF%BC%881%EF%BC%89/"/>
      <url>/2017/09/24/%E7%BD%97%E9%A9%AC%E5%B8%9D%E5%9B%BD%E8%A1%B0%E4%BA%A1%E5%8F%B2%EF%BC%881%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>本书是作者爱德华·吉本毕生智慧和研究成果的结晶。完整叙述了从罗马帝国“五贤帝时代”起至1453年君士坦丁堡沦陷的1300多年的历史，其中涉及到了政治、经济、军事、宗教、文化、和社会的方方面面。这一节说下五贤帝时代的产生与终结以及把罗马帝国引向深渊的赛维鲁王朝。<br><a id="more"></a></p><h1 id="罗马共和国到罗马帝国"><a href="#罗马共和国到罗马帝国" class="headerlink" title="罗马共和国到罗马帝国"></a>罗马共和国到罗马帝国</h1><p>早期，凯撒与屋大维处在罗马共和国向罗马帝国转变的过度时期，此时共和思想依然非常深厚。按照罗马共和国的传统，罗马的权利架构有公民大会（平民）、元老院（贵族）和执政官（干活的）相互制约，是一种平民政治、贵族政治和君主制的混合体。直到凯撒掌权，把自己任命为终身独裁官，共和制也走向解体。屋大维平定内乱，改组政府/建立了集军事、经济、宗教大权为一身的独裁政体“元首制”，他也被认为是罗马帝国第一任皇帝，被授予“奥古斯都”的称号。</p><h1 id="五贤帝时代起源与终结"><a href="#五贤帝时代起源与终结" class="headerlink" title="五贤帝时代起源与终结"></a>五贤帝时代起源与终结</h1><p>从公元96年到180年，相继有五位贤明的君主担任罗马帝国的皇帝，这些年间罗马在国力和民生上都取得了空前的发展。这得益于此时的皇位继承制度是任人唯贤德制度，即上一个皇帝生前就开始寻找、挖掘帝国内部有才干的人，收为养子后来继承王位。第一位皇帝为涅尔瓦，找到了当时有很高声望的图拉真，将其收为养子。这种制度保证了政权的平稳交接，也保证了下一任的皇帝才干得一施展，因此再接下来的80多年，密集出现了高水平的皇帝，迎来了五贤帝时代。</p><br><p>可是，最后一位皇帝马克·奥略流并没有坚持前四位皇帝的养子继承制，而是将皇位继承给了自己的亲儿子康茂德。康茂德从一开始就被内定为皇帝，但缺乏政治经验，再加上年少成名，遭到了家族中其他人的嫉妒。在一次刺杀风波后，康茂德对治理国家彻底失去了信心和兴趣，取而代之的是多疑与缺乏安全感，就觉得随时处在了危险之中。他开始任用近卫军，对不了解的将领滥杀无辜，敌视元老院，看你不爽就就杀你，整个帝国乌烟瘴气。把国事都交给近卫军长官去处理，出了事也让近卫军长官背锅。那近卫军当然不乐意啊，后来被近卫军合谋杀死。康茂德死后罗马帝国又开始陷入无休止的内乱，并且再也没有恢复过来，曾经的黄金时代终结。</p><h1 id="赛维鲁的军事改革"><a href="#赛维鲁的军事改革" class="headerlink" title="赛维鲁的军事改革"></a>赛维鲁的军事改革</h1><p>赛维鲁王朝的名字来源于王朝的创建者。由于赛维鲁腥风血雨的登位过程，这个王朝极其依赖于军事力量。康茂德被杀后，仅一年间，相继出现了五个人争夺皇位，史称“五帝之年”。赛维鲁首先结束了“五帝之年”，又花了两年把其他的争权者一个个击败，自己当了皇帝。正式由于皇位争夺的太过惨烈，让其深知军队的力量，加上他自己都怀疑政权的合法性，所以上来就开始军事改革。首先整改近卫军，毕竟康茂德就是被近卫军杀的，怕啊！还将夜间巡查队从之前的几百人增加到了7000人。其次，是从地方行省军团里抽取强悍的士兵，这也是很前所未有的。行省是在罗马的不断扩张中建立的一种行政单位，早期对于行省的管理是处于税收方面的考虑，并且这些地方都是靠武力拿下的。所以，罗马人从骨子里就有着优越感，虽然你行省是我罗马的，但你们可不是罗马人，行省人士不允许加入罗马军团的，更不能参加近卫军。赛维鲁这个举措与传统不符，更可怕的是招的人很多都是来自北方蛮族。</p><br><p>为了维护士兵的忠诚度，赛维鲁几乎动用了整个罗马帝国的国库给士兵发饷，和凯撒、屋大维时代相比几乎翻了6-8倍！钱从哪来？劫掠平民、搜刮百姓。士兵犯点小错也不处罚，因此也丢了整个军队纪律。在赛维鲁看来，军队是他统治的根基。还有一句他著名的话：塞满士兵的腰包，不要管其他人。这些改革的同时，近卫军长官的权势和地位提高到了一个空前的高度，还给予他们司法权、行政权，有的长官甚至有了自己的小法庭，简直可怕。以至于赛维鲁王朝结束后，军人阶层势力一步步扩大，大到可以废立皇帝！</p><h1 id="卡拉卡拉普发公民权"><a href="#卡拉卡拉普发公民权" class="headerlink" title="卡拉卡拉普发公民权"></a>卡拉卡拉普发公民权</h1><p>卡拉卡拉是老赛维鲁的儿子，也就是赛维鲁王朝的第二任皇帝。赛维鲁死后第二年，他颁布法令：给予所有在罗马帝国境内出生的自由人以完整的罗马公民权。之前说到，不是所有人都可以是罗马人的，血统不纯正！卡拉卡拉这么做是有自己的考虑的，一方面是赛维鲁的军事改革，让行省的人参了军，这是不合惯例的，这是身份问题冲突，另一方面，是个人原因，这父子两自己就不是罗马人，所以早就想给自己改头换面了。但是，卡拉卡拉真的卡了，没有顾及到整个体系因素之间的关联，更严重的是，之前公民权的限制是罗马人才能当皇帝，而现在理论上任何行省的人都可以做皇帝。这让地方军事长官们开始蠢蠢欲动，没过多久第一批反叛者就开始夺权。</p><br><hr><br><p>码字辛苦，今天先到这，下次再分享- -。</p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 罗马帝国衰亡史 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RHEL配置本地YUM源(使用镜像)</title>
      <link href="/2017/09/22/RHEL%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0YUM%E6%BA%90/"/>
      <url>/2017/09/22/RHEL%E9%85%8D%E7%BD%AE%E6%9C%AC%E5%9C%B0YUM%E6%BA%90/</url>
      <content type="html"><![CDATA[<p>RHEL6使用镜像文件配置本地yum源。</p><a id="more"></a><h1 id="挂载本地光盘到系统"><a href="#挂载本地光盘到系统" class="headerlink" title="挂载本地光盘到系统"></a>挂载本地光盘到系统</h1><p>这里使用的是虚拟机，点击右下角光盘图标，选择setting可选择需要挂在的镜像，在点击光盘的connecting即可挂载。</p><h1 id="配置本地YUM源"><a href="#配置本地YUM源" class="headerlink" title="配置本地YUM源"></a>配置本地YUM源</h1><pre><code class="bash">cd /etc/yum.repos.d/touch rhel-media.repovim rhel-media.repo</code></pre><h2 id="填写以下内容"><a href="#填写以下内容" class="headerlink" title="填写以下内容"></a>填写以下内容</h2><pre><code class="bash">[media]name=Red Hat Enterprise Linux 6.6                                baseurl=file:///media/RHEL...                                         enabled=1                                                         gpgcheck=1                                                        gpgkey=</code></pre><p>其中file://后面跟的是你的挂在位置，根据具体情况填入，一般在/media下的一个包，进入输入pwd把包路径获取下来，复制贴到这里。写完退出保存。</p><h2 id="清空原有缓存"><a href="#清空原有缓存" class="headerlink" title="清空原有缓存"></a>清空原有缓存</h2><pre><code class="bash">yum clean all</code></pre><p>结果如下：</p><pre><code class="bash">Loaded plugins: product-id, security, subscription-managerThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.Cleaning repos: mediaCleaning up Everything</code></pre><h2 id="验证yum配置是否成功"><a href="#验证yum配置是否成功" class="headerlink" title="验证yum配置是否成功"></a>验证yum配置是否成功</h2><pre><code class="bash">yum makecache</code></pre><p>结果如下：</p><pre><code class="bash">Loaded plugins: product-id, refresh-packagekit, security, subscription-managerThis system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.media                                                   | 4.1 kB     00:00 ... media/group_gz                                          | 211 kB     00:00 ... media/filelists_db                                      | 3.3 MB     00:00 ... media/primary_db                                        | 3.1 MB     00:00 ... media/other_db                                          | 1.4 MB     00:00 ... Metadata Cache Created</code></pre><p>P.S. file://后面的路径一定要对！</p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>转正风波</title>
      <link href="/2017/09/20/%E8%BD%AC%E6%AD%A3%E9%A3%8E%E6%B3%A2/"/>
      <url>/2017/09/20/%E8%BD%AC%E6%AD%A3%E9%A3%8E%E6%B3%A2/</url>
      <content type="html"><![CDATA[<p>2017.9.20 21:42</p><br><p>～～～～一波未平一波又起。这次转正可把我吓的不轻，倍感焦虑。</p><br><a id="more"></a><br><p>我们公司的转正是要走一定的流程的。首先，需要在网上申请转正考试，考试通过了才能进行答辩，答辩通过了才能转正。开始以为要到12月的，心里还是高兴的。</p><br><p>9月2号，我申请了转正考试。但由于阅卷人一直出差所以没有批。一直拖到了现在，导致在试题没有批完的情况下进行了答辩。答辩过程也是很恐怖，觉得表现的太差。当时转正考试是周六，一共只有三题，我做了很久，这里很感谢禹神的指点。尴尬的事情来了，答辩结束后，我的转正考试试题批完了，本来批完应该是要高兴的，但我高兴不起来，因为我有到题没过。巧妙的避开了出题人的意图，偷了一波懒。好了，考试都没过，答辩还有何用。</p><br><p>心中万匹恐龙乱撞，焦虑。准备二辨吧。</p><br><p>转机！在师傅的帮助下（具体帮助过程省略，总之难为师傅了- -），有了提交二次答案的机会，阅卷老师也很好，也给了我鼓励，联系了系统管理员让我通过。</p><br><p>现在就等着，答辩评审团批完就可以了。虽然有三位领导在出差无法批。。</p><br><p>没写太多东西，就是想记下来这件事，是真的感谢大家的帮助。</p>]]></content>
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>这次联谊</title>
      <link href="/2017/09/18/%E8%BF%99%E6%AC%A1%E8%81%94%E8%B0%8A/"/>
      <url>/2017/09/18/%E8%BF%99%E6%AC%A1%E8%81%94%E8%B0%8A/</url>
      <content type="html"><![CDATA[<p>2017.9.17 00:22起</p><br><p>之前的某一天，有人在mplus上发关于联谊的通知。考虑到周末的去处以及内心的好奇，我报了名。好在，这次的联谊还算有意思，或许应该多参与这些活动。</p><br><a id="more"></a><br><p>起初，并不知道是联谊相亲。报完名负责人询问关于身高、年龄、爱好等信息，我有点方，有考虑过临阵脱逃。程序员啊，想到我们这狭窄的圈子，还是去吧，我想认识更多的人。于是，到了今天，还特地做了些准备。</p><br><p>早上起来，与往常一样，洗漱、做早饭。不一样的是，潜意识下臭美照镜子，我不知道今天会遇到什么样的人，不知道自己的穿着是否得体，也没有将头发梳成大人模样。算是参与的一件事，不管怎样都应该重视。</p><br><p>9:28分到达指定地点，是要抽个号码牌，抽到了76号，找到座位坐下，看到了几张熟悉的面孔顿时显示的不那么尴尬。周围没有多少人。被告知，后面可能人数不够需要重新抽签不然略显尴尬，我听从安排，因为我喜欢这种随机性，也对不可预见的结果保持着好奇，我拿到了26号。</p><br><p>座位的安排是男女各一边，持有相同的号码。大致看了下，男女比例接近1:1，烽火主男性，华泰主女性。总人数分成四组，接下来的时间是游戏阶段，每组做不同的游戏，我们是第二组。看着第一组的做游戏的过程，我在思考如果是我在下面比划，是否也能放得开？不确定。难道脸皮变薄了？我这么认为（说这句的话时候，我可能把脸借给了吴彦祖）。我们组的游戏是“女生值1块，男生值5毛（相信我，当时肯定不是叫这个名字）”，主持人随机叫出金额，我们需要抱团，未抱团的则被淘汰。最终留下了两个男生和一个女生，我是其中一个男生，这是队友照顾的结果。这就算胜出了，于是被叫到了台上。</p><br><p>在台上当然就是自我介绍，说起自己的爱好想起了曾经放下的BBox，就不说处于什么原因放弃了，反正现在也跟初衷不一样。即兴来了一段，好在音还算准，鼓点还凑合，也打了我喜欢的bass。当然是有点紧张的，草草结束。也算“重操旧业”，好像也很久没在台上打过，我喜欢这感觉。</p><br><p>接下来是吃饭时间，我没有吃太多东西，不是放不开膀子吃，是真的吃不下太多。很多人在一起吃，很奇妙，多么热闹啊。吃饭的时候是离开桌子可以认识周围以外人的时间，我竟然没有做到，太不像我了，可能确实现在跟以前确实不同，我安静的玩着手机。</p><br><p>最后的阶段是比较有意思的，因为我记得我笑了好多次，互相“表白”阶段。当男女双方都写下了对方的号码，就能够都得到一盒月饼。个人认为，这是小概率事件，发生的可能性几乎无，但也饶有兴趣的听着主持人唱票，有些有趣的事情。先说说我右边的男生，他为了月饼去找女生配对，真的这么做了！导致后来主持人读到双方填写相同的号码时，我心里都想着：这是为了月饼！还有些事，像两个男生写的同一个女生，有人跟摄影师表白了，都觉得很有意思。在我在的时间里，被这些逗笑了好几次。后面肯定还有很多有趣的事，可是我不在，我是不愿意走的，但公司需要我，人民需要我，我要回去加班。略带遗憾，工作重要。</p><br><p>就这样结束了这次联谊，剩下的时间在公司度过。接下来的一天在公司待到23:03，周围漆黑一片，看着窗户的倒影稍有一点恐惧。</p><br><p>多充实！！&lt;/&gt;<br></p><p>2017.9.18 22:42</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>测试加密访问</title>
      <link href="/2017/09/13/testPassword/"/>
      <url>/2017/09/13/testPassword/</url>
      <content type="html"><![CDATA[<p>这是用来测试文章加密访问的。</p><a id="more"></a><p>这是用来测试文章加密访问的。<br>这是用来测试文章加密访问的。<br>这是用来测试文章加密访问的。<br>这是用来测试文章加密访问的。<br>这是用来测试文章加密访问的。</p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习实战系列</title>
      <link href="/2017/09/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97/"/>
      <url>/2017/09/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%E7%B3%BB%E5%88%97/</url>
      <content type="html"><![CDATA[<p>人生苦短，我用Python。</p><p>Python是门优雅的语言，在机器学习领域有着很高的造诣，虽然不太会，边写边学吧。</p><p>这一系列是我在学习《机器学习实战》这本书记的笔记，主要是代码，另外给这些代码加了些自己的注释，包括Python的api用法、某些科学计算库的用法、还有一些自己的理解。希望大家来指正，共同学习。</p><a id="more"></a><p>先说说这本书，这本书相对来说比较适合初学者。很多编程类书籍在读的时候很容易被某个地方卡住，经常不是缺这个就缺那个，书上还没有告诉你怎么处理，百度有时也找不到好的答案，这对于我这种咸鱼实在是不和善。对，这本书目前为止还没有出现过这个问题，因此我觉得它是适合的。</p><p>读这本书的时候，最大的感触是：难的不是语言，是数学。目前用到的像高数、线性代数、概率论还有信息论，我相信后面还有更多。可怕！抽自己一巴掌，大学学的都还差不多了！还有就是数学思想到编程思想的转化，比如我们利用某个数学模型来构建这个算法，真正写到程序里可能换一种方法，用的还是那个模型但需要找到合适的“替代品”来描述它，这对我来说也是比较难的。</p><p>于是我想给这些东西记下来，当自己能够去理解这些。这次先码四篇，后面学习的时候都会记录，之后再一并码上。</p><p>使用的环境为Anaconda,jupyter。很好用，jupyter很好上手。</p><p>数学真的要好好学！！！！！！！！！！！！！！！！！</p><p>这里是这一系列的地址：</p><p><a href="http://JohnneyAnn.github.io/2017/09/08/机器学习实战（四）朴素贝叶斯（NaivaBayes）/">机器学习实战（四）朴素贝叶斯（NaivaBayes）</a></p><p><a href="http://JohnneyAnn.github.io/2017/09/08/机器学习实战（三）决策树/">机器学习实战（三）决策树</a></p><p><a href="http://JohnneyAnn.github.io/2017/09/08/机器学习实战（二）k-近邻算法/">机器学习实战（二）k-近邻算法</a></p><p><a href="http://JohnneyAnn.github.io/2017/09/08/机器学习实战（一）NumPy函数库基础/">机器学习实战（一）NumPy函数库基础</a></p><p>学习使我感到快乐：）</p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo+Github搭建个人博客</title>
      <link href="/2017/09/09/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/09/09/Hexo+Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>经常遇到这样的问题，学习搭建一个新的环境，在网上查阅很多资料搭成功了，可是第二次搭全忘了还得重复之前的操作，于是决定养成记录的习惯。不光是记录自己的学习笔记，也想与别人分享一些东西，有个博客还是不错的。<br><a id="more"></a></p><p style="text-indent:2em">我用过几个用于记录的软件或网站，更多的是记录了一些学习笔记，像是印象笔记、CSDN、简书等。这个有一点不好，那终究还是别人的东西，写点学习笔记还行，有的时候自己想写点私人的东西就不是太合适，我想做一个个人博客。</p><br><p style="text-indent:2em">行啊，作为一个程序员那就干吧，不就是写一个博客嘛。干的过程中感受到现实的残酷（尴尬脸），苦于自己是后端程序员，界面做的丑的不能看，挣扎了许久遇到了HEXO。</p><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><p style="text-indent:2em">Hexo、jekyll、wordpress、jpress都是快速blog生成工具，我只用过hexo，就说说怎么搭建的（-. -我觉得HEXO还是比较好用的），大家倒可以挑自己喜欢的。</p><br><p style="text-indent:2em">第一次搭建的时候实在windows下搭建的（台式电脑），这导致了一个问题，更新博客得把我的电脑抱着走，因为本地仓库在那啊，后来就决定把博客迁移到服务器(因为迁移，所以博客的一些统计数据清零了)，这样只要有XShell到哪都能发博。所以这次所说的博客搭建是基于Ubuntu16.04x64系统搭建的，服务器是在阿里买的，当然腾讯也可以，一直喜欢用Ubuntu，而且阿里云会预装一些软件很方便。</p><br><p style="text-indent:2em">扯了这么多，步入正文吧。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装NodeJS"><a href="#安装NodeJS" class="headerlink" title="安装NodeJS"></a>安装NodeJS</h3><p>Hexo是基于Nodejs的，所以当然要装啦。使用apt-get 安装的nodejs版本过老，会导致安装hexo的时候出问题。<br>官方推荐的安装方法：</p><pre><code>curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -sudo apt-get install -y nodejs</code></pre><h3 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h3><p>待会要用它下载hexo</p><pre><code>sudo apt-get install npm</code></pre><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>一个功能强大的静态网站生成系统</p><pre><code>sudo npm install hexo-cli -g</code></pre><p>等待安装完成吧。</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="Github帐号"><a href="#Github帐号" class="headerlink" title="Github帐号"></a>Github帐号</h3><p>你这博客是要塞到Github上的，没账号可不行。自己百度注册吧。连接在此：<a href="https://github.com/" target="_blank" rel="external">Github</a>。</p><h3 id="在Github建一个远程仓库"><a href="#在Github建一个远程仓库" class="headerlink" title="在Github建一个远程仓库"></a>在Github建一个远程仓库</h3><p>你在本地编辑的博客需要部署到这个地方，当然，这里hexo会帮你一键部署，但你得给它一个仓库。<br>在你的Github主页点击New repository,到下面这个页面，填写仓库名字，这个不能乱填。<br><img src="/img/hexoblog/newRes.png" alt="新建仓库"><br>我的Github用户名叫JohnneyAnn，那就得取名JohnneyAnn.github.io，必须！</p><h3 id="给你的服务器安装git"><a href="#给你的服务器安装git" class="headerlink" title="给你的服务器安装git"></a>给你的服务器安装git</h3><p>首先，确认你的系统是否已安装git，可以通过git指令进行查看，如果没有，输入下面指令进行安装。</p><pre><code>sudo apt-get install git</code></pre><h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><p>安装完成后需要配置git，就是配置你的用户名还有邮箱（以我的为例）</p><pre><code>git config --global user.name &quot;JohnneyAnn&quot;git config --global user.eamil &quot;604718423@qq.com&quot;</code></pre><h3 id="创建公钥"><a href="#创建公钥" class="headerlink" title="创建公钥"></a>创建公钥</h3><p>配置完成后，需要创建验证用的公钥，因为git是通过ssh的方式访问资源库的，所以需要在本地创建验证用的文件。</p><pre><code>ssh-keygen -C &#39;604718423@qq.com&#39; -t rsa</code></pre><p>RSA是一种加密方式，执行这个命令后会在用户目录~/.ssh/下建立相应的密钥文件。这一步创建会让你填入两次信息，不用管直接回车。</p><h3 id="上传公钥"><a href="#上传公钥" class="headerlink" title="上传公钥"></a>上传公钥</h3><p>创建完成了，你得让github知道啊。<br>进入公钥文件夹：</p><pre><code>cd ~/.ssh</code></pre><p>使用cat命令查看公钥：</p><pre><code>cat id_rsa.pub</code></pre><p>把这个文件所有的内容复制，接着去github，进入个人主页点击Edit profile之后点击SSH and GPG keys<br><img src="/img/hexoblog/sshkeys.png" alt="上传公钥"><br>点击New SSH key，名字随便去，然后把你复制的内容填进去报错就行了。</p><h3 id="测试是否连通"><a href="#测试是否连通" class="headerlink" title="测试是否连通"></a>测试是否连通</h3><pre><code>ssh -T git@github.com</code></pre><p>出现下面这个就ok了。<br><img src="/img/hexoblog/testssh.png" alt="测试SSH"><br>我这不是第一次，所以只有一行，第一次应该有三行提示，反正出现“Hi 你的名字！”就行了。</p><h2 id="开始hexo吧"><a href="#开始hexo吧" class="headerlink" title="开始hexo吧"></a>开始hexo吧</h2><h3 id="新建一个博客"><a href="#新建一个博客" class="headerlink" title="新建一个博客"></a>新建一个博客</h3><p>选一个文件夹吧，我去的是/home文件夹下</p><pre><code>cd /homehexo init myBlog</code></pre><p>hexo init myBlog就是新建一个博客，myBlog是你本地博客的文件夹名，可以随便取名，之后会去下载所需的东西。<br>下载完成后进入myblog文件夹：</p><pre><code>cd blog</code></pre><p>文件夹结构如下，简单说下主要文件：<br><img src="/img/hexoblog/file.png" alt="文件结构"><br>_config.yml文件是主要的配置文件，就是你网站的一些信息以及部署的仓库。文件底部可配置要部署的仓库：<br><img src="/img/hexoblog/hexoconfig2.png" alt="文件结构"><br>themes文件夹存放是的是博客主题样式，在知乎上看到一些，可在这里选择<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">知乎:有哪些好看的 Hexo 主题？</a>。我选的是hexo-theme-spfk，去github上下载下来，放到themes文件夹下即可，你可以选择你喜欢的主题。<br>每个主题的文件夹下也有一个_config.yml配置文件，配置页面的，具体的配置以后有空会单独写一篇博客。</p><h3 id="编译博客"><a href="#编译博客" class="headerlink" title="编译博客"></a>编译博客</h3><p>可以看到，hexo生成的文件夹离得内容并不是html，所以我们需要编译它（可简写为 hexo g）：</p><pre><code>cd /homehexo generate</code></pre><h3 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h3><p>根据_config.yml最后面的配置将博客部署到github上，只要你配置好了hexo会帮你一键部署。<br>部署之前需要安装hexo-deployer-Git（不然会出现ERROR Deployer not found: git）。<br>安装：hexo-deployer-Git</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>好了可以部署了（可简写为 hexo d）：</p><pre><code>hexo deploy</code></pre><p>当然你可以将编译和部署一起来（生成并发布）：</p><pre><code>hexo generate -d</code></pre><p>部署完成后在浏览器输入JohnneyAnn.github.io（输入你实际的名字）即可访问你的博客，当然还是希望你能给先配置你自己的网站，填写这些配置很简单在网上都能够找到方法，后期我会具体写一下，今天这里有点多了。另外，大家肯定不愿意输入这个网址进入自己的博客，所以后面还会告诉大家如何将自己的域名解析到这个地址以及相关的配置，慢慢来。</p><h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>你肯定想修改后先看看效果再部署把（可简写为 hexo s）:</p><pre><code>hexo server</code></pre><p>之后在浏览器输入，IP:4000就可以访问了（IP是你服务器的实际ip）。<br>crtl+c终止预览。</p><h3 id="其他（MarkDown）"><a href="#其他（MarkDown）" class="headerlink" title="其他（MarkDown）"></a>其他（MarkDown）</h3><p>Hexo里面的博客都是使用markdown语法的，其实也是个文本文件，后缀名为.md，它是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，所以使用它来生成html很方便，语法也很简单，这里提供一个链接可以学习一下：<a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="external">简书:献给写作者的 Markdown 新手指南</a>。MarkDown用一般的文本编辑器就可以编写，如果想一边写一边预览，可以尝试下MarkdownPad 2这个软件。</p><p><hr><br>哇，写了这么多，好累啊，下面有打赏(害羞脸)。<br>推荐阅读：<a href="http://JohnneyAnn.github.io/2017/09/08/WhatHappenedOnTheRoadOfHeifei/">生活:回合肥路上发生的事</a></p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习实战（四）朴素贝叶斯（NaivaBayes）</title>
      <link href="/2017/09/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E5%9B%9B%EF%BC%89%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%EF%BC%88NaivaBayes%EF%BC%89/"/>
      <url>/2017/09/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E5%9B%9B%EF%BC%89%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%EF%BC%88NaivaBayes%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>基于概率论的分类方法：朴素贝叶斯。（条件概率）</p><p>朴素贝叶斯：朴素贝叶斯是一种简单但是非常强大的线性分类器。它在垃圾邮件分类，疾病诊断中都取得了很大的成功。它只所以称为朴素，是因为它假设特征之间是相互独立的，但是在现实生活中，这种假设基本上是不成立的。那么即使是在假设不成立的条件下，它依然表现的很好，尤其是在小规模样本的情况下。但是，如果每个特征之间有很强的关联性和非线性的分类问题会导致朴素贝叶斯模型有很差的分类效果。</p><a id="more"></a><pre><code class="python">&quot;&quot;&quot;数据集&quot;&quot;&quot;from numpy import *def loadDataSet():    postingList=[[&#39;my&#39;, &#39;dog&#39;, &#39;has&#39;, &#39;flea&#39;, &#39;problems&#39;, &#39;help&#39;, &#39;please&#39;],                 [&#39;maybe&#39;, &#39;not&#39;, &#39;take&#39;, &#39;him&#39;, &#39;to&#39;, &#39;dog&#39;, &#39;park&#39;, &#39;stupid&#39;],                 [&#39;my&#39;, &#39;dalmation&#39;, &#39;is&#39;, &#39;so&#39;, &#39;cute&#39;, &#39;I&#39;, &#39;love&#39;, &#39;him&#39;],                 [&#39;stop&#39;, &#39;posting&#39;, &#39;stupid&#39;, &#39;worthless&#39;, &#39;garbage&#39;],                 [&#39;mr&#39;, &#39;licks&#39;, &#39;ate&#39;, &#39;my&#39;, &#39;steak&#39;, &#39;how&#39;, &#39;to&#39;, &#39;stop&#39;, &#39;him&#39;],                 [&#39;quit&#39;, &#39;buying&#39;, &#39;worthless&#39;, &#39;dog&#39;, &#39;food&#39;, &#39;stupid&#39;]]    # 0代表正常言论，1代表侮辱性    classVec = [0,1,0,1,0,1]    return postingList,classVecdef createVocabList(dataSet):    #创建一个空集    vocabSet = set([])    #将文档中的词存放到set，不重复    for document in dataSet:        #创建两个集合的并集        vocabSet = vocabSet | set(document)    return list(vocabSet)&quot;&quot;&quot;词集模型(set-of-words) 每个词出现一次&quot;&quot;&quot;def setOfWords2Vec(vocabList, inputSet):    # 创建一个其中所含袁术都为0的向量    returnVec = [0]*len(vocabList)    for word in inputSet:        if word in vocabList:            # 若存在就记为1            returnVec[vocabList.index(word)] = 1        else:            print &quot;the word: %s is not in my vocabulary!&quot; % word    return returnVec&quot;&quot;&quot;词袋模型(bag-of-words model) 每个词出现多次&quot;&quot;&quot;def bagOfWords2VecMN(vocabList, inputSet):    returnVec = [0]*len(vocabList)    for word in inputSet:        # 每当遇到一个单词 就会增加词向量中的对应值，而不是设为1        if word in vocabList:            returnVec[vocabList.index(word)] += 1    return returnVec&quot;&quot;&quot;朴素贝叶斯分类器训练函数trainMatrix:文档矩阵trainCategory:由每篇文档类别标签所构成的向量&quot;&quot;&quot;def trainNB0(trainMatrix,trainCategory):    #print trainMatrix    #print trainCategory    #有多少个文件    numTrainDocs = len(trainMatrix)    #print numTrainDocs    #获取训练词有多少个    numWords = len(trainMatrix[0])    # 统计trainCategory中1的个数，因为里面只有1,0    #文档概率    pAbusive = sum(trainCategory)/float(numTrainDocs)    # 初始化概率    p0Num = ones(numWords)#修改前：zeros(numWords) 构造0矩阵，所有的值都为0    p1Num = ones(numWords)#修改前：zeros(numWords)    p0Denom = 2.0 #分母 修改前：0.0    p1Denom = 2.0 #修改前：0.0    #遍历训练集trainMatrix中所有文档，一旦某个词在某一文档中出现，对应个数(p1Num侮辱性/p0Num正常)就+1     #-而且在所有文档中，该文档的总词数也相应+1 ? 统计总侮辱性次数    #print numTrainDocs    for i in range(numTrainDocs):        if trainCategory[i] == 1:            #向量相加            p1Num += trainMatrix[i]            p1Denom += sum(trainMatrix[i]) # 总侮辱性词数          else:            p0Num += trainMatrix[i]            p0Denom += sum(trainMatrix[i])    #对每个元素做除法    # 修改后：对乘积去自然对数，防止因大部分因子非常小导致程序下溢出，最终得到0    # f(x)与ln(f(x))在相同区域同时增加或减少，也在相同点上取到极值，因此虽然他们取值不同，但不影响最终结果    # ln(a*b)=ln(a)+ln(b)    p1Vect = log(p1Num/p1Denom) #修改前p1Num/p1Denom  某个词占总侮辱性词的概率的对数    p0Vect = log(p0Num/p0Denom) #修改前p0Num/p0Denom    return p0Vect,p1Vect,pAbusive&quot;&quot;&quot;朴素贝叶斯分类函数&quot;&quot;&quot;&quot;&quot;&quot;vec2Classify:待分类的向量p0Vec, p1Vec, pClass1:使用trainNB0计算得到的3个概率&quot;&quot;&quot;def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):    #print vec2Classify    # 元素相乘,numpy的数组计算链两个向量相乘，这里的相乘是对应元素相乘    #先将两个向量第一个元素相乘，然后将第二个元素相乘 ...    #再将词汇表中所有的词对应值相加，再将该值加到类别的对数概率上    p1 = sum(vec2Classify * p1Vec) + log(pClass1)    p0 = sum(vec2Classify * p0Vec) + log(1.0-pClass1)    if p1 &gt; p0:        return 1    else:        return 0def testingNB():    listOPosts,listClasses = loadDataSet()    myVocabList = createVocabList(listOPosts)    trainMat=[]    for postinDoc in listOPosts:        trainMat.append(setOfWords2Vec(myVocabList, postinDoc))    p0V,p1V,pAb = trainNB0(array(trainMat),array(listClasses))    testEntry = [&#39;love&#39;, &#39;my&#39;, &#39;dalmation&#39;]    thisDoc = array(setOfWords2Vec(myVocabList, testEntry))    print testEntry,&#39;Classified as: &#39;,classifyNB(thisDoc,p0V,p1V,pAb)    testEntry = [&#39;stupid&#39;,&#39;garbage&#39;]    thisDoc = array(setOfWords2Vec(myVocabList, testEntry))    print testEntry,&#39;Classified as: &#39;,classifyNB(thisDoc,p0V,p1V,pAb)</code></pre><pre><code class="python">&quot;&quot;&quot;测试训练函数&quot;&quot;&quot;#从预先加载值中调入数据listOPosts,listClasses=loadDataSet()#构建一个包含所有词列表的myVocabListmyVocabList = createVocabList(listOPosts)#print myVocabList#使用词向量来填充trainMat列表trainMat = []for postinDoc in listOPosts:    trainMat.append(setOfWords2Vec(myVocabList,postinDoc))    #print postinDoc#print trainMat#print listClasses#给出属于侮辱性文档的概率以及两个类别的概率向量p0V,p1V,pAb=trainNB0(trainMat,listClasses)p0V</code></pre><pre><code>array([-2.56494936, -2.56494936, -2.56494936, -3.25809654, -3.25809654,       -2.56494936, -2.56494936, -2.56494936, -3.25809654, -2.56494936,       -2.56494936, -2.56494936, -2.56494936, -3.25809654, -3.25809654,       -2.15948425, -3.25809654, -3.25809654, -2.56494936, -3.25809654,       -2.56494936, -2.56494936, -3.25809654, -2.56494936, -2.56494936,       -2.56494936, -3.25809654, -2.56494936, -3.25809654, -2.56494936,       -2.56494936, -1.87180218])</code></pre><pre><code class="python">&quot;&quot;&quot;测试朴素贝叶斯分类器&quot;&quot;&quot;testingNB()</code></pre><pre><code>[&#39;love&#39;, &#39;my&#39;, &#39;dalmation&#39;] Classified as:  0[&#39;stupid&#39;, &#39;garbage&#39;] Classified as:  1</code></pre><pre><code class="python">&quot;&quot;&quot;文本解析&quot;&quot;&quot;import re#除单词、数字外的任意字符串regEx = re.compile(&#39;\\W*&#39;)mySent = &#39;This book is the best book on Python or M.L. I have ever laid wtes upon.&#39;listOfTokens = regEx.split(mySent)# 去除空字符串[tok for tok in listOfTokens if len(tok) &gt; 0]#全装成小写[tok.lower() for tok in listOfTokens if len(tok)] #读取文本文件emailText = open(&#39;F:\\study\\email\\ham\\6.txt&#39;).read()listOfTokens=regEx.split(emailText)</code></pre><pre><code class="python">&quot;&quot;&quot;使用朴素贝叶斯进行交叉验证文本解析及完整的垃圾邮件测试函数&quot;&quot;&quot;def textParse(bigString):    import re    &quot;&quot;&quot;    分割从文本在读取的串    &quot;&quot;&quot;    #拆分    listOfTokens = re.split(r&#39;\w&#39;, bigString)    #长度&gt;2  全转化成小写    return [tok.lower() for tok in listOfTokens if len(tok) &gt; 2]def spamTest():    docList = [];classList = [];fullText = []    #导入并解析文件    #读取文件，设置类别spam(垃圾邮件) 1 ham 0    for i in range(1,26):        wordList = textParse(open(&#39;F:\\study\\email\\spam\\%d.txt&#39; % i).read())        docList.append(wordList)        fullText.extend(wordList)        classList.append(1)        wordList = textParse(open(&#39;F:\\study\\email\\ham\\%d.txt&#39; % i).read())        docList.append(wordList)        fullText.extend(wordList)        classList.append(0)    #创建无重复的词集    vocabList = createVocabList(docList)    trainingSet = range(50);    testSet = []    #随机构建训练集    for i in range(10):        #random.uniform(x,y)随机生成下一个实数，范围[x,)        #是否会重复？（即使每次的len(trainingSet)不一样）        randIndex = int(random.uniform(0,len(trainingSet)))        #将选取的文档编号添加到测试集        testSet.append(trainingSet[randIndex])        #并将其从训练集删除        del(trainingSet[randIndex])    trainMat = []    trainClasses = []    for docIndex in trainingSet:        #创建词集模型，若docList[docIndex]在vocabList中出现，则记1        #并将得到的矩阵添加到trainMat        trainMat.append(setOfWords2Vec(vocabList, docList[docIndex]))        #将对应的分类添加到trainClasses        trainClasses.append(classList[docIndex])    #调用trainNBO获取到对应的概率向量 pSpam：训练样本中，垃圾邮件占总邮件的概率    #trainNB0(trainMat, trainClasses)    p0V,p1V,pSpam = trainNB0(array(trainMat), array(trainClasses))    errorCount = 0    for docIndex in testSet:        #创建测试集        wordVector = setOfWords2Vec(vocabList, docList[docIndex])        #进行分类，并将分类结果与正式分类结果比较，错误则错误数+1        #print classifyNB(array(wordVector), p0V, p1V, pSpam),classList[docIndex]        if classifyNB(array(wordVector), p0V, p1V, pSpam) != classList[docIndex]:            errorCount += 1    print &#39;the error rate is: &#39;,float(errorCount)/len(testSet)</code></pre><pre><code class="python">&quot;&quot;&quot;使用朴素贝叶斯进行交叉验证，测试垃圾邮件分类器&quot;&quot;&quot;spamTest();</code></pre><pre><code>the error rate is:  0.1</code></pre><pre><code class="python">#4.7节 使用朴素贝叶斯分类器从个人广告中获取区域倾向#目前在内网环境，暂时先放着</code></pre>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习实战（三）决策树</title>
      <link href="/2017/09/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%89%EF%BC%89%E5%86%B3%E7%AD%96%E6%A0%91/"/>
      <url>/2017/09/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%89%EF%BC%89%E5%86%B3%E7%AD%96%E6%A0%91/</url>
      <content type="html"><![CDATA[<p>决策树是一种简单高效并且具有强解释性的模型，广泛应用于数据分析领域。其本质是一颗由多个判断节点组成的树，在使用模型进行预测时，根据输入参数依次在各个判断节点进行判断游走，最后到叶子节点即为预测结果。<br><a id="more"></a></p><pre><code class="python">&quot;&quot;&quot;文件trees&quot;&quot;&quot;from math import logimport operator%matplotlib inline #这一句设置在线显示&quot;&quot;&quot;创建数据集&quot;&quot;&quot;def createDataSet():    dataSet = [[1, 1, &#39;yes&#39;],              [1, 1, &#39;yes&#39;],              [1, 0, &#39;no&#39;],              [0, 1, &#39;no&#39;],              [0, 1, &#39;no&#39;]]    labels = [&#39;no surfacing&#39;,&#39;flippers&#39;]    return dataSet, labels&quot;&quot;&quot;计算给定数据集的信息熵(香农)&quot;&quot;&quot;def calcuShannonEnt(dataSet):    numEntries = len(dataSet)    labelCounts = {}    &quot;&quot;&quot;    为所有可能分能创建字典    &quot;&quot;&quot;    for featVec in dataSet:        currentLabel = featVec[-1]        #方法1        #   if currentLabel not in labelCounts.keys():        #        labelCounts[currentLabel] = 0        #   labelCounts[currentLabel] += 1        #方法2        labelCounts[currentLabel] = labelCounts.get(currentLabel,0) + 1    shannonEnt = 0.0    for key in labelCounts:        &quot;&quot;&quot;        每个类别所占的比        &quot;&quot;&quot;        prob = float(labelCounts[key])/numEntries        &quot;&quot;&quot;        求对数        &quot;&quot;&quot;        shannonEnt -= prob * log(prob,2)    return shannonEnt&quot;&quot;&quot;按照给定特征划分数据集三个参数：待划分的数据集、划分数据集的特征、特征的返回值&quot;&quot;&quot;def splitDataSet(dataSet, axis, value):    &quot;&quot;&quot;    创建新的list对象    &quot;&quot;&quot;    &quot;&quot;&quot;    理解：按axis这列来划分，若这列的数=value归到一类，并创建一个新列表返回    &quot;&quot;&quot;    retDataSet = []    for featVec in dataSet:        if featVec[axis] == value:            &quot;&quot;&quot;            抽取            &quot;&quot;&quot;            # 应该是清空列表            reducedFeatVec = featVec[:axis]             # [0+1:]取下标1之后的，这里是取后两位，将元素塞入reducedFeatVec            reducedFeatVec.extend(featVec[axis+1:])             #将reducedFeatVec列表塞入retDataSet            retDataSet.append(reducedFeatVec)    return retDataSet    &quot;&quot;&quot;    选择最好的数据集划分方式    此处使用ID3算法，获取信息增益最大的    &quot;&quot;&quot;def chooseBestFeatureToSplit(dataSet):    #dataSet[0]列数    #只用前两列进行分类 -1    numFeatures = len(dataSet[0]) - 1    baseEntropy = calcuShannonEnt(dataSet)    #信息增益    bestInfoGain = 0.0    bestFeature = -1    for i in range(numFeatures):        &quot;&quot;&quot;        创建唯一的分类标签列表        &quot;&quot;&quot;        featList = [example[i] for example in dataSet]        uniqueVals = set(featList)# 创建集合        newEntropy = 0.0        &quot;&quot;&quot;        计算每种划分方式的信息熵        第一列或第二列的划分方式 表3-1 将其他两列分类        &quot;&quot;&quot;        for value in uniqueVals:            subDataSet = splitDataSet(dataSet, i, value)            prob = len(subDataSet)/float(len(dataSet))            &quot;&quot;&quot;            将分完的两个类分别计算信息熵，乘以每个分类所出现的概率，相加后得到新的熵            &quot;&quot;&quot;            newEntropy += prob * calcuShannonEnt(subDataSet)        &quot;&quot;&quot;        判断信息增益是否大于0        &quot;&quot;&quot;        infoGain = baseEntropy - newEntropy        if(infoGain &gt; bestInfoGain):            &quot;&quot;&quot;            计算最好的信息增益            &quot;&quot;&quot;            bestInfoGain = infoGain            #  i为列数，对应表3-1            bestFeature = i    return bestFeature&quot;&quot;&quot;类似于投票表决的方法,挑选次数出现最多的类别&quot;&quot;&quot;def majorityCnt(classList):    classCount={}    for vote in classList:        if vote not in classCount.key():            classCount[vote] = 0        classCount[vote] += 1    sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True)    return sortedClassCount[0][0]&quot;&quot;&quot;创建树的代码&quot;&quot;&quot;def createTree(dataSet,labels):    # 把dataSet最后一列放到classList    classList = [example[-1] for example in dataSet]    #     print classList    &quot;&quot;&quot;    类别完全相同则停止继续划分    &quot;&quot;&quot;    #     对classList第一个元素进行统计，如果与总长度相同，表示只有一个分类    if classList.count(classList[0]) == len(classList):        return classList[0]    &quot;&quot;&quot;    遍历完所有特征时返回出现次数最多的    &quot;&quot;&quot;    #     只剩最后一项的时候，按较多的    #     print dataSet[0]    #     计算dataSet第一个元素的长度    if len(dataSet[0]) == 1:        return majorityCnt(classList)    #     获取到最佳特征    bestFeat = chooseBestFeatureToSplit(dataSet)    bestFeatLabel = labels[bestFeat]    myTree = {bestFeatLabel:{}}    &quot;&quot;&quot;    得到列表包含的所有属性值    &quot;&quot;&quot;    # 从标签里删除最佳特征标签    del(labels[bestFeat])    #将dataSet每个元素的第一列拿出    featValues = [example[bestFeat] for example in dataSet]    #使用set无重复的存入uniqueVals    uniqueVals = set(featValues)    for value in uniqueVals:    #将标签复制一份，保证每次调用函数时不改变原始列表的内容，使用新变量代替原始列表        subLabels = labels[:]        #splitDataSet按当前分类方式进行分类，并将其他项作为新列表返回        myTree[bestFeatLabel][value] = createTree(splitDataSet(dataSet, bestFeat, value),subLabels)    return myTree&quot;&quot;&quot;使用决策树的分类函数&quot;&quot;&quot;def classify(inputTree,featLabels,testVec):    firstStr = inputTree.keys()[0]    secondDict = inputTree[firstStr]    #将标签字符串转换成索引    featIndex = featLabels.index(firstStr)#     for key in secondDict.keys():#         if testVec[featIndex] == key:#             classLabel = classify(secondDict[key],featLabels,testVec)#         else:#             classLabel = secondDict[key]    #下面是源码中的内容 可以运行    key = testVec[featIndex]    valueOfFeat = secondDict[key]    if isinstance(valueOfFeat, dict):         # 非叶子节点继续递归判断        classLabel = classify(valueOfFeat, featLabels, testVec)    else: classLabel = valueOfFeat    return classLabel&quot;&quot;&quot;决策树的存储，每次调用使用已经构造好的决策树，节省时间&quot;&quot;&quot;&quot;&quot;&quot;使用pickle模块存储决策树&quot;&quot;&quot;def storeTree(inputTree,filename):    import pickle    fw = open(filename,&#39;w&#39;)    #将对象保存到文件中    pickle.dump(inputTree,fw)    fw.close()def grabTree(filename):    import pickle    fr = open(filename)    #从文件中读取    return pickle.load(fr)</code></pre><pre><code class="python">&quot;&quot;&quot;测试决策树分类函数&quot;&quot;&quot;myDat,labels=createDataSet()myTree=retrieveTree(0)classify(myTree,labels,[1,1])</code></pre><pre><code>&#39;yes&#39;</code></pre><pre><code class="python">&quot;&quot;&quot;测试存储效果&quot;&quot;&quot;myTree=retrieveTree(0)storeTree(myTree,&#39;classfierStorage.txt&#39;)grabTree(&#39;classfierStorage.txt&#39;)</code></pre><pre><code>{&#39;no surfacing&#39;: {0: &#39;no&#39;, 1: {&#39;flippers&#39;: {0: &#39;no&#39;, 1: &#39;yes&#39;}}}}</code></pre><pre><code class="python">&quot;&quot;&quot;生成决策树字典&quot;&quot;&quot;myData,labels = createDataSet()myTree = createTree(myData,labels)myTree</code></pre><pre><code>{&#39;no surfacing&#39;: {0: &#39;no&#39;, 1: {&#39;flippers&#39;: {0: &#39;no&#39;, 1: &#39;yes&#39;}}}}</code></pre><pre><code class="python">&quot;&quot;&quot;测试选择最好的数据集划分方式&quot;&quot;&quot;myData,labels = createDataSet()chooseBestFeatureToSplit(myData)</code></pre><pre><code>0</code></pre><pre><code class="python">&quot;&quot;&quot;测试使用创建的数据集计算信息熵&quot;&quot;&quot;myData,labels = createDataSet()#增加分类熵变大myData[0][-1]=&#39;maybe&#39;calcuShannonEnt(myData)</code></pre><pre><code>1.3709505944546687</code></pre><pre><code class="python">&quot;&quot;&quot;测试划分数据集&quot;&quot;&quot;myData,labels = createDataSet()splitDataSet(myData,0,1)</code></pre><pre><code>[[1, &#39;yes&#39;], [1, &#39;yes&#39;], [0, &#39;no&#39;]]</code></pre><pre><code class="python">&quot;&quot;&quot;文件treePlotter&quot;&quot;&quot;&quot;&quot;&quot;使用matplot文本注解回执树节点&quot;&quot;&quot;import matplotlib.pyplot as plt&quot;&quot;&quot;定义文本框和箭头格式&quot;&quot;&quot;decisionNode = dict(boxstyle=&quot;sawtooth&quot;, fc=&quot;0.8&quot;)leafNode = dict(boxstyle=&quot;round4&quot;, fc=&quot;0.8&quot;)arrow_args = dict(arrowstyle=&quot;&lt;-&quot;)&quot;&quot;&quot;绘制带箭头的注解&quot;&quot;&quot;def plotNode(nodeTxt, centerPt, parentPt, nodeType):    createPlot.ax1.annotate(nodeTxt, xy=parentPt, xycoords=&#39;axes fraction&#39;, \                           xytext=centerPt, textcoords=&#39;axes fraction&#39;, \                            va=&quot;center&quot;, ha=&quot;center&quot;, bbox=nodeType, arrowprops=arrow_args)def createPlot1():    fig = plt.figure(1, facecolor=&#39;white&#39;)    fig.clf()    createPlot.ax1 = plt.subplot(111, frameon=False)    #decisionNode leafNode 是节点类型，不同节点类型样式不一样 包围文字的box不一样    plotNode(&#39;a decision node&#39;, (0.5, 0.1), (0.1, 0.5), decisionNode)    plotNode(&#39;a leaf node&#39;, (0.8, 0.1), (0.3, 0.8), leafNode)    plt.show()&quot;&quot;&quot;画一个完整的树，我们需要知道有多少个叶节点（确定x）,树有多少层（确定y）&quot;&quot;&quot;#获取叶节点的数目def getNumLeafs(myTree):    numLeafs = 0    #获取第一个键    #树的第一层一定只有一个节点    firstStr = myTree.keys()[0]    #获取第一个键所对应的值    secondDict = myTree[firstStr]    for key in secondDict.keys():        #判断节点数据（键的值）类型是否为字典        if type(secondDict[key]).__name__==&#39;dict&#39;:            numLeafs += getNumLeafs(secondDict[key])        else:            numLeafs += 1    return numLeafs#获取树的层数def getTreeDepth(myTree):    maxDepth = 0    firstStr = myTree.keys()[0]    secondDict = myTree[firstStr]    for key in secondDict.keys():        if type(secondDict[key]).__name__==&#39;dict&#39;:            thisDepth = 1 + getTreeDepth(secondDict[key])        else:            thisDepth = 1        if thisDepth &gt; maxDepth : maxDepth = thisDepth    return maxDepth#预先存储下树的信息，避免每次测试都需要创建树，为了节约练习的时间def retrieveTree(i):    listOfTrees = [{&#39;no surfacing&#39;:                    {0:&#39;no&#39;,                     1:{&#39;flippers&#39;:                        {0:&#39;no&#39;,1:&#39;yes&#39;}}}},                  {&#39;no surfacing&#39;:                   {0:&#39;no&#39;,1:{&#39;flippers&#39;:                     {0:                      {&#39;head&#39;:                       {0:&#39;no&#39;,1:&#39;yes&#39;},1:&#39;no&#39;}}}}}]    return listOfTrees[i]&quot;&quot;&quot;在父子节点间填充文本信息&quot;&quot;&quot;def plotMidText(cntrPt, parentPt, txtString):    #计算文本信息的位置    #① 0.5 1    xMid = (parentPt[0] - cntrPt[0])/2.0 + cntrPt[0]    yMid = (parentPt[1] - cntrPt[1])/2.0 + cntrPt[1]    createPlot.ax1.text(xMid, yMid, txtString)def plotTree(myTree, parentPt, nodeTxt):    #计算宽与高    numLeafs = getNumLeafs(myTree)    depth = getTreeDepth(myTree)    #获取根节点    firstStr = myTree.keys()[0]    cntrPt = (plotTree.xOff + (1.0 + float(numLeafs))/2.0/plotTree.totalW, plotTree.yOff)    #① (0.5,1)  (0.5,1)  &quot;&quot;    # 在父子节点之间添加文本信息    plotMidText(cntrPt, parentPt, nodeTxt)    #画节点: 节点内容 子节点坐标  父节点坐标  节点类型    plotNode(firstStr, cntrPt, parentPt, decisionNode)    # 第二层     secondDict = myTree[firstStr]    # 修改y偏移量 1-1/2  有坐标范围0-1 这里从上到下绘制因此依次递减    plotTree.yOff = plotTree.yOff - 1.0/plotTree.totalD    # 判断第二层节点下的节点是否为叶子节点    for key in secondDict.keys():        #不是叶子节点  递归执行        if type(secondDict[key]).__name__==&#39;dict&#39;:            plotTree(secondDict[key],cntrPt,str(key))        #如果是叶子节点        else:            #计算x的偏移量 -1/8+1/4            plotTree.xOff = plotTree.xOff + 1.0/plotTree.totalW            plotNode(secondDict[key], (plotTree.xOff,plotTree.yOff), cntrPt, leafNode)            plotMidText((plotTree.xOff, plotTree.yOff), cntrPt, str(key))    # 1/2+1/2    plotTree.yOff = plotTree.yOff + 1.0/plotTree.totalDdef createPlot(inTree):    #facecolor设置背景    fig = plt.figure(1, facecolor=&#39;white&#39;)    #清除    fig.clf()    #清空ticks，标线，这里应该就是坐标轴    axprops = dict(xticks=[], yticks=[])    #这个是没有ticks的    #createPlot.ax1 = plt.subplot(111,frameon=False, **axprops)    #这个是有ticks的    createPlot.ax1 = plt.subplot(111,frameon=False)    #将树的深度和叶子节点数保存为全局变量    plotTree.totalW = float(getNumLeafs(inTree))    print &quot;totalW: %f&quot; % plotTree.totalW    plotTree.totalD = float(getTreeDepth(inTree))    print &quot;totalD: %f&quot;% plotTree.totalD    # -0.5/4    plotTree.xOff = -0.5/plotTree.totalW;    plotTree.yOff = 1.0    #设置跟节点坐标    plotTree(inTree, (0.5,1.0), &#39;&#39;)    plt.show()</code></pre><pre><code class="python">&quot;&quot;&quot;测试获取树的叶子节点数，树的层数&quot;&quot;&quot;myTree = retrieveTree(0)getNumLeafs(myTree)getTreeDepth(myTree)</code></pre><pre><code>2</code></pre><pre><code class="python">&quot;&quot;&quot;创建树节点&quot;&quot;&quot;&quot;&quot;&quot;前面的createPlot()为了做区分 改名为createPlot1&quot;&quot;&quot;createPlot1()</code></pre><p><img src="/img/tree/output_9_0.png" alt="图像输出"></p><pre><code class="python">&quot;&quot;&quot;获取树信息&quot;&quot;&quot;myTree=retrieveTree(0)&quot;&quot;&quot;创建树&quot;&quot;&quot;createPlot(myTree)</code></pre><pre><code>totalW: 3.000000totalD: 2.000000</code></pre><p><img src="/img/tree/output_10_1.png" alt="图像输出"></p><pre><code class="python">&quot;&quot;&quot;添加节点，测试输出效果&quot;&quot;&quot;myTree=retrieveTree(0)myTree[&#39;no surfacing&#39;][3]=&#39;maybe&#39;createPlot(myTree)</code></pre><p><img src="/img/tree/output_11_0.png" alt="图像输出"></p><pre><code class="python">fr=open(&#39;F:\study\lenses.txt&#39;)lences=[inst.strip().split(&#39;\t&#39;) for inst in fr.readlines()]lensesLabels=[&#39;age&#39;,&#39;preascript&#39;,&#39;astigmatic&#39;,&#39;tearRate&#39;]lensesTree = createTree(lences,lensesLabels)lensesTree</code></pre><pre><code>{&#39;tearRate&#39;: {&#39;normal&#39;: {&#39;astigmatic&#39;: {&#39;no&#39;: {&#39;age&#39;: {&#39;pre&#39;: &#39;soft&#39;,      &#39;presbyopic&#39;: {&#39;preascript&#39;: {&#39;hyper&#39;: &#39;soft&#39;, &#39;myope&#39;: &#39;no lenses&#39;}},      &#39;young&#39;: &#39;soft&#39;}},    &#39;yes&#39;: {&#39;preascript&#39;: {&#39;hyper&#39;: {&#39;age&#39;: {&#39;pre&#39;: &#39;no lenses&#39;,        &#39;presbyopic&#39;: &#39;no lenses&#39;,        &#39;young&#39;: &#39;hard&#39;}},      &#39;myope&#39;: &#39;hard&#39;}}}},  &#39;reduced&#39;: &#39;no lenses&#39;}}</code></pre><pre><code class="python">createPlot(lensesTree)</code></pre><p><img src="/img/tree/output_13_0.png" alt="图像输出"></p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习实战（二）k-近邻算法</title>
      <link href="/2017/09/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/"/>
      <url>/2017/09/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>k-近邻算法：KNN是通过测量不同特征值之间的距离进行分类。它的的思路是：如果一个样本在特征空间中的k个最相似(即特征空间中最邻近)的样本中的大多数属于某一个类别，则该样本也属于这个类别。K通常是不大于20的整数。KNN算法中，所选择的邻居都是已经正确分类的对象。该方法在定类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。<br><a id="more"></a></p><pre><code class="python">from numpy import *import operator# 它可以列出给定目录下的文件名from os import listdir&quot;&quot;&quot;科学计算包Numpy运算符模块operator&quot;&quot;&quot;def createDataSet():    group = array([[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]])    labels = [&#39;A&#39;,&#39;A&#39;,&#39;B&#39;,&#39;B&#39;]    return group,labels&quot;&quot;&quot;读取文件并转成矩阵&quot;&quot;&quot;def file2matrix(filename):    fr = open(filename)    arrayOLines = fr.readlines()#     得到文件行数    numberOfLines = len(arrayOLines)    returnMat = zeros((numberOfLines,3))#     创建返回的NumPy矩阵    classLabelVector = []    index = 0#     解析文件数据到列表    for line in arrayOLines:#     移除字符串头尾指定的字符，默认为空格        line = line.strip()        listFromLine = line.split(&#39;\t&#39;)        returnMat[index,:] = listFromLine[0:3]        classLabelVector.append(int(listFromLine[-1]))        index += 1    return returnMat,classLabelVector&quot;&quot;&quot;归一化特征值&quot;&quot;&quot;    def autoNorm(dataSet):    &quot;&quot;&quot;    公式    newValue = (oldValue-min )/(max-min)    &quot;&quot;&quot;#     从列中选取最小值    minVals = dataSet.min(0)    maxVals = dataSet.max(0)    ranges = maxVals - minVals    normDataSet = zeros(shape(dataSet))    m = dataSet.shape[0]    normDataSet = dataSet - tile(minVals, (m,1))#     特征值相除    normDataSet = normDataSet/tile(ranges, (m,1))    return normDataSet, ranges, minVals&quot;&quot;&quot;分类器测试代码&quot;&quot;&quot;def datingClassTest():    hoRatio = 0.10    datingDataMat,datingLabels = file2matrix(&#39;F:\study\datingTestSet2.txt&#39;)    normMat, ranges, minVals = autoNorm(datingDataMat)    m = normMat.shape[0]    numTestVecs = int(m*hoRatio)    errorCount = 0.0    for i in range(numTestVecs):        classifierResult = classify0(normMat[i,:],normMat[numTestVecs:m,:],datingLabels[numTestVecs:m],3)        print &quot;the classifier came back with: %d, the real answer is: %d&quot; % (classifierResult, datingLabels[i])        if (classifierResult != datingLabels[i]):errorCount += 1.0    print &quot;the total error rate is %f&quot; % (errorCount/float(numTestVecs))&quot;&quot;&quot;预测函数&quot;&quot;&quot;def classifyPerson():    resultList = [&#39;not at all&#39;,&#39;in small doses&#39;, &#39;in large doses&#39;]    percentTats = float(raw_input(&quot;percentage of time spent playing video games?&quot;))    ffMiles = float(raw_input(&quot;frequent flier miles earned per year?&quot;))    iceCream = float(raw_input(&quot;liter of ice cream consumed per year?&quot;))    datingDataMat,datingLabels = file2matrix(&#39;F:\study\datingTestSet2.txt&#39;)    norMat, ranges, minVals = autoNorm(datingDataMat)    inArr = array ([ffMiles, percentTats, iceCream])    classifierResult = classify0((inArr-minVals)/ranges,normMat,datingLabels,3)    print &quot;You will probably like this person: &quot;,resultList[classifierResult - 1]&quot;&quot;&quot;把32x32的二进制图像矩阵转换为1x1024的向量&quot;&quot;&quot;def img2vector(filename):    returnVect = zeros((1,1024))    fr = open(filename)    for i in range(32):        lineStr = fr.readline()        for j in range(32):            returnVect[0,32*i+j] = int(lineStr[j])    return returnVect&quot;&quot;&quot;手写数字识别系统的测试代码&quot;&quot;&quot;def handwritingClassTest():    hwLabels = []#     获取目录内容    trainingFileList = listdir(&#39;F:\\study\\trainingDigits&#39;)    m = len(trainingFileList)#     创建m行1024列的矩阵    trainingMat = zeros((m,1024))    for i in range(m):        fileNameStr = trainingFileList[i]#         从文件名解析分类数字，文件名的第一个数#         去掉后缀        fileStr = fileNameStr.split(&#39;.&#39;)[0]#         获取第一个值        classNumStr = int(fileStr.split(&#39;_&#39;)[0])        hwLabels.append(classNumStr)        trainingMat[i,:] = img2vector(&#39;F:\\study\\trainingDigits\\%s&#39; % fileNameStr)    testFileList = listdir(&#39;F:\\study\\testDigits&#39;)    errorCount = 0.0    mTest = len(testFileList)    for i in range(mTest):        fileNameStr = testFileList[i]        fileStr = fileNameStr.split(&#39;.&#39;)[0]        classNumStr = int(fileStr.split(&#39;_&#39;)[0])        vectorUnderTest = img2vector(&#39;F:\\study\\testDigits\\%s&#39; % fileNameStr)        classifierResult = classify0(vectorUnderTest, trainingMat, hwLabels, 3)        print &quot;the classifier came back with: %d, the real answer is : %d&quot; % (classifierResult, classNumStr)        if(classifierResult != classNumStr) : errorCount +=1.0    print &quot;\nthe total number of errors is : %d&quot; % errorCount    print &quot;\nthe total error rate is: %f&quot; % (errorCount/float(mTest))</code></pre><pre><code class="python">group, labels = createDataSet()# print group,labels</code></pre><pre><code>[[ 1.   1.1] [ 1.   1. ] [ 0.   0. ] [ 0.   0.1]] [&#39;A&#39;, &#39;A&#39;, &#39;B&#39;, &#39;B&#39;]</code></pre><pre><code class="python">def classify0(inX, dataSet, labels, k):    # 计算矩阵行数,一维长度    dataSetSize = dataSet.shape[0]    # print dataSetSize    &quot;&quot;&quot;    距离计算:欧式距离公式    &quot;&quot;&quot;#     tile():重复某个数组tile(A,n)，将数组A重复n次，构成一个新的数组#         下面的代码是将inX重复成dataSetSize行，1列的数据#         [[0,0],[0,0],[0,0],[0,0]]-[[1.0,1.1],[1.0,1.0],[0,0],[0,0.1]]#         = [[-1,-1.1],[-1,-1],[0,0],[0,-0.1]]#     下面的步骤就是先计算平方差，再相加后求根号，就是求距离    diffMat = tile(inX, (dataSetSize,1)) - dataSet#     平方运算    sqDiffMat = diffMat**2#     将向量的每一行相加    sqDistances = sqDiffMat.sum(axis=1)#     对数组中的每一个元素开根号    distances = sqDistances**0.5#     对数组进行升序排序，返回的是下标不是值！    sortedDistIndicies = distances.argsort()    classCount={}    &quot;&quot;&quot;    选择距离最小的k个点    &quot;&quot;&quot;    for i in range(k) :         voteIlabel = labels[sortedDistIndicies[i]]#         get返回字典中指定键的值，若不存在则返回默认值，这里设置的是0#         这里就是给字典中指定键的值加1统计数量,最终是A和B的数量        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1    &quot;&quot;&quot;    排序    &quot;&quot;&quot;#     sorted(data,cmp=None,key=None,reverse=False)#         data:待排序数组#         cmp :带两个参数的比较函数#         key :是带一个参数的函数#         reverse:排序规则，True降序#         获取对象第一个域的值    sortedClassCount = sorted(classCount.iteritems(),                              key=operator.itemgetter(1), reverse=True)#     取第一个则为最大值，也就是当前inX的分类    return sortedClassCount[0][0]</code></pre><pre><code class="python">classify0([0,0],group,labels,3)</code></pre><pre><code>&#39;B&#39;</code></pre><pre><code class="python">&quot;&quot;&quot;读取文件数据&quot;&quot;&quot;datingDataMat,datingLabels = file2matrix(&#39;F:\study\datingTestSet2.txt&#39;)</code></pre><pre><code class="python">&quot;&quot;&quot;执行可视化&quot;&quot;&quot;import matplotlibimport matplotlib.pyplot as plt&quot;&quot;&quot;可视化&quot;&quot;&quot;fig = plt.figure()ax = fig.add_subplot(111)ax.scatter(datingDataMat[:,1], datingDataMat[:,2],15.0*array(datingLabels),15.0*array(datingLabels))plt.show()</code></pre><p><img src="/img/kNN/output_5_0.png" alt="图像输出"></p><pre><code class="python">&quot;&quot;&quot;执行归一化结果&quot;&quot;&quot;normMat, ranges, minVales = autoNorm(datingDataMat)#normMat#ranges#minVales</code></pre><pre><code>[  9.12730000e+04   2.09193490e+01   1.69436100e+00]</code></pre><pre><code class="python">&quot;&quot;&quot;执行分类器测试程序&quot;&quot;&quot;datingClassTest()</code></pre><pre><code>&#39;\n\xe6\x89\xa7\xe8\xa1\x8c\xe5\x88\x86\xe7\xb1\xbb\xe5\x99\xa8\xe6\xb5\x8b\xe8\xaf\x95\xe7\xa8\x8b\xe5\xba\x8f\n&#39;</code></pre><pre><code class="python">&quot;&quot;&quot;预测当前人员在哪个分类，执行预测函数&quot;&quot;&quot;classifyPerson()</code></pre><pre><code>percentage of time spent playing video games?56frequent flier miles earned per year?1654liter of ice cream consumed per year?0.65[  9.12730000e+04   2.09193490e+01   1.69436100e+00]You will probably like this person:  in large doses</code></pre><pre><code class="python">&quot;&quot;&quot;读取图像&quot;&quot;&quot;# 用\进行转义，否则访问不到testVector = img2vector(&#39;F:\\study\\trainingDigits\\0_9.txt&#39;)testVector[0,0:31]</code></pre><pre><code>array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,        0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,        0.,  0.,  0.,  0.,  0.])</code></pre><pre><code class="python">&quot;&quot;&quot;手写数字识别测试执行&quot;&quot;&quot;handwritingClassTest()</code></pre><pre><code>the classifier came back with: 0, the real answer is : 0...    the classifier came back with: 0, the real answer is : 0the classifier came back with: 0, the real answer is : 0the classifier came back with: 1, the real answer is : 1the classifier came back with: 1, the real answer is : 1the classifier came back with: 2, the real answer is : 2the classifier came back with: 2, the real answer is : 2...    the classifier came back with: 2, the real answer is : 2the classifier came back with: 3, the real answer is : 3the classifier came back with: 3, the real answer is : 3the classifier came back with: 9, the real answer is : 3...    the classifier came back with: 3, the real answer is : 3the classifier came back with: 3, the real answer is : 3the classifier came back with: 4, the real answer is : 4the classifier came back with: 4, the real answer is : 4the classifier came back with: 5, the real answer is : 5the classifier came back with: 5, the real answer is : 5the classifier came back with: 5, the real answer is : 5the classifier came back with: 6, the real answer is : 6the classifier came back with: 7, the real answer is : 7the classifier came back with: 6, the real answer is : 8the classifier came back with: 8, the real answer is : 8the classifier came back with: 9, the real answer is : 9the classifier came back with: 9, the real answer is : 9the total number of errors is : 11the total error rate is: 0.011628</code></pre>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习实战（一）NumPy函数库基础</title>
      <link href="/2017/09/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89NumPy%E5%87%BD%E6%95%B0%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
      <url>/2017/09/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89NumPy%E5%87%BD%E6%95%B0%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<p>NumPy函数库基础。</p><p>机器学习实战这本书的第一章，下面是这章的代码，添加了些本人的注释，欢迎指正。<br><a id="more"></a></p><h2 id="In"><a href="#In" class="headerlink" title="In"></a>In</h2><pre><code class="python">from numpy import *random.rand(4,4)&quot;&quot;&quot;mat()函数将数组转化为矩阵&quot;&quot;&quot;randMat = mat(random.rand(4,4))&quot;&quot;&quot;.I操作实现矩阵求逆运算&quot;&quot;&quot;# randMat.IinvRandMat = randMat.I&quot;&quot;&quot;执行矩阵乘法，矩阵与逆矩阵相乘&quot;&quot;&quot;randMat*invRandMat&quot;&quot;&quot;有误差，得到误差值&quot;&quot;&quot;myEye = randMat*invRandMatmyEye - eye(4)</code></pre><h2 id="OUT"><a href="#OUT" class="headerlink" title="OUT"></a>OUT</h2><pre><code>matrix([[  0.00000000e+00,   2.26241858e-17,  -6.05935799e-17,           1.76115404e-16],        [ -2.15279060e-17,   2.22044605e-16,  -1.18162824e-16,           1.35743489e-16],        [  9.99619619e-19,  -1.22685988e-17,  -2.22044605e-16,           9.91247488e-17],        [  1.00142668e-16,   1.50352035e-17,  -3.19207407e-16,           0.00000000e+00]])</code></pre>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>认知失调理论</title>
      <link href="/2017/09/08/%E8%AE%A4%E7%9F%A5%E5%A4%B1%E8%B0%83%E7%90%86%E8%AE%BA/"/>
      <url>/2017/09/08/%E8%AE%A4%E7%9F%A5%E5%A4%B1%E8%B0%83%E7%90%86%E8%AE%BA/</url>
      <content type="html"><![CDATA[<p>当我们做了某个重要的决定的时候，如果这个决定会让我们失去某些东西，我们就会产生失调。</p><a id="more"></a><p style="text-indent:2em">你应该注意到当一个人做出了一个重要的决定，并在该决定上作出了投资（时间、精力、牺牲和承诺等方面的）之后，会导致他对这些行为以及投资进行合理化的强烈需要。他放弃的越多，努力的越多，像说服自己相信自己的观点是正确的需要就越强烈。</p><p style="text-indent:2em">就是为自己做的重要决定寻找有利的借口，这样才能不产生让自己无法忍受的认知失调。</p><p style="text-indent:2em">另外，这部分还有自我肯定。</p><p style="text-indent:2em">当你做了一件事之后，可能你知道这件事做的并不合理，你将陷入失调，你可能会自责，也可能会觉得虽然做了这件愚蠢的事但我其他事做的还不错或者说这件事带来的并不只是负面效应，实现自我肯定，好让自己从失调中走出来，维护自己的正面形象，让自己好受点。</p><p style="text-indent:2em">这些都是自发发生的，人类有这样的需求。</p><p style="text-indent:2em">也有一些情况，我们为了从错误中学习，我们需要长时间的忍受失调，以仔细且不带个人情感地检查客观情况，这样我们才能够有机会跳出自我合理化和更过分的行为所组成的恶性循环。</p><p style="text-indent:2em">这说明，在某些不太严重的行为上你可以自我肯定，但当行为已经恶性到一定程度，请一定要从错误中学习，这个度自己把握。</p><p style="text-indent:2em">这些都是自发发生的，人类有这样的需求。</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>就很难受</title>
      <link href="/2017/09/08/%E5%B0%B1%E5%BE%88%E9%9A%BE%E5%8F%97/"/>
      <url>/2017/09/08/%E5%B0%B1%E5%BE%88%E9%9A%BE%E5%8F%97/</url>
      <content type="html"><![CDATA[<p>2017.8.11 00.00</p><p>人终究是人吧，哪能格外的理性，感性说话的时候真没你理想插嘴的份。</p><a id="more"></a><p>我想让自己过的好一点，我能感受到我如此的不幸。</p><p>我也想让自己就这样荒芜，却始终无法让自己静下心来。</p><p>我又一次感受到我的苍老。</p><p>心情是糟的，总得需要地方发泄，也尝试过向朋友诉苦，可最终想想因为是朋友，所以我不该让你分享我的悲伤，于是我装作若无其事，闷在心里，有些话写在这里。</p><p>创建博客的初衷也只是为了我自己，我需要地方发泄，也想把现在的一些事记下来，以后还能翻翻看看，至少，回忆还在。当然我也知道，现在去存这些回忆对我并不好，但在以后，我相信还会觉得这是美好。</p><p>博客就这样放着，若真的能看到的话，也算是有缘。至少我会觉得我真的发泄出去了。</p><p>人之所以感受到悲伤，是因为落差，我对那一刻期待的太久了，我能够想到的种种美好都在我们身上。</p><p>如今，你却走了。</p><p>有一次，我梦见我们亲密无间。</p><p>醒来时，才发现我们竟是陌生人。</p><p>God says to man, I heal you therefore I hurt, love you therefore punish.</p><p>晚安。</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>回合肥路上发生的事</title>
      <link href="/2017/09/08/WhatHappenedOnTheRoadOfHeifei/"/>
      <url>/2017/09/08/WhatHappenedOnTheRoadOfHeifei/</url>
      <content type="html"><![CDATA[<p>2017.7.29 周六，加班回来，突然决定回一趟合肥。</p><p>我喜欢坐车来看更多的人。</p><p>也发生了些有趣的事。</p><a id="more"></a><h2 id="事情经过"><a href="#事情经过" class="headerlink" title="事情经过"></a>事情经过</h2><blockquote><p>这是真的，我不是段子手。</p></blockquote><p style="text-indent:2em">行程：南京南-合肥南 19：27</p><br><p style="text-indent:2em">跟往常一样，找到自己的座位坐下，一个小时的车程也想做点什么，那就看书吧，好让自己看起来“安静优雅”（其实内心放荡不羁，这也是印象管理），于是拿出了我的《社会心理学》。</p><br><p style="text-indent:2em">这次的座位是一个三连坐，旁边是两个女生，她们爬在桌子上睡觉，因为看不见脸，自然多了些遐想的空间，于是暗自窃喜。</p><br><p style="text-indent:2em">之后，车开动了，她们也抬起了头开始了聊天，虽然内心已按捺不住希望去看看相貌究竟如何，可奈何我如此害羞！继续埋头看书！</p><br><p style="text-indent:2em">看书自然不专心，她们的聊天我都能听见，于是到了这个故事最关键的地方。</p><br><p style="text-indent:2em">中间位置的女生（以下简称A）对靠窗户女生（以下简称B）说：感谢上苍，给了一副还不错的容貌，吧啦吧啦~~</p><br><p style="text-indent:2em">我就想问一句，话都说到这份上了你能忍住？！当然要一看究竟！我缓缓的抬起头，眼神中透漏出一丝丝的腼腆朝中间位置看去，心中的幻想破灭，渴望去告诉她：你感谢的上苍对你并不好！别傻了！</p><br><p style="text-indent:2em">幻想破灭自然该干啥就干啥，注定旅途是孤独的，只怪我定力不足多看了那一眼。这事并没有完，这种落差导致我仍然没有安心看书，还能够听见他们的聊天。B貌似发起了反攻，对A说，“我妈特别漂亮，之前同学都说我跟我妈一个模子刻出来的”。听见这，心中多了些许的慰藉，B毫不吝啬的夸赞她的母亲让我感到欣赏。BUT! 好景不长，只见画风一转，“但是我妈也有很多不好看的地方，所以这部分我遗传了我爸的。” A附和道：“长得好”。</p><br><p style="text-indent:2em">What ？？？</p><br><p style="text-indent:2em">总结一下，整个聊天过程提炼出四个字，自夸互夸。</p><br><p style="text-indent:2em">我以为只有我不要脸，才会把脸借给吴彦祖。</p><br><p style="text-indent:2em">后来，我把这件事发到了朋友圈，很多人都觉得这事很搞笑，但是，这真的不是段子。其实这种事我们经常能遇见，有个好友评论说：上苍对每个人都是公平的，起码给了她自信。很幽默，也很有道理，没有一个人是完美的，但每个人都有发光点，我们尽力去掩藏自己的不完美的地方来让别人以自己期待的方式看待自己。社会是人的社会，人不完美，所以社会不完美，但同样你抱怨的社会除了给了你所认为的苦难也给你不同于他人的东西，美好的，独特的。</p><h2 id="渴望看透事情的本质"><a href="#渴望看透事情的本质" class="headerlink" title="渴望看透事情的本质"></a>渴望看透事情的本质</h2><p style="text-indent:2em">几乎人人都有自恋的表现，只是程度不同，那么，人为什么会有这种行为呢？</p><br><p style="text-indent:2em">看了看手中的社会心理学，决定找出个答案。</p><br><p style="text-indent:2em">人类的行为最有利的决定因素之一源于我们希望维护一个稳定、正面的自我形象的需求，换言之，我们希望保持一个对自己相对有利的看法，特别是当有证据与我们美好的自我形象相抵触时。</p><br><p style="text-indent:2em">过度自恋也可以用这样的方式来解释，她在掩饰，渴望得到认同，而她谈话的对象正好在使用“印象管理”中一个比较常见的策略—–逢迎。逢迎就是我们常说的奉承，不光用于下属对上司的怕马屁，也用于交流的双方为了获得他人的好感而采取的符合他人意图的举动。当逢迎取得成效的时候，那被逢迎的对方应该也是同样的人，才出现了这次故事中的自夸互夸。臭味相投自然人以群分。说的这些没有任何贬低的意思，这种行为所有人都有过，这里只是给一个解释希望对我们的自我认知有一定的帮助，当我们能够清除的认识自己的行为时自然能够更理性的对待其他的事。最后说一下，这个行为下的自信、乐观照样值得欣赏。</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 随笔 </tag>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>情绪的二因素理论</title>
      <link href="/2017/09/08/Two-factorTheoryOfEmotion/"/>
      <url>/2017/09/08/Two-factorTheoryOfEmotion/</url>
      <content type="html"><![CDATA[<blockquote><p>当情感说话时，理智很少不听从。         ——Milan Kundera</p></blockquote><a id="more"></a><p style="text-indent:2em">情绪的二因素理论是社会心理学自我认知部分的内容。该理论主张情绪经验是一种两个阶段的自我知觉过程，首先，我们必须体验到生理的激发，接着，再为这个激发状态寻找适当的解释。</p><p style="text-indent:2em">这个解释就是为我们所处的激发状态做归因，比如说，你和你女票分手了，体验到生理上的刺激唤起你的悲伤情绪，然后你开始做归因，你的难受是否是因为分手这件事导致的，因为我们每天身边发生了各种各样的事，当前的状态可能由多件事交叉刺激，那么你做出怎样的归因就决定了你后来有什么感受。</p><p style="text-indent:2em">有可能你做出错误的归因，但在很大程度上能够调整你的情绪。我们很多关于这个世界的思考是自动地、无意识地进行的，因此情绪的二因素理论在事情发生时很难体会到，但事实就是如此，当一件事持续很久时，你就是在不断的做情绪唤起的归因来调整自己。</p><p style="text-indent:2em">因此，某件事情影响了你的情绪后，可以试着去分析当前的情绪是如何被唤起的，这个将帮助你有个更好的生活状态。</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用经济学的头脑想问题-沉没成本</title>
      <link href="/2017/09/08/Think%20in%20Economics/"/>
      <url>/2017/09/08/Think%20in%20Economics/</url>
      <content type="html"><![CDATA[<p>我并不懂经济学，因为巧合看了一本书，书的简介中说道：“融生活与经济原理与一体，让你更加理性的认识生活，更加准确的把握生活的内在”，索性看了下去。</p><p>这本书叫《一本书看懂经济学》，作者是庆裕。</p><a id="more"></a><h2 id="我对这书的看法"><a href="#我对这书的看法" class="headerlink" title="我对这书的看法"></a>我对这书的看法</h2><p>书的评价并不算好，大都是因为说这本书讲的基础，但可能这也是好处，日常经济学概念用生活实例来解读，也算简单易懂，适合入门。</p><p>我把它当作科普读物。</p><h2 id="有些不错的概念"><a href="#有些不错的概念" class="headerlink" title="有些不错的概念"></a>有些不错的概念</h2><p>书中介绍了很多经济学的概念，看到“沉没成本”这个概念时，我决定把它写下来分享给大家。</p><p>因为，这样的情况我们会经常遇见。</p><h3 id="覆水不必收-沉没成本"><a href="#覆水不必收-沉没成本" class="headerlink" title="覆水不必收-沉没成本"></a><center>覆水不必收-沉没成本</center></h3><p>书中说了这样一个故事。<br>有一个老人特别喜欢收集各种古董，一旦碰到心爱的古董，无论花多少钱都要想方设法把它买下来。有一天，他在古董市场上发现了一件向往已久的古代瓷瓶，就花了很高的价钱把它买了下来。 </p><p>他把这个宝贝绑在自行车后座上，兴高采烈地骑车回家，谁知由于瓷瓶绑得不牢靠，在途中从自行车后座上滑落下来，“咣当”一声摔得粉碎。 </p><p>这位老人听到清脆的响声后居然连头也没回继续骑车。这时，路边有热心人对他大声喊道：“老人家，你的瓷瓶摔碎了！”老人仍然是头也没回地说：“摔碎了吗？听声音一定是摔得粉碎，无可挽回了！”不一会儿，老人家的背影消失在了茫茫人海中。</p><p>如果这种事情放到一般人的身上，一定会从自行车上跳下来，对着已经化为碎片的瓷瓶捶胸顿足，扼腕痛惜，有的可能会好长时间精神都难以恢复。</p><p>每一次选择之后，我们总是要付出行动，而每一次行动我们总是要作出投入，不管投入的是人力、物力、财力还是时间。在作出下一个选择时，我们不可避免地会考虑到这些前期的投入，不管它还能不能收回，是否真的还有价值。最终，前期的投入就像万能胶一样，把我们粘在原来的道路上，无法作出新的选择，而且投入越大，把我们粘得越紧。在经济学上这种无法收回的前期投入叫做沉没成本。沉没成本是指由于过去的决策已经发生了，而不能由现在或将来的任何决策改变的成本。</p><p>也就是说，沉没成本是种已经付出但又不能收回的成本。</p><p>对于个人来说，不计沉没成本也反映了一种向前看的心态。通常情况下，人们在决定是否继续去做一件事情的时候，不仅看重这件事对自己有没有好处，而且也看过去是不是已经在这件事情上有过投入。他们往往会计算已有支出，如时间、金钱、精力等。其实当我们面对无可挽回的损失，就应该对它不再考虑，那么我们一定能在人生的道路上不断地作出新的选择，赢得一种更为积极的人生。</p><h2 id="臣服与事实"><a href="#臣服与事实" class="headerlink" title="臣服与事实"></a>臣服与事实</h2><p>我们身边会发生各种各样的事，当某些事已成为事实，我们需要学会臣服。事实无法去改变，你所做的试图去改变的都是徒劳。我们应当理性的去看待，从中汲取经验向前看，让还没有发生的事有自己想要的结局。</p><p>希望这个观点能够对你有帮助。</p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>社会心理学-解释某些社会行为</title>
      <link href="/2017/09/08/Social%20Psychology%20-%20Interpreting%20certain%20social%20behaviors/"/>
      <url>/2017/09/08/Social%20Psychology%20-%20Interpreting%20certain%20social%20behaviors/</url>
      <content type="html"><![CDATA[<p>社会心理学定义为探讨人们的思维、情感及行为如何因他人真实或想象的存在而受到影响的科学研究。个人认为社会心理学，能够有效的解释某些社会行为，理性的看待某些行为能够有效的进行情绪控制。</p><p>今天推荐的这本书是《社会心理学》，作者是Aronson et al.</p><a id="more"></a><h2 id="社会心理学与人格心理学"><a href="#社会心理学与人格心理学" class="headerlink" title="社会心理学与人格心理学"></a>社会心理学与人格心理学</h2><p>这是心理学两个不同的分支，人格心理学倾向于从人的人格或者说性格来考虑，比如会说，这个人因为是这样的性格所以才会做出那样的事。而社会心理学则是从人物所处在的社会情境来考虑，因为这个人有着这样的环境所以才会做出那样的事。</p><p>我更倾向与社会心理学，个人愚见，一个人的人格是由他所处在的环境影响的，人格心理学容易犯基本归因错误，一昧的归因于人物性格而忽略社会情境对人的影响。</p><p>下面介绍下我觉得不错的有帮助的内容。</p><h2 id="行为的两个基本需求"><a href="#行为的两个基本需求" class="headerlink" title="行为的两个基本需求"></a>行为的两个基本需求</h2><h3 id="自尊取向：保持良好感觉的需要"><a href="#自尊取向：保持良好感觉的需要" class="headerlink" title="自尊取向：保持良好感觉的需要"></a><center>自尊取向：保持良好感觉的需要</center></h3><p>希望维持合理的高自尊，人们为了有好的自我形象而扭曲世界，为自己的行为辩护。例如当你的考试考砸了，你更倾向于找一些客观的原因使得自己处在有利的地位。</p><p>补充一点：人们倾向于认为成功是由于自己的努力，而将失败归咎于不可控制的外在事件。</p><h3 id="社会认知取向：对准确性的需求"><a href="#社会认知取向：对准确性的需求" class="headerlink" title="社会认知取向：对准确性的需求"></a><center>社会认知取向：对准确性的需求</center></h3><p>即使人们会尽可能扭曲真相以使自己处在一个有利的位置，但并不会完全扭曲事实活在一个梦幻的世界。</p><h2 id="自证预言"><a href="#自证预言" class="headerlink" title="自证预言"></a>自证预言</h2><p>这个我们经常会遇见，对第一次见面的人，我们会根据我们以往的图式来赋予这个人对我们的第一印象，这样的预期会影响我们如何对待他，而这种对待方式又会导致那个人的行为与我们最初的预期一致，使得这一预期成为现实，而事实上他可能跟我们想的完全相反，但由于你这样对他，他以牙还牙产生了现在的结局。</p><h2 id="归因过程的本质"><a href="#归因过程的本质" class="headerlink" title="归因过程的本质"></a>归因过程的本质</h2><p>书中归因的例子可推出下面的结论。</p><p>当二者关系较好时，对于对方的正性行为作内部归因（比如，“他之所以帮助我，是因为他是一个非常慷慨的人”），而对对方的负性行为作外部归因（比如，“他之所以说些刻薄的话，是因为他的工作实在太紧张了”），反之，则采取相反的模式。</p><p>懂得这个我想可以更好的处理人际关系。</p><h2 id="最后说一下探照灯效应"><a href="#最后说一下探照灯效应" class="headerlink" title="最后说一下探照灯效应"></a>最后说一下探照灯效应</h2><p>这大概算是给我们经常出现的状况取了个名字。</p><p>探照灯效应是指高估自己的行为和外表在他人眼中的显著程度的倾向。</p><p>正是因为这种效应，我们才会对自己的不是之处感到尴尬和担忧（这通常高于必要水平）。<br>举几个例子吧，像是今天发型不太好，走路一不小心摔倒了，课堂上回答了自认为很愚蠢的话，这些都会让我们觉得尴尬，而尴尬的原因来自于他人，觉得别人会注意到，会嘲笑等等。</p><p>其实啊，很多时候别人根本没有注意那么多！人家没事老注意你干嘛，别自恋了。实验结果证明也如此。</p><p>请放松，也许你今天的发型很糟糕，但很可能没有其他人注意到。</p><h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2><p>这本书很长，这里当记个笔记，后面再继续分享。</p>]]></content>
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>印象管理</title>
      <link href="/2017/09/08/Impression%20management%20the%20world%20is%20a%20big%20stage/"/>
      <url>/2017/09/08/Impression%20management%20the%20world%20is%20a%20big%20stage/</url>
      <content type="html"><![CDATA[<blockquote><p>印象管理:世界是个大舞台<br>我们都像舞台上的演员，尽力地要让“观众”（我们周围的人）相信自己是某种人，即使其实我们并非这种人。</p></blockquote><a id="more"></a><h2 id="什么是印象管理"><a href="#什么是印象管理" class="headerlink" title="什么是印象管理"></a>什么是印象管理</h2><p style="text-indent:2em">印象管理：人们试图让他人以自己期望的方式来看待自己。</p><p style="text-indent:2em">若想让别人以自己的期望来看待自己，那作为演员的我们就得演。如何演是印象管理的策略，这里说一个策略叫“自我妨碍”。</p><h2 id="什么是自我妨碍"><a href="#什么是自我妨碍" class="headerlink" title="什么是自我妨碍"></a>什么是自我妨碍</h2><p style="text-indent:2em">自我妨碍：人们为自己制造障碍和借口，以便在表现不佳时避免自责的策略。</p><h3 id="自我妨碍的两个方法"><a href="#自我妨碍的两个方法" class="headerlink" title="自我妨碍的两个方法"></a>自我妨碍的两个方法</h3><p style="text-indent:2em">第一种比较极端：人们故意制造障碍来减少自己成功的可能性，这样如果失败了，他们就会归罪于这些障碍，而不是自己缺乏能力。</p><p style="text-indent:2em">第二种没有那么极端：与创造障碍不同，人们会事先准备好理由以防止万一出现的失败，比如心情不好、紧张、身体不适等等。</p><h3 id="得到的结论"><a href="#得到的结论" class="headerlink" title="得到的结论"></a>得到的结论</h3><p style="text-indent:2em">总之自我妨碍就是人们对自己的失败做一个外部归因来向别人解释自己的表现，以转变他们可能对你进行的负性的内部归因（比如就是你就是不行啊- -）。</p><p style="text-indent:2em">所以啊，人们最好是努力学习并尽自己最大的努力，而不要太在乎自己失败后别人会怎么想。</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我现在已不敢往后想</title>
      <link href="/2017/09/08/I%20can&#39;t%20think%20back%20now/"/>
      <url>/2017/09/08/I%20can&#39;t%20think%20back%20now/</url>
      <content type="html"><![CDATA[<p>任何事都是两面的，人们对一件事有着正面的解释，自然别人会给它另一种解释。各自都有道理。</p><p>对于该不该畅想未来这件事，我想别人也有两种看法，我的看法在转变。</p><a id="more"></a><p>人应该思考未来，好让自己知道想要的未来是什么样的，自己也有了目标，一切好似有了奔头，如果你真的在做准备，渴望去达到你所设定的目标，那么你肯定会尝到甜头。觉得这一切做的都是值得的，这是希望。</p><p>人不需要思考未来，应当过好当前的生活，未来就会来。谁也不能保证未来会是什么样子，未来到来之时，它是什么样子取决于你在那时内心的映射，未来“好”的标准来源于你自己而不是别人。既然这样，何必那么多期望，应该让现在的自己开心。期望抬的越大，摔的越惨，这是绝望。</p><p>如何得到幸福感？拥有更多的钱？有个大房子？是否物质上的满足真的能让人感到幸福?</p><p>没错，能。</p><p>但这种幸福感是短暂，当你渴望去得到某样的东西的时候，享受的是其中的过程，真的得到了这个过程就过了。那一直去追求不就好了？尴尬的就在这，人们得去做有把握的事，得不到又会很失望。、</p><p>是否可以这样，物质上的追求转变为生活上的追求，让自己的生活变得有趣。人总不能不追求，精神追求是能够提高自己的社会认知的，碎片化时代我们需要不断的学习，去多了解一些事物。38平的房子照样可以装出自己想要的样子，住的舒坦不就行了，空闲的时间多看看书，多出去走走去了解其他地方的文化，充实自己。必须承认社会是现实的，但我们学到的不是变的现实，而去接受现实，理解现实。如何去支撑这些想法呢，你还是要努力工作啊，工作也是生活的一部分，不用去追求别人追求的，选择你想要的生活，如果工作也是自己喜欢的，甚是完美。</p><p>我一直在思考未来，而现在我已经不敢往后想。你在思考的时候，是你正在为自己选择路线，是在社会影响下选择的路线，别人都说这条路不错，于是你也准备走走，因为在这种时候，人们用于对自己的真实想法进行误判。路很长，可恨的是，一开始我们真的不偏不移的走着，掉以轻心，以至于没有预计到当前面的路出现一点点的误差时自己该如何应对。有的可能是致命的，让自己在自己的幻想中死去。</p><p>罢了，别想了。何必这么折腾，我在改变我的想法，我想过好现在的生活，我想去体验生活。</p><p>那么，未来该怎么办？套用软件行业的一个思想：拥抱变化，积极应对。</p><p>一直觉得，我们应当在大环境下“顺其自然”，因为顺其自然才是可持续发展，在小环境下努力向上，做好每一件事。顺道而不失道，无为而有所谓，再等等，慢一点，总会来。</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 愚见 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Docker初体验</title>
      <link href="/2017/09/08/DockerInitialExperience/"/>
      <url>/2017/09/08/DockerInitialExperience/</url>
      <content type="html"><![CDATA[<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。<br><a id="more"></a></p><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><h3 id="保证Ubuntu软件源最新"><a href="#保证Ubuntu软件源最新" class="headerlink" title="保证Ubuntu软件源最新"></a>保证Ubuntu软件源最新</h3><pre><code class="bash">$ apt-get update</code></pre><p>当前系统为Ubuntu16x64，root用户</p><h3 id="下载-docker"><a href="#下载-docker" class="headerlink" title="下载 docker"></a>下载 docker</h3><pre><code class="bash">$ apt-get install -y docker.io</code></pre><p>下载完成后可使用docker version查看docker版本，正常会显示client以及server，由于未启动docker服务，此时只会显示client的信息，可执行第三步启动docker，再执行docker version即可正常显示，显示结果如下<br><img src="/img/docker/dockerinfo.png" alt="docker信息"></p><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><pre><code class="bash">$ service docker start</code></pre><h3 id="拉取docker官网的镜像hello-world-名字需一致"><a href="#拉取docker官网的镜像hello-world-名字需一致" class="headerlink" title="拉取docker官网的镜像hello-world(名字需一致)"></a>拉取docker官网的镜像hello-world(名字需一致)</h3><pre><code class="bash">$ docker pull hello-world</code></pre><h3 id="至此可查看镜像列表"><a href="#至此可查看镜像列表" class="headerlink" title="至此可查看镜像列表"></a>至此可查看镜像列表</h3><pre><code class="bash">$ docker images</code></pre><h3 id="运行hello-world（前台运行）"><a href="#运行hello-world（前台运行）" class="headerlink" title="运行hello-world（前台运行）"></a>运行hello-world（前台运行）</h3><pre><code class="bash">$ docker run hello-world</code></pre><p>运行结果如下图所示，从内容可看到hello-world的运行做了哪些事：<br><img src="/img/docker/hello.png" alt="hello-world"></p><h2 id="来试试其他镜像吧"><a href="#来试试其他镜像吧" class="headerlink" title="来试试其他镜像吧"></a>来试试其他镜像吧</h2><p>由于docker官网的镜像下载较慢，这里通过<a href="https://c.163.com/" target="_blank" rel="external">网易蜂巢中心</a>拉取镜像</p><h3 id="拉取nginx镜像"><a href="#拉取nginx镜像" class="headerlink" title="拉取nginx镜像"></a>拉取nginx镜像</h3><pre><code class="bash">$ docker pull hub.c.163.com/library/nginx:latest</code></pre><h3 id="后台运行nginx"><a href="#后台运行nginx" class="headerlink" title="后台运行nginx"></a>后台运行nginx</h3><pre><code class="bash">$ docker run -d hub.c.163.com/library/nginx</code></pre><p>后台运行将返回一个id，如：6b79dde…..</p><p>docker run –help 可查看可选的参数，-d参数表示后台运行</p><h3 id="查看运行的容器"><a href="#查看运行的容器" class="headerlink" title="查看运行的容器"></a>查看运行的容器</h3><pre><code class="bash">$ docker ps</code></pre><p><img src="/img/docker/dockerps.png" alt="docker进程"></p><h3 id="当然可以进入容器内部"><a href="#当然可以进入容器内部" class="headerlink" title="当然可以进入容器内部"></a>当然可以进入容器内部</h3><pre><code class="bash">$ docker exec -it 6b /bin/bash</code></pre><p>（6b为id简写，如果很容易识别id可以简写）</p><p>容器就像是一个虚拟的机器，进入后和linux没有区别，我把它就看成虚拟机了- -</p><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><pre><code class="bash">$ exit</code></pre><h2 id="Docker-网络"><a href="#Docker-网络" class="headerlink" title="Docker 网络"></a>Docker 网络</h2><p>部署项目当然需要进行外部访问，因此需要将当前机器与容器进行端口映射</p><p>我们先关闭nginx容器来便于后边的操作</p><h3 id="关闭nginx"><a href="#关闭nginx" class="headerlink" title="关闭nginx"></a>关闭nginx</h3><pre><code class="bash">$ docker stop 6b</code></pre><h3 id="以桥接Bridge的方式启动nginx"><a href="#以桥接Bridge的方式启动nginx" class="headerlink" title="以桥接Bridge的方式启动nginx"></a>以桥接Bridge的方式启动nginx</h3><pre><code class="bash">$ docker run -d -p 9999:80 hub.c.163.com/library/nginx</code></pre><p>其实就是配置端口映射，使用参数-p,具体端口可按实际需求指定</p><p>还有种映射方式，随机端口映射（使用参数-P），将映射容器的所有端口,我一般用第一种</p><pre><code class="bash">$ docker run -d -P hub.c.163.com/library/nginx</code></pre><h3 id="查看端口是否启动"><a href="#查看端口是否启动" class="headerlink" title="查看端口是否启动"></a>查看端口是否启动</h3><pre><code class="bash">$ netstat -na|grep 9999</code></pre><h3 id="现在就可以访问啦"><a href="#现在就可以访问啦" class="headerlink" title="现在就可以访问啦"></a>现在就可以访问啦</h3><p>去浏览器输入你的服务器ip配上刚刚的9999端口号就ok了</p><pre><code>IP:9999</code></pre><p><img src="/img/docker/nginx.png" alt="nginx"></p><h2 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><p>这才是最重要的吧，自己写的项目如何用docker部署？</p><p>这里以Jpress为例吧，顺便说一下mysql部署</p><h3 id="下载jpress的war包"><a href="#下载jpress的war包" class="headerlink" title="下载jpress的war包"></a>下载jpress的war包</h3><p>进入<a href="http://jpress.io/" target="_blank" rel="external">Jpress官网</a>,点击下载跳转到github下载最新的war包：<br><img src="/img/docker/jpress.png" alt="jpress"></p><p>下载完成后防止到某个文件夹（如/home/username）,为了方便 重命名war包</p><pre><code class="bash">$ mv jpress-web-newest.war jpress.war</code></pre><h3 id="拉取tomcat镜像"><a href="#拉取tomcat镜像" class="headerlink" title="拉取tomcat镜像"></a>拉取tomcat镜像</h3><pre><code class="bash">$ docker pull hub.c.163.com/library/tomcat:latest</code></pre><p>因为要部署到tomcat中去，所以也拉个下来，tomcat镜像是自带JDK的，所以无需拉取java的镜像了</p><h3 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h3><pre><code class="bash">$ vim Dockerfile</code></pre><p>Dockerfile就创建镜像的文件啦，若不在当前文件夹下，注意文件引入的路径</p><h3 id="填写内容"><a href="#填写内容" class="headerlink" title="填写内容"></a>填写内容</h3><pre><code class="bash">from hub.c.163.com/library/tomcatMAINTAINER anyang  johnney**@163.comCOPY jpress.war /usr/local/tomcat/webapps</code></pre><p>解释一下：这是基本配置</p><pre><code class="bash">from 引入tomcat镜像MAINTAINER 镜像的所有者及联系方式，可不填COPY 将创建的镜像拷贝到tomcat下，tomcat的具体路径可在镜像中心的镜像详情查看</code></pre><h3 id="构建自定义镜像"><a href="#构建自定义镜像" class="headerlink" title="构建自定义镜像"></a>构建自定义镜像</h3><pre><code class="bash">$ docker build -t jpress:latest .</code></pre><p>-t镜像名字及TAG  后面参数为镜像目录，.代表当前目录</p><p>创建完成后可查看自己的镜像：（docker images）</p><h3 id="运行自定义镜像"><a href="#运行自定义镜像" class="headerlink" title="运行自定义镜像"></a>运行自定义镜像</h3><pre><code class="bash">$ docker run -d -p 8888:8080 jpress</code></pre><h3 id="拉取mysql镜像"><a href="#拉取mysql镜像" class="headerlink" title="拉取mysql镜像"></a>拉取mysql镜像</h3><p>由于Jpress的安装需要使用到数据库，因此有了下面的步骤</p><pre><code class="bash">$ docker pull hub.c.163.com/library/mysql:latest</code></pre><h3 id="运行mysql镜像"><a href="#运行mysql镜像" class="headerlink" title="运行mysql镜像"></a>运行mysql镜像</h3><p>运行mysql是需要配置些数据库信息，如数据库密码（MYSQL_ROOT_PASSWORD）、需要创建的数据库（MYSQL_DATABASE）等，使用-e参数配键值对，更多参数可在镜像中心mysql镜像详情中查看。</p><pre><code class="bash">$ docker run -d -p 7777:3306 -e MYSQL_ROOT_PASSWORD=000000 -e MYSQL_DATABASE=jpress hub.c.163.com/library/mysql</code></pre><h3 id="配置并重启jpress容器"><a href="#配置并重启jpress容器" class="headerlink" title="配置并重启jpress容器"></a>配置并重启jpress容器</h3><p>按照上面的参数以及Jpress页面提示的安装步骤，填写好相应的信息即可成功创建Jpress。</p><p>配置完成后，需要重启jpress容器（按照你的具体id）：</p><pre><code class="bash">$ docker restart 5e8caebf1643</code></pre><h3 id="OK-访问吧"><a href="#OK-访问吧" class="headerlink" title="OK 访问吧!"></a>OK 访问吧!</h3><p>在浏览器输入IP:8888/jpress,结果如下</p><p><img src="/img/docker/jpresspage.png" alt="jpress页面"></p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ajax跨域问题</title>
      <link href="/2017/09/08/AjaxCrossDomain/"/>
      <url>/2017/09/08/AjaxCrossDomain/</url>
      <content type="html"><![CDATA[<p>由于JS同源策略的影响，因此js只能访问同域名下的文档，当我们用ajax请求某个别人提供的接口时，可能存在跨域问题，导致接口无法访问，这里有一些解决方案。</p><a id="more"></a><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>百度的解释：</p><blockquote><p>同源策略，它是由Netscape提出的一个著名的安全策略。现在所有支持JavaScript 的浏览器都会使用这个策略。所谓同源是指，域名，协议，端口相同。当一个浏览器的两个tab页中分别打开来 百度和谷歌的页面当一个百度浏览器执行一个脚本的时候会检查这个脚本是属于哪个页面的，即检查是否同源，只有和百度同源的脚本才会被执行。</p></blockquote><h2 id="跨域报错信息"><a href="#跨域报错信息" class="headerlink" title="跨域报错信息"></a>跨域报错信息</h2><pre><code>Origin null is not allowed by Access-Control-Allow-Origin</code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="在服务端填上响应头"><a href="#在服务端填上响应头" class="headerlink" title="在服务端填上响应头"></a>在服务端填上响应头</h3><pre><code>response.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;); response.setHeader(&quot;Access-Control-Allow-Methods:GET,POST&quot;);</code></pre><p>*号表示所有的域都接受，HTML5中提供的XMLHTTPREQUEST Level2（即XHR2）已经实现了跨域访问，添加上这些即可。</p><p>目前遇到的一个跨域问题使用这个方法解决了，只添加了第一条。</p><h2 id="另一种解决方案"><a href="#另一种解决方案" class="headerlink" title="另一种解决方案"></a>另一种解决方案</h2><h3 id="JSONP-JSON-with-Padding"><a href="#JSONP-JSON-with-Padding" class="headerlink" title="JSONP(JSON with Padding)"></a>JSONP(JSON with Padding)</h3><p>JSONP还需要去理解，这里先记个笔记，可无视。。。不保证记录的正确性。</p><p>百度百科</p><blockquote><p>JSONP(JSON with Padding)是JSON的一种“使用模式”，可用于解决主流浏览器的跨域数据访问的问题。用 JSONP 抓到的资料并不是 JSON，而是任意的JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。</p></blockquote><pre><code> $.ajax({      url: &quot;http://异域IP:port/getSomeData.do&quot;,      dataType: &quot;jsonp&quot;,      jsonpCallback: &quot;callbank&quot;,  //设置一个回调函数，请求的JSON将会被包裹在callback()内    success: function(data) {    //...    }   });   function callbank(data) {       console.log(data);   }</code></pre><p>JSONP对于GET适用，对于POST并没有完美支持，也需在服务端添上相应头，下面两行代码都需要。</p><pre><code>response.setHeader(&quot;Access-Control-Allow-Origin&quot;,&quot;*&quot;); response.setHeader(&quot;Access-Control-Allow-Methods:GET,POST&quot;);</code></pre>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> jQuery </tag>
            
            <tag> Ajax </tag>
            
            <tag> 编程问题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>来自南京眼</title>
      <link href="/2017/09/02/%E6%9D%A5%E8%87%AA%E5%8D%97%E4%BA%AC%E7%9C%BC/"/>
      <url>/2017/09/02/%E6%9D%A5%E8%87%AA%E5%8D%97%E4%BA%AC%E7%9C%BC/</url>
      <content type="html"><![CDATA[<p>2017.9.1 23:24</p><br><p>耽误了两周，但说要去还是要去的啊。当时觉得先去近一点的地方，选择了南京眼，是在网上看的照片，自己也喜欢水，那在桥上走着肯定很舒服。周五晚上去是很合适的。</p><br><a id="more"></a><br><p>当然，以上的想法或者说是计划是对于我一个人的。事实上并不是，好友来访，可能是猜到我昨天发了工资（狗贼！），索性就带他一起去吧，不，还有他女朋友（我是拒绝的！）。就这样开始了两个人和一条狗的短途。</p><br><p>我们是先做地铁到江心洲，随后叫的滴滴。下车的地方是一个小道，很长的小道，能够从远处看到南京眼的小道。顺着小道，朝桥的方向走去，小道是有路灯的，人不太多，可能都在桥上。这个时候已经有微风袭来，我喜欢走在前面，打开网易云音乐放了首Eason的《心的距离》，快步的走着。</p><br><p>到了桥上，灯光很好看，能够看到远处的大厦，这是我想到的城市该有的样子，所以我想我也是喜欢这个地方的。不拍照肯定不合适，我拍着景色，他们在自拍，或许也拍了这美景。可能是知道我晚上吃的不太饱，体贴的他们一把一把的狗粮往我嘴里塞，我享受着美食。（不要脸！）这不是重点，终于到了最尴尬的时候，我需要完成作为单手狗的使命，给他们拍照。我蹲在地下，满足他们的各种要求，像是“别拍腿”，“拍我亲他”，周围的人在我旁边走过，我仍蹲在地下等别人走再拍。喂！单身狗支架不要尊严啊！</p><br><p>上面都是玩笑话，能够看着朋友们开开心心，心里也算欣慰。他俩呢也是我之前说的有问题的情侣中的一对，有问题是我本着学习社会心理学应该学以致用的想法来分析他们之间的矛盾所得出来的结论。希望能够帮助他们去理解矛盾，遇到问题也能够想着尽力去解决，倒不希望他们走我走过的路。我喜欢去分析，可分析到最后得到结论与我自己的预见是不一致的。每个人都有自己的烦恼，两个人在一起自然会有矛盾，就你现在看到的他们的样子，你凭什么说他们有问题？作为局外人，我们自认能够看到他们组成的系统中所存在的问题，然而当这个系统出现紊乱（矛盾）时，系统的自我调节正是在加强这个系统的稳定性，自我调节的来源于哪？来自于系统成员自己的感悟、自己的行动。可以去分析当前的矛盾的原因，但主体不是你这个局外人。所以啊，明白了这个之后，想想自己瞎操个什么心啊（摊手）。</p><br><p>这里，比作一个系统的话，那自然从中体会到的是道家的思想，个人愚见，各学说中道家是最具科学依据的。旁观者，即是将我们抽离系统之外，或者对于某个系统来说我们极其渺小。那系统的稳定与否应当是顺其自然的，用外力去影响这个系统是有悖于道的。作为局外者，对于由别人组成的系统，或者对于自然这个大系统，它们有自己存在的方式，有自己调节的方式，我们干涉不了，能够自我调节的系统是适于万物的规律的，否则这个系统自然是不适合的，那么，瓦解也未尝不可。让他们自己发展，我们并不是圣人，能够处理好自己的事已实属不易。</p><br><p>既然是短途，到了时间也该结束了，但这次的出行自认为还是有意义的。不敢说什么能够以小见大能够看透什么，但希望能够做一个格物致知的人。到这，也能够去理解，人们为什么爱好去旅行，旅行不是到一个地点拍张照片告诉别人自己来过这个地方，而是我们需要遇见更多的人，去看更大的世界，能够去找到反省自己找到真我，让自己的认知得到提升，这才是旅行的意义。</p><br><p>通过认识别人来认识自己。我的想法是以当前为一个原点，小范围的一步步向外扩撒，以时间为刻度扩大自己周围的空间，在以后的日子多去一些地方，去实现自己的想法，共勉。</p><br><p>哎呀，这本来是想写下单身狗被虐的过程的，感觉。。。跑题了啊（尴尬脸）！罢了罢了，不重要，就是个噱头，谁说我像条狗的？我是个有梦想的程序猿好吧！我想我写的是我认为重要的。</p><br><p>睡了睡了，明天去加班，晚上还得去找虐！我得好好休息。</p><br><p>2017.9.2 00:41</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我还有心事没解决</title>
      <link href="/2017/08/26/%E6%88%91%E8%BF%98%E6%9C%89%E5%BF%83%E4%BA%8B%E6%B2%A1%E8%A7%A3%E5%86%B3/"/>
      <url>/2017/08/26/%E6%88%91%E8%BF%98%E6%9C%89%E5%BF%83%E4%BA%8B%E6%B2%A1%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<p>2017.8.25 23:25</p><br><p>这周给自己顶了一个计划，关于睡眠时间的。23点-6点周一是这样执行的，周二发现不可抗因素太多，当你把这一天所需要干完的事做完，23点是不够的。于是就变成了24点-7点。当然，仍没有计划的好。</p><br><a id="more"></a><br><p>24点到准时关灯，想让自己睡下。发现躺下脑海里全是事，有工作，有回忆，也有在意淫。这周一直在做一个关系图的展示，自然晚上也会去思考某一个功能应该去怎么实现，怎么去优化。还有就是能够想到一些之前的事，没有去想为什么会走到这一步，想的都是我是不是没有自己想象的那么放得下。</p><br><p>我有心事，我试着去放首轻松的歌来帮助自己入睡，强迫自己不去想，可闭上眼我能够看见我脑袋里出现的全是黑线，搅在一起的，密密麻麻。就又逼着自己去理顺它，内心是排斥的，是否给自己强加了太多的东西。无奈，我想去找一个理由去说服自己，能够不再逼自己。任何事情的发生都有一定的原因，任何事情的解决也都是因为我们自己找了能够让自己信服的理由，这是人类满足自尊的需求，让一切看似都是对的，让自己得到心理上的安慰。</p><br><p>该去何处找？我不知道。所以，我再给自己找个方式，来告诉自己这个方式能够去解决我当前的需求。于是，我做了个决定，周一请假，再去一次你的根，你之前待的地方，以后也会在。自认为这样能够解决我的心事。我有一个想法，把我们之前走过的路，去过的地方再走一遍，带上我自制的笔，每到一个地方，就画上一个句号，可能这会让我好受点。好像现在做的都在为我自己考虑，做的一切都是为了自己的需求，无妨，我确实自私，事实上也没有其他的办法。</p><br><p>先从你家开始吧。就想去走走，就只是走走，也不知道自己能不能忍住不去联系，我还记得你带我去的地方，我还想去见见它们，没准，它们也还记得我。上次去待的时间并不长，去一个地方所得到感受是与自己的心情有关的，那会是熟悉的，乐意的，渴望去到达的。现在的感受如同奔赴一个葬礼，害怕的，对距离感到恐惧的。我还是要去的，去接受才能继续往前走。</p><br><p>道理看的都明白，自己也会给别人说，但就是教不了自己。也明白朋友的安慰是出于对自己的关心，但确实，只有自己身处其中才发现并不易。因此，我表现出我的淡然，跟大家说我怎么的理性，怎么的能够很好的处理这些事，想省去朋友们的安慰，不毁坏他们的情绪。人去寻找在朋友间认同的需求事很重要的，但就目前看来，当认同的需求远小于自己身上的缺口时，是近似无效的，既然这样，自己去解决，别让他人担心。</p><br><p>新认识的一个朋友，可能在他认识我的时候我已经展示出跟以前不太一样的一面，而不像以前朋友对我的熟悉。那天我在看社会心理学，他问我：”像你这样的人，有什么能够干扰你？“。我何时变得如他嘴中说的那么强大？并没有。我看社会心理学并不是想去研究，我只是想用它来解释一些行为，将行为的感情色彩去除，才能让自己更容易去接受这些行为所给自己带来的影响。当然，我现在也不是什么都无所谓，我有我自己的想法，只是不愿意去把情绪放在对自己不利的事情上。我并不是无所畏惧，我有我的烦恼，但不一定得让别人知道，我需要去发泄，但发泄的对象不是非得是周围的人。我想他能明白我说的话。</p><br><p>我任性一次，周一请假去做自己想做的事。这周连续加了四晚上的班，明天再去把能够写完的写完，想多做一点，虽然还是不尽人意，没能将所有的工作完成。我把这周的工作进度写成邮件交给师傅，希望能够完成了下周一的交接，好让自己不那么感到失调，原谅自己。行吧，想做就做吧。</p><br><p>这次还有一个目的，在你的城市陪你过七夕。</p><br><p>也算”在一起“陪你过。</p><br><p>这是我最后的执着。</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我从未感受过的孤独</title>
      <link href="/2017/08/20/%E6%88%91%E4%BB%8E%E6%9C%AA%E6%84%9F%E5%8F%97%E8%BF%87%E7%9A%84%E5%AD%A4%E7%8B%AC/"/>
      <url>/2017/08/20/%E6%88%91%E4%BB%8E%E6%9C%AA%E6%84%9F%E5%8F%97%E8%BF%87%E7%9A%84%E5%AD%A4%E7%8B%AC/</url>
      <content type="html"><![CDATA[<p>2017.8.20 22:52</p><br><p>今天是星期天。从昨晚开始，心里不太好受，我觉得是感受到了孤独。</p><br><p>我确实也是一个待不住的人，总爱折腾。</p><br><a id="more"></a><br><p>周六的晚上，我试图收拾东西来让自己有其他的事做，但还是无果，于是定了一张电影票区看了电影。好像是我第一次一个去看电影，后座的人好像很好奇，那个人怎么就一个人来看电影，这话之前我也说过。但当时还是想回头告诉她们：You are right,single me!haha…</p><br><p>我也能预计到到了周末我的状态，于是想给自己找点活动，回来后我在豆瓣上找适合我的活动，也去网上搜索南京还有哪些好玩的地方。于是准备去石塘竹海，号称南京的最后一块宝地，真正让我想去的原因是看了网上的照片。那个地方很美，在山中，有湖，有竹子，也有很多游玩的人。</p><br><p>于是我搜了下路线，38公里，一天的时间来不及，或者说去了只能看一眼，就放弃了。有空还是要去的，毕竟那么美，那么宁静，可能比较适合我。</p><br><p>我感受到我的焦虑。想找一些朋友问问他们周末有什么安排，或许可以带上我。找找一般周末有空的吧，先找南京的，阿亮不舒服。真不行去合肥也行啊，张靖睡了，阿兵工作太累了，也不想打扰，而且确实一天来回合肥实在是太赶。我凌乱了。</p><br><p>当初来南京，是带着对未来的幻想来的，合肥行业不景气，南京离家不太远相对来说不错，更大信念是她会在。如今，孤身一人在这个城市，我想我有点后悔了。一路走来，每做的一个决定都取决于当时所给予的条件，或者说前提，用那个前提来保证所做的决定是正确的。如今，前提丢失，那决定是否还无误？</p><br><p>今天的状态确实不太好，早上看了会代码发现并不专心，看了些知乎的帖子也能够清楚的认识到自己的不足，这也让我焦虑，得去解决。</p><br><p>傍晚去新街口、夫子庙，想去看看人，那边人真的很多啊，很热闹。我喜欢看人，他们有各种情绪，他们在笑我也偷偷扬扬嘴角，他们不开心我也知道每个人总有糟心的事，我在索取他们的情绪，我好像能够融入进去。是不是不算孤独？</p><br><p>人具有社会性，需要陪伴。我只身一人在这城市，何来陪伴？感受到孤独也是无可厚非的。除了每周的工作时间，其他时间事好像都是一个人，室友出差房子里也就一个人。我打点了下这个租来的家，一为了占用自己的时间，二也上这个租来的家真的有家的样子。</p><br><p>晚上准备早睡，定的是11点，辗转反侧，于是睡前还是把自己的情绪写下来发泄一番。我自认这是个很好的调节办法，也乐此不疲。</p><br><p>明早尝试着早起。晚安。我对自己说。</p><br><p>略显矫情。</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>念想</title>
      <link href="/2017/08/13/%E5%BF%B5%E6%83%B3/"/>
      <url>/2017/08/13/%E5%BF%B5%E6%83%B3/</url>
      <content type="html"><![CDATA[<p>2017.8.13 21:09</p><p>我几乎对所有事都有进行悲观检测，唯独没有对你。</p><p>乐极生悲。</p><a id="more"></a><p>我不得不承认，我们倆在一起时件特别美好的事，当然是在分手之前。三年半，可能是美好的太久了，我迷失了，我沉浸了，忘记了乐极生悲这回事。也该相信，美好的事物应该是短暂的，在某种程度上说短暂才造就了她的美好。</p><p>好像知道的太晚了，当悲降临时，才发现来势凶猛，猝不及防，我感受到的只有无助，因为这次悲传达的信息就是告诉我，做什么也于事无补。</p><p>因为你，我丢失了我所有的底气。</p><p>朋友说我现在对很多事都没有信心，也不太敢向以前一样去做一些事。这个我清楚的知道，在这几年，我们在一起太安逸，大学太安逸，所做的一切事都与你有关，你在，我就不需要做与你无关的事，我那时认为的信心可能只是能够帮你完成一些事之后的快乐。而现在，我不仅丢了你，没了与你的快乐，也丢了底气。</p><p>我想写下我的大学四年，或者说想写我们，从初遇见开始。没有写作的功底，没有丰满的词藻，不知道自己能不能写下去，也不知道写着写着还能记得多少，更不确定再未来的某一天还想不想继续写下去。</p><p>想做就去做吧，也可能每写下一篇，就能够放下一点，我不想再承受了。</p><p>我时感受到世界的不公，如果有上帝的话，可能真如泰戈尔所说，上帝治愈你所以才要伤害你。再如果，我后天得到的是上帝给我的恩赐，那么我宁愿不要，我希望我哥能回来，你也能回来，我很想。</p><p>没有如果。</p><p>哥，希望你去的是你想要的天堂，希望那里的生活没有现实生活的压迫，你在这个世界所留下的念想，你想照顾的人，你想做的事，我来完成。</p><p>你，祝你幸福。</p>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
